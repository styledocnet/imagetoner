var av=Object.defineProperty;var lv=(e,r,t)=>r in e?av(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t;var Y=(e,r,t)=>lv(e,typeof r!="symbol"?r+"":r,t);const na=new Map,Pn=[],uv=(e,r,t)=>{if(r&&typeof r.init=="function"&&typeof r.createInferenceSessionHandler=="function"){const s=na.get(e);if(s===void 0)na.set(e,{backend:r,priority:t});else{if(s.priority>t)return;if(s.priority===t&&s.backend!==r)throw new Error(`cannot register backend "${e}" using priority ${t}`)}if(t>=0){const o=Pn.indexOf(e);o!==-1&&Pn.splice(o,1);for(let n=0;n<Pn.length;n++)if(na.get(Pn[n]).priority<=t){Pn.splice(n,0,e);return}Pn.push(e)}return}throw new TypeError("not a valid backend")},cv=async e=>{const r=na.get(e);if(!r)return"backend not found.";if(r.initialized)return r.backend;if(r.aborted)return r.error;{const t=!!r.initPromise;try{return t||(r.initPromise=r.backend.init(e)),await r.initPromise,r.initialized=!0,r.backend}catch(s){return t||(r.error=`${s}`,r.aborted=!0),r.error}finally{delete r.initPromise}}},dv=async e=>{const r=e.executionProviders||[],t=r.map(l=>typeof l=="string"?l:l.name),s=t.length===0?Pn:t;let o;const n=[],i=new Set;for(const l of s){const u=await cv(l);typeof u=="string"?n.push({name:l,err:u}):(o||(o=u),o===u&&i.add(l))}if(!o)throw new Error(`no available backend found. ERR: ${n.map(l=>`[${l.name}] ${l.err}`).join(", ")}`);for(const{name:l,err:u}of n)t.includes(l)&&console.warn(`removing requested execution provider "${l}" from session options because it is not available: ${u}`);const a=r.filter(l=>i.has(typeof l=="string"?l:l.name));return[o,new Proxy(e,{get:(l,u)=>u==="executionProviders"?a:Reflect.get(l,u)})]},pv="1.22.0-dev.20250409-89f8206ba4";let yf="warning";const xs={wasm:{},webgl:{},webgpu:{},versions:{common:pv},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);yf=e}},get logLevel(){return yf}};Object.defineProperty(xs,"logLevel",{enumerable:!0});const hv=xs,mv=(e,r)=>{const t=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);t.width=e.dims[3],t.height=e.dims[2];const s=t.getContext("2d");if(s!=null){let o,n;(r==null?void 0:r.tensorLayout)!==void 0&&r.tensorLayout==="NHWC"?(o=e.dims[2],n=e.dims[3]):(o=e.dims[3],n=e.dims[2]);const i=(r==null?void 0:r.format)!==void 0?r.format:"RGB",a=r==null?void 0:r.norm;let l,u;a===void 0||a.mean===void 0?l=[255,255,255,255]:typeof a.mean=="number"?l=[a.mean,a.mean,a.mean,a.mean]:(l=[a.mean[0],a.mean[1],a.mean[2],0],a.mean[3]!==void 0&&(l[3]=a.mean[3])),a===void 0||a.bias===void 0?u=[0,0,0,0]:typeof a.bias=="number"?u=[a.bias,a.bias,a.bias,a.bias]:(u=[a.bias[0],a.bias[1],a.bias[2],0],a.bias[3]!==void 0&&(u[3]=a.bias[3]));const p=n*o;let c=0,d=p,_=p*2,f=-1;i==="RGBA"?(c=0,d=p,_=p*2,f=p*3):i==="RGB"?(c=0,d=p,_=p*2):i==="RBG"&&(c=0,_=p,d=p*2);for(let T=0;T<n;T++)for(let I=0;I<o;I++){const g=(e.data[c++]-u[0])*l[0],w=(e.data[d++]-u[1])*l[1],S=(e.data[_++]-u[2])*l[2],E=f===-1?255:(e.data[f++]-u[3])*l[3];s.fillStyle="rgba("+g+","+w+","+S+","+E+")",s.fillRect(I,T,1,1)}if("toDataURL"in t)return t.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},fv=(e,r)=>{const t=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");let s;if(t!=null){let o,n,i;(r==null?void 0:r.tensorLayout)!==void 0&&r.tensorLayout==="NHWC"?(o=e.dims[2],n=e.dims[1],i=e.dims[3]):(o=e.dims[3],n=e.dims[2],i=e.dims[1]);const a=r!==void 0&&r.format!==void 0?r.format:"RGB",l=r==null?void 0:r.norm;let u,p;l===void 0||l.mean===void 0?u=[255,255,255,255]:typeof l.mean=="number"?u=[l.mean,l.mean,l.mean,l.mean]:(u=[l.mean[0],l.mean[1],l.mean[2],255],l.mean[3]!==void 0&&(u[3]=l.mean[3])),l===void 0||l.bias===void 0?p=[0,0,0,0]:typeof l.bias=="number"?p=[l.bias,l.bias,l.bias,l.bias]:(p=[l.bias[0],l.bias[1],l.bias[2],0],l.bias[3]!==void 0&&(p[3]=l.bias[3]));const c=n*o;if(r!==void 0&&(r.format!==void 0&&i===4&&r.format!=="RGBA"||i===3&&r.format!=="RGB"&&r.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");const d=4;let _=0,f=1,T=2,I=3,g=0,w=c,S=c*2,E=-1;a==="RGBA"?(g=0,w=c,S=c*2,E=c*3):a==="RGB"?(g=0,w=c,S=c*2):a==="RBG"&&(g=0,S=c,w=c*2),s=t.createImageData(o,n);for(let v=0;v<n*o;_+=d,f+=d,T+=d,I+=d,v++)s.data[_]=(e.data[g++]-p[0])*u[0],s.data[f]=(e.data[w++]-p[1])*u[1],s.data[T]=(e.data[S++]-p[2])*u[2],s.data[I]=E===-1?255:(e.data[E++]-p[3])*u[3]}else throw new Error("Can not access image data");return s},Sl=(e,r)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(r.height===void 0||r.width===void 0)throw new Error("Image height and width must be defined");if(r.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");const{height:t,width:s}=r,o=r.norm??{mean:255,bias:0};let n,i;typeof o.mean=="number"?n=[o.mean,o.mean,o.mean,o.mean]:n=[o.mean[0],o.mean[1],o.mean[2],o.mean[3]??255],typeof o.bias=="number"?i=[o.bias,o.bias,o.bias,o.bias]:i=[o.bias[0],o.bias[1],o.bias[2],o.bias[3]??0];const a=r.format!==void 0?r.format:"RGBA",l=r.tensorFormat!==void 0&&r.tensorFormat!==void 0?r.tensorFormat:"RGB",u=t*s,p=l==="RGBA"?new Float32Array(u*4):new Float32Array(u*3);let c=4,d=0,_=1,f=2,T=3,I=0,g=u,w=u*2,S=-1;a==="RGB"&&(c=3,d=0,_=1,f=2,T=-1),l==="RGBA"?S=u*3:l==="RBG"?(I=0,w=u,g=u*2):l==="BGR"&&(w=0,g=u,I=u*2);for(let v=0;v<u;v++,d+=c,f+=c,_+=c,T+=c)p[I++]=(e[d]+i[0])/n[0],p[g++]=(e[_]+i[1])/n[1],p[w++]=(e[f]+i[2])/n[2],S!==-1&&T!==-1&&(p[S++]=(e[T]+i[3])/n[3]);return l==="RGBA"?new ls("float32",p,[1,4,t,s]):new ls("float32",p,[1,3,t,s])},_v=async(e,r)=>{const t=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,s=typeof ImageData<"u"&&e instanceof ImageData,o=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,n=typeof e=="string";let i,a=r??{};const l=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},u=p=>typeof HTMLCanvasElement<"u"&&p instanceof HTMLCanvasElement||p instanceof OffscreenCanvas?p.getContext("2d"):null;if(t){const p=l();p.width=e.width,p.height=e.height;const c=u(p);if(c!=null){let d=e.height,_=e.width;if(r!==void 0&&r.resizedHeight!==void 0&&r.resizedWidth!==void 0&&(d=r.resizedHeight,_=r.resizedWidth),r!==void 0){if(a=r,r.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");a.tensorFormat="RGBA",a.height=d,a.width=_}else a.tensorFormat="RGBA",a.height=d,a.width=_;c.drawImage(e,0,0),i=c.getImageData(0,0,_,d).data}else throw new Error("Can not access image data")}else if(s){let p,c;if(r!==void 0&&r.resizedWidth!==void 0&&r.resizedHeight!==void 0?(p=r.resizedHeight,c=r.resizedWidth):(p=e.height,c=e.width),r!==void 0&&(a=r),a.format="RGBA",a.height=p,a.width=c,r!==void 0){const d=l();d.width=c,d.height=p;const _=u(d);if(_!=null)_.putImageData(e,0,0),i=_.getImageData(0,0,c,p).data;else throw new Error("Can not access image data")}else i=e.data}else if(o){if(r===void 0)throw new Error("Please provide image config with format for Imagebitmap");const p=l();p.width=e.width,p.height=e.height;const c=u(p);if(c!=null){const d=e.height,_=e.width;return c.drawImage(e,0,0,_,d),i=c.getImageData(0,0,_,d).data,a.height=d,a.width=_,Sl(i,a)}else throw new Error("Can not access image data")}else{if(n)return new Promise((p,c)=>{const d=l(),_=u(d);if(!e||!_)return c();const f=new Image;f.crossOrigin="Anonymous",f.src=e,f.onload=()=>{d.width=f.width,d.height=f.height,_.drawImage(f,0,0,d.width,d.height);const T=_.getImageData(0,0,d.width,d.height);a.height=d.height,a.width=d.width,p(Sl(T.data,a))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(i!==void 0)return Sl(i,a);throw new Error("Input data provided is not supported - aborted tensor creation")},gv=(e,r)=>{const{width:t,height:s,download:o,dispose:n}=r,i=[1,s,t,4];return new ls({location:"texture",type:"float32",texture:e,dims:i,download:o,dispose:n})},wv=(e,r)=>{const{dataType:t,dims:s,download:o,dispose:n}=r;return new ls({location:"gpu-buffer",type:t??"float32",gpuBuffer:e,dims:s,download:o,dispose:n})},Mv=(e,r)=>{const{dataType:t,dims:s,download:o,dispose:n}=r;return new ls({location:"ml-tensor",type:t??"float32",mlTensor:e,dims:s,download:o,dispose:n})},bv=(e,r,t)=>new ls({location:"cpu-pinned",type:e,data:r,dims:t??[r.length]}),Yn=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),oa=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]);let vf=!1;const yv=()=>{if(!vf){vf=!0;const e=typeof BigInt64Array<"u"&&BigInt64Array.from,r=typeof BigUint64Array<"u"&&BigUint64Array.from,t=globalThis.Float16Array,s=typeof t<"u"&&t.from;e&&(Yn.set("int64",BigInt64Array),oa.set(BigInt64Array,"int64")),r&&(Yn.set("uint64",BigUint64Array),oa.set(BigUint64Array,"uint64")),s?(Yn.set("float16",t),oa.set(t,"float16")):Yn.set("float16",Uint16Array)}},vv=e=>{let r=1;for(let t=0;t<e.length;t++){const s=e[t];if(typeof s!="number"||!Number.isSafeInteger(s))throw new TypeError(`dims[${t}] must be an integer, got: ${s}`);if(s<0)throw new RangeError(`dims[${t}] must be a non-negative integer, got: ${s}`);r*=s}return r},xv=(e,r)=>{switch(e.location){case"cpu":return new ls(e.type,e.data,r);case"cpu-pinned":return new ls({location:"cpu-pinned",data:e.data,type:e.type,dims:r});case"texture":return new ls({location:"texture",texture:e.texture,type:e.type,dims:r});case"gpu-buffer":return new ls({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:r});case"ml-tensor":return new ls({location:"ml-tensor",mlTensor:e.mlTensor,type:e.type,dims:r});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}};let ls=class{constructor(r,t,s){yv();let o,n;if(typeof r=="object"&&"location"in r)switch(this.dataLocation=r.location,o=r.type,n=r.dims,r.location){case"cpu-pinned":{const a=Yn.get(o);if(!a)throw new TypeError(`unsupported type "${o}" to create tensor from pinned buffer`);if(!(r.data instanceof a))throw new TypeError(`buffer should be of type ${a.name}`);this.cpuData=r.data;break}case"texture":{if(o!=="float32")throw new TypeError(`unsupported type "${o}" to create tensor from texture`);this.gpuTextureData=r.texture,this.downloader=r.download,this.disposer=r.dispose;break}case"gpu-buffer":{if(o!=="float32"&&o!=="float16"&&o!=="int32"&&o!=="int64"&&o!=="uint32"&&o!=="uint8"&&o!=="bool"&&o!=="uint4"&&o!=="int4")throw new TypeError(`unsupported type "${o}" to create tensor from gpu buffer`);this.gpuBufferData=r.gpuBuffer,this.downloader=r.download,this.disposer=r.dispose;break}case"ml-tensor":{if(o!=="float32"&&o!=="float16"&&o!=="int32"&&o!=="int64"&&o!=="uint32"&&o!=="uint64"&&o!=="int8"&&o!=="uint8"&&o!=="bool"&&o!=="uint4"&&o!=="int4")throw new TypeError(`unsupported type "${o}" to create tensor from MLTensor`);this.mlTensorData=r.mlTensor,this.downloader=r.download,this.disposer=r.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let a,l;if(typeof r=="string")if(o=r,l=s,r==="string"){if(!Array.isArray(t))throw new TypeError("A string tensor's data must be a string array.");a=t}else{const u=Yn.get(r);if(u===void 0)throw new TypeError(`Unsupported tensor type: ${r}.`);if(Array.isArray(t)){if(r==="float16"&&u===Uint16Array||r==="uint4"||r==="int4")throw new TypeError(`Creating a ${r} tensor from number array is not supported. Please use ${u.name} as data.`);r==="uint64"||r==="int64"?a=u.from(t,BigInt):a=u.from(t)}else if(t instanceof u)a=t;else if(t instanceof Uint8ClampedArray)if(r==="uint8")a=Uint8Array.from(t);else throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");else if(r==="float16"&&t instanceof Uint16Array&&u!==Uint16Array)a=new globalThis.Float16Array(t.buffer,t.byteOffset,t.length);else throw new TypeError(`A ${o} tensor's data must be type of ${u}`)}else if(l=t,Array.isArray(r)){if(r.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");const u=typeof r[0];if(u==="string")o="string",a=r;else if(u==="boolean")o="bool",a=Uint8Array.from(r);else throw new TypeError(`Invalid element type of data array: ${u}.`)}else if(r instanceof Uint8ClampedArray)o="uint8",a=Uint8Array.from(r);else{const u=oa.get(r.constructor);if(u===void 0)throw new TypeError(`Unsupported type for tensor data: ${r.constructor}.`);o=u,a=r}if(l===void 0)l=[a.length];else if(!Array.isArray(l))throw new TypeError("A tensor's dims must be a number array");n=l,this.cpuData=a,this.dataLocation="cpu"}const i=vv(n);if(this.cpuData&&i!==this.cpuData.length&&!((o==="uint4"||o==="int4")&&Math.ceil(i/2)===this.cpuData.length))throw new Error(`Tensor's size(${i}) does not match data length(${this.cpuData.length}).`);this.type=o,this.dims=n,this.size=i}static async fromImage(r,t){return _v(r,t)}static fromTexture(r,t){return gv(r,t)}static fromGpuBuffer(r,t){return wv(r,t)}static fromMLTensor(r,t){return Mv(r,t)}static fromPinnedBuffer(r,t,s){return bv(r,t,s)}toDataURL(r){return mv(this,r)}toImageData(r){return fv(this,r)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(r){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;const t=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=t,r&&this.disposer&&(this.disposer(),this.disposer=void 0),t}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(r){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return xv(this,r)}};const Xn=ls,rM=(e,r)=>{(typeof xs.trace>"u"?!xs.wasm.trace:!xs.trace)||console.timeStamp(`${e}::ORT::${r}`)},sM=(e,r)=>{var o;const t=((o=new Error().stack)==null?void 0:o.split(/\r\n|\r|\n/g))||[];let s=!1;for(let n=0;n<t.length;n++){if(s&&!t[n].includes("TRACE_FUNC")){let i=`FUNC_${e}::${t[n].trim().split(" ")[1]}`;r&&(i+=`::${r}`),rM("CPU",i);return}t[n].includes("TRACE_FUNC")&&(s=!0)}},Su=e=>{(typeof xs.trace>"u"?!xs.wasm.trace:!xs.trace)||sM("BEGIN",e)},$u=e=>{(typeof xs.trace>"u"?!xs.wasm.trace:!xs.trace)||sM("END",e)};let Tv=class nM{constructor(r){this.handler=r}async run(r,t,s){Su();const o={};let n={};if(typeof r!="object"||r===null||r instanceof Xn||Array.isArray(r))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let i=!0;if(typeof t=="object"){if(t===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(t instanceof Xn)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(t)){if(t.length===0)throw new TypeError("'fetches' cannot be an empty array.");i=!1;for(const u of t){if(typeof u!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(u)===-1)throw new RangeError(`'fetches' contains invalid output name: ${u}.`);o[u]=null}if(typeof s=="object"&&s!==null)n=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else{let u=!1;const p=Object.getOwnPropertyNames(t);for(const c of this.outputNames)if(p.indexOf(c)!==-1){const d=t[c];(d===null||d instanceof Xn)&&(u=!0,i=!1,o[c]=d)}if(u){if(typeof s=="object"&&s!==null)n=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else n=t}}else if(typeof t<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const u of this.inputNames)if(typeof r[u]>"u")throw new Error(`input '${u}' is missing in 'feeds'.`);if(i)for(const u of this.outputNames)o[u]=null;const a=await this.handler.run(r,o,n),l={};for(const u in a)if(Object.hasOwnProperty.call(a,u)){const p=a[u];p instanceof Xn?l[u]=p:l[u]=new Xn(p.type,p.data,p.dims)}return $u(),l}async release(){return this.handler.dispose()}static async create(r,t,s,o){Su();let n,i={};if(typeof r=="string"){if(n=r,typeof t=="object"&&t!==null)i=t;else if(typeof t<"u")throw new TypeError("'options' must be an object.")}else if(r instanceof Uint8Array){if(n=r,typeof t=="object"&&t!==null)i=t;else if(typeof t<"u")throw new TypeError("'options' must be an object.")}else if(r instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&r instanceof SharedArrayBuffer){const p=r;let c=0,d=r.byteLength;if(typeof t=="object"&&t!==null)i=t;else if(typeof t=="number"){if(c=t,!Number.isSafeInteger(c))throw new RangeError("'byteOffset' must be an integer.");if(c<0||c>=p.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${p.byteLength}).`);if(d=r.byteLength-c,typeof s=="number"){if(d=s,!Number.isSafeInteger(d))throw new RangeError("'byteLength' must be an integer.");if(d<=0||c+d>p.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${p.byteLength-c}].`);if(typeof o=="object"&&o!==null)i=o;else if(typeof o<"u")throw new TypeError("'options' must be an object.")}else if(typeof s<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof t<"u")throw new TypeError("'options' must be an object.");n=new Uint8Array(p,c,d)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");const[a,l]=await dv(i),u=await a.createInferenceSessionHandler(n,l);return $u(),new nM(u)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}get inputMetadata(){return this.handler.inputMetadata}get outputMetadata(){return this.handler.outputMetadata}};const Ev=Tv,Pv=Object.freeze(Object.defineProperty({__proto__:null,InferenceSession:Ev,TRACE:rM,TRACE_FUNC_BEGIN:Su,TRACE_FUNC_END:$u,Tensor:Xn,env:hv,registerBackend:uv},Symbol.toStringTag,{value:"Module"}));/*!
 * ONNX Runtime Web v1.22.0-dev.20250409-89f8206ba4
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */var Ku=Object.defineProperty,Cv=Object.getOwnPropertyDescriptor,Sv=Object.getOwnPropertyNames,$v=Object.prototype.hasOwnProperty,Iv=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(r,t)=>(typeof require<"u"?require:r)[t]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')}),je=(e,r)=>()=>(e&&(r=e(e=0)),r),ro=(e,r)=>{for(var t in r)Ku(e,t,{get:r[t],enumerable:!0})},kv=(e,r,t,s)=>{if(r&&typeof r=="object"||typeof r=="function")for(let o of Sv(r))!$v.call(e,o)&&o!==t&&Ku(e,o,{get:()=>r[o],enumerable:!(s=Cv(r,o))||s.enumerable});return e},Qo=e=>kv(Ku({},"__esModule",{value:!0}),e),Oo,Qs,$n,xf,oM,iM=je(()=>{Oo=new Map,Qs=[],$n=(e,r,t)=>{if(r&&typeof r.init=="function"&&typeof r.createInferenceSessionHandler=="function"){let s=Oo.get(e);if(s===void 0)Oo.set(e,{backend:r,priority:t});else{if(s.priority>t)return;if(s.priority===t&&s.backend!==r)throw new Error(`cannot register backend "${e}" using priority ${t}`)}if(t>=0){let o=Qs.indexOf(e);o!==-1&&Qs.splice(o,1);for(let n=0;n<Qs.length;n++)if(Oo.get(Qs[n]).priority<=t){Qs.splice(n,0,e);return}Qs.push(e)}return}throw new TypeError("not a valid backend")},xf=async e=>{let r=Oo.get(e);if(!r)return"backend not found.";if(r.initialized)return r.backend;if(r.aborted)return r.error;{let t=!!r.initPromise;try{return t||(r.initPromise=r.backend.init(e)),await r.initPromise,r.initialized=!0,r.backend}catch(s){return t||(r.error=`${s}`,r.aborted=!0),r.error}finally{delete r.initPromise}}},oM=async e=>{let r=e.executionProviders||[],t=r.map(l=>typeof l=="string"?l:l.name),s=t.length===0?Qs:t,o,n=[],i=new Set;for(let l of s){let u=await xf(l);typeof u=="string"?n.push({name:l,err:u}):(o||(o=u),o===u&&i.add(l))}if(!o)throw new Error(`no available backend found. ERR: ${n.map(l=>`[${l.name}] ${l.err}`).join(", ")}`);for(let{name:l,err:u}of n)t.includes(l)&&console.warn(`removing requested execution provider "${l}" from session options because it is not available: ${u}`);let a=r.filter(l=>i.has(typeof l=="string"?l:l.name));return[o,new Proxy(e,{get:(l,u)=>u==="executionProviders"?a:Reflect.get(l,u)})]}}),Av=je(()=>{iM()}),aM,Fv=je(()=>{aM="1.22.0-dev.20250409-89f8206ba4"}),$l,as,lM=je(()=>{Fv(),$l="warning",as={wasm:{},webgl:{},webgpu:{},versions:{common:aM},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);$l=e}},get logLevel(){return $l}},Object.defineProperty(as,"logLevel",{enumerable:!0})}),Yt,Ov=je(()=>{lM(),Yt=as}),uM,cM,Dv=je(()=>{uM=(e,r)=>{let t=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);t.width=e.dims[3],t.height=e.dims[2];let s=t.getContext("2d");if(s!=null){let o,n;(r==null?void 0:r.tensorLayout)!==void 0&&r.tensorLayout==="NHWC"?(o=e.dims[2],n=e.dims[3]):(o=e.dims[3],n=e.dims[2]);let i=(r==null?void 0:r.format)!==void 0?r.format:"RGB",a=r==null?void 0:r.norm,l,u;a===void 0||a.mean===void 0?l=[255,255,255,255]:typeof a.mean=="number"?l=[a.mean,a.mean,a.mean,a.mean]:(l=[a.mean[0],a.mean[1],a.mean[2],0],a.mean[3]!==void 0&&(l[3]=a.mean[3])),a===void 0||a.bias===void 0?u=[0,0,0,0]:typeof a.bias=="number"?u=[a.bias,a.bias,a.bias,a.bias]:(u=[a.bias[0],a.bias[1],a.bias[2],0],a.bias[3]!==void 0&&(u[3]=a.bias[3]));let p=n*o,c=0,d=p,_=p*2,f=-1;i==="RGBA"?(c=0,d=p,_=p*2,f=p*3):i==="RGB"?(c=0,d=p,_=p*2):i==="RBG"&&(c=0,_=p,d=p*2);for(let T=0;T<n;T++)for(let I=0;I<o;I++){let g=(e.data[c++]-u[0])*l[0],w=(e.data[d++]-u[1])*l[1],S=(e.data[_++]-u[2])*l[2],E=f===-1?255:(e.data[f++]-u[3])*l[3];s.fillStyle="rgba("+g+","+w+","+S+","+E+")",s.fillRect(I,T,1,1)}if("toDataURL"in t)return t.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},cM=(e,r)=>{let t=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d"),s;if(t!=null){let o,n,i;(r==null?void 0:r.tensorLayout)!==void 0&&r.tensorLayout==="NHWC"?(o=e.dims[2],n=e.dims[1],i=e.dims[3]):(o=e.dims[3],n=e.dims[2],i=e.dims[1]);let a=r!==void 0&&r.format!==void 0?r.format:"RGB",l=r==null?void 0:r.norm,u,p;l===void 0||l.mean===void 0?u=[255,255,255,255]:typeof l.mean=="number"?u=[l.mean,l.mean,l.mean,l.mean]:(u=[l.mean[0],l.mean[1],l.mean[2],255],l.mean[3]!==void 0&&(u[3]=l.mean[3])),l===void 0||l.bias===void 0?p=[0,0,0,0]:typeof l.bias=="number"?p=[l.bias,l.bias,l.bias,l.bias]:(p=[l.bias[0],l.bias[1],l.bias[2],0],l.bias[3]!==void 0&&(p[3]=l.bias[3]));let c=n*o;if(r!==void 0&&(r.format!==void 0&&i===4&&r.format!=="RGBA"||i===3&&r.format!=="RGB"&&r.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let d=4,_=0,f=1,T=2,I=3,g=0,w=c,S=c*2,E=-1;a==="RGBA"?(g=0,w=c,S=c*2,E=c*3):a==="RGB"?(g=0,w=c,S=c*2):a==="RBG"&&(g=0,S=c,w=c*2),s=t.createImageData(o,n);for(let v=0;v<n*o;_+=d,f+=d,T+=d,I+=d,v++)s.data[_]=(e.data[g++]-p[0])*u[0],s.data[f]=(e.data[w++]-p[1])*u[1],s.data[T]=(e.data[S++]-p[2])*u[2],s.data[I]=E===-1?255:(e.data[E++]-p[3])*u[3]}else throw new Error("Can not access image data");return s}}),Wi,dM,pM,hM,mM,fM,Lv=je(()=>{Hu(),Wi=(e,r)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(r.height===void 0||r.width===void 0)throw new Error("Image height and width must be defined");if(r.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:t,width:s}=r,o=r.norm??{mean:255,bias:0},n,i;typeof o.mean=="number"?n=[o.mean,o.mean,o.mean,o.mean]:n=[o.mean[0],o.mean[1],o.mean[2],o.mean[3]??255],typeof o.bias=="number"?i=[o.bias,o.bias,o.bias,o.bias]:i=[o.bias[0],o.bias[1],o.bias[2],o.bias[3]??0];let a=r.format!==void 0?r.format:"RGBA",l=r.tensorFormat!==void 0&&r.tensorFormat!==void 0?r.tensorFormat:"RGB",u=t*s,p=l==="RGBA"?new Float32Array(u*4):new Float32Array(u*3),c=4,d=0,_=1,f=2,T=3,I=0,g=u,w=u*2,S=-1;a==="RGB"&&(c=3,d=0,_=1,f=2,T=-1),l==="RGBA"?S=u*3:l==="RBG"?(I=0,w=u,g=u*2):l==="BGR"&&(w=0,g=u,I=u*2);for(let E=0;E<u;E++,d+=c,f+=c,_+=c,T+=c)p[I++]=(e[d]+i[0])/n[0],p[g++]=(e[_]+i[1])/n[1],p[w++]=(e[f]+i[2])/n[2],S!==-1&&T!==-1&&(p[S++]=(e[T]+i[3])/n[3]);return l==="RGBA"?new Xr("float32",p,[1,4,t,s]):new Xr("float32",p,[1,3,t,s])},dM=async(e,r)=>{let t=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,s=typeof ImageData<"u"&&e instanceof ImageData,o=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,n=typeof e=="string",i,a=r??{},l=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},u=p=>typeof HTMLCanvasElement<"u"&&p instanceof HTMLCanvasElement||p instanceof OffscreenCanvas?p.getContext("2d"):null;if(t){let p=l();p.width=e.width,p.height=e.height;let c=u(p);if(c!=null){let d=e.height,_=e.width;if(r!==void 0&&r.resizedHeight!==void 0&&r.resizedWidth!==void 0&&(d=r.resizedHeight,_=r.resizedWidth),r!==void 0){if(a=r,r.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");a.tensorFormat="RGBA",a.height=d,a.width=_}else a.tensorFormat="RGBA",a.height=d,a.width=_;c.drawImage(e,0,0),i=c.getImageData(0,0,_,d).data}else throw new Error("Can not access image data")}else if(s){let p,c;if(r!==void 0&&r.resizedWidth!==void 0&&r.resizedHeight!==void 0?(p=r.resizedHeight,c=r.resizedWidth):(p=e.height,c=e.width),r!==void 0&&(a=r),a.format="RGBA",a.height=p,a.width=c,r!==void 0){let d=l();d.width=c,d.height=p;let _=u(d);if(_!=null)_.putImageData(e,0,0),i=_.getImageData(0,0,c,p).data;else throw new Error("Can not access image data")}else i=e.data}else if(o){if(r===void 0)throw new Error("Please provide image config with format for Imagebitmap");let p=l();p.width=e.width,p.height=e.height;let c=u(p);if(c!=null){let d=e.height,_=e.width;return c.drawImage(e,0,0,_,d),i=c.getImageData(0,0,_,d).data,a.height=d,a.width=_,Wi(i,a)}else throw new Error("Can not access image data")}else{if(n)return new Promise((p,c)=>{let d=l(),_=u(d);if(!e||!_)return c();let f=new Image;f.crossOrigin="Anonymous",f.src=e,f.onload=()=>{d.width=f.width,d.height=f.height,_.drawImage(f,0,0,d.width,d.height);let T=_.getImageData(0,0,d.width,d.height);a.height=d.height,a.width=d.width,p(Wi(T.data,a))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(i!==void 0)return Wi(i,a);throw new Error("Input data provided is not supported - aborted tensor creation")},pM=(e,r)=>{let{width:t,height:s,download:o,dispose:n}=r,i=[1,s,t,4];return new Xr({location:"texture",type:"float32",texture:e,dims:i,download:o,dispose:n})},hM=(e,r)=>{let{dataType:t,dims:s,download:o,dispose:n}=r;return new Xr({location:"gpu-buffer",type:t??"float32",gpuBuffer:e,dims:s,download:o,dispose:n})},mM=(e,r)=>{let{dataType:t,dims:s,download:o,dispose:n}=r;return new Xr({location:"ml-tensor",type:t??"float32",mlTensor:e,dims:s,download:o,dispose:n})},fM=(e,r,t)=>new Xr({location:"cpu-pinned",type:e,data:r,dims:t??[r.length]})}),Cn,Wo,Il,_M,zv=je(()=>{Cn=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),Wo=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),Il=!1,_M=()=>{if(!Il){Il=!0;let e=typeof BigInt64Array<"u"&&BigInt64Array.from,r=typeof BigUint64Array<"u"&&BigUint64Array.from,t=globalThis.Float16Array,s=typeof t<"u"&&t.from;e&&(Cn.set("int64",BigInt64Array),Wo.set(BigInt64Array,"int64")),r&&(Cn.set("uint64",BigUint64Array),Wo.set(BigUint64Array,"uint64")),s?(Cn.set("float16",t),Wo.set(t,"float16")):Cn.set("float16",Uint16Array)}}}),gM,wM,Bv=je(()=>{Hu(),gM=e=>{let r=1;for(let t=0;t<e.length;t++){let s=e[t];if(typeof s!="number"||!Number.isSafeInteger(s))throw new TypeError(`dims[${t}] must be an integer, got: ${s}`);if(s<0)throw new RangeError(`dims[${t}] must be a non-negative integer, got: ${s}`);r*=s}return r},wM=(e,r)=>{switch(e.location){case"cpu":return new Xr(e.type,e.data,r);case"cpu-pinned":return new Xr({location:"cpu-pinned",data:e.data,type:e.type,dims:r});case"texture":return new Xr({location:"texture",texture:e.texture,type:e.type,dims:r});case"gpu-buffer":return new Xr({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:r});case"ml-tensor":return new Xr({location:"ml-tensor",mlTensor:e.mlTensor,type:e.type,dims:r});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}}),Xr,Hu=je(()=>{Dv(),Lv(),zv(),Bv(),Xr=class{constructor(e,r,t){_M();let s,o;if(typeof e=="object"&&"location"in e)switch(this.dataLocation=e.location,s=e.type,o=e.dims,e.location){case"cpu-pinned":{let i=Cn.get(s);if(!i)throw new TypeError(`unsupported type "${s}" to create tensor from pinned buffer`);if(!(e.data instanceof i))throw new TypeError(`buffer should be of type ${i.name}`);this.cpuData=e.data;break}case"texture":{if(s!=="float32")throw new TypeError(`unsupported type "${s}" to create tensor from texture`);this.gpuTextureData=e.texture,this.downloader=e.download,this.disposer=e.dispose;break}case"gpu-buffer":{if(s!=="float32"&&s!=="float16"&&s!=="int32"&&s!=="int64"&&s!=="uint32"&&s!=="uint8"&&s!=="bool"&&s!=="uint4"&&s!=="int4")throw new TypeError(`unsupported type "${s}" to create tensor from gpu buffer`);this.gpuBufferData=e.gpuBuffer,this.downloader=e.download,this.disposer=e.dispose;break}case"ml-tensor":{if(s!=="float32"&&s!=="float16"&&s!=="int32"&&s!=="int64"&&s!=="uint32"&&s!=="uint64"&&s!=="int8"&&s!=="uint8"&&s!=="bool"&&s!=="uint4"&&s!=="int4")throw new TypeError(`unsupported type "${s}" to create tensor from MLTensor`);this.mlTensorData=e.mlTensor,this.downloader=e.download,this.disposer=e.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let i,a;if(typeof e=="string")if(s=e,a=t,e==="string"){if(!Array.isArray(r))throw new TypeError("A string tensor's data must be a string array.");i=r}else{let l=Cn.get(e);if(l===void 0)throw new TypeError(`Unsupported tensor type: ${e}.`);if(Array.isArray(r)){if(e==="float16"&&l===Uint16Array||e==="uint4"||e==="int4")throw new TypeError(`Creating a ${e} tensor from number array is not supported. Please use ${l.name} as data.`);e==="uint64"||e==="int64"?i=l.from(r,BigInt):i=l.from(r)}else if(r instanceof l)i=r;else if(r instanceof Uint8ClampedArray)if(e==="uint8")i=Uint8Array.from(r);else throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");else if(e==="float16"&&r instanceof Uint16Array&&l!==Uint16Array)i=new globalThis.Float16Array(r.buffer,r.byteOffset,r.length);else throw new TypeError(`A ${s} tensor's data must be type of ${l}`)}else if(a=r,Array.isArray(e)){if(e.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let l=typeof e[0];if(l==="string")s="string",i=e;else if(l==="boolean")s="bool",i=Uint8Array.from(e);else throw new TypeError(`Invalid element type of data array: ${l}.`)}else if(e instanceof Uint8ClampedArray)s="uint8",i=Uint8Array.from(e);else{let l=Wo.get(e.constructor);if(l===void 0)throw new TypeError(`Unsupported type for tensor data: ${e.constructor}.`);s=l,i=e}if(a===void 0)a=[i.length];else if(!Array.isArray(a))throw new TypeError("A tensor's dims must be a number array");o=a,this.cpuData=i,this.dataLocation="cpu"}let n=gM(o);if(this.cpuData&&n!==this.cpuData.length&&!((s==="uint4"||s==="int4")&&Math.ceil(n/2)===this.cpuData.length))throw new Error(`Tensor's size(${n}) does not match data length(${this.cpuData.length}).`);this.type=s,this.dims=o,this.size=n}static async fromImage(e,r){return dM(e,r)}static fromTexture(e,r){return pM(e,r)}static fromGpuBuffer(e,r){return hM(e,r)}static fromMLTensor(e,r){return mM(e,r)}static fromPinnedBuffer(e,r,t){return fM(e,r,t)}toDataURL(e){return uM(this,e)}toImageData(e){return cM(this,e)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(e){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let r=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=r,e&&this.disposer&&(this.disposer(),this.disposer=void 0),r}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(e){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return wM(this,e)}}}),vs,MM=je(()=>{Hu(),vs=Xr}),Xo,kl,Ts,us,bM=je(()=>{lM(),Xo=(e,r)=>{(typeof as.trace>"u"?!as.wasm.trace:!as.trace)||console.timeStamp(`${e}::ORT::${r}`)},kl=(e,r)=>{var o;let t=((o=new Error().stack)==null?void 0:o.split(/\r\n|\r|\n/g))||[],s=!1;for(let n=0;n<t.length;n++){if(s&&!t[n].includes("TRACE_FUNC")){let i=`FUNC_${e}::${t[n].trim().split(" ")[1]}`;r&&(i+=`::${r}`),Xo("CPU",i);return}t[n].includes("TRACE_FUNC")&&(s=!0)}},Ts=e=>{(typeof as.trace>"u"?!as.wasm.trace:!as.trace)||kl("BEGIN",e)},us=e=>{(typeof as.trace>"u"?!as.wasm.trace:!as.trace)||kl("END",e)}}),yM,Rv=je(()=>{iM(),MM(),bM(),yM=class vM{constructor(r){this.handler=r}async run(r,t,s){Ts();let o={},n={};if(typeof r!="object"||r===null||r instanceof vs||Array.isArray(r))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let i=!0;if(typeof t=="object"){if(t===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(t instanceof vs)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(t)){if(t.length===0)throw new TypeError("'fetches' cannot be an empty array.");i=!1;for(let u of t){if(typeof u!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(u)===-1)throw new RangeError(`'fetches' contains invalid output name: ${u}.`);o[u]=null}if(typeof s=="object"&&s!==null)n=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else{let u=!1,p=Object.getOwnPropertyNames(t);for(let c of this.outputNames)if(p.indexOf(c)!==-1){let d=t[c];(d===null||d instanceof vs)&&(u=!0,i=!1,o[c]=d)}if(u){if(typeof s=="object"&&s!==null)n=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else n=t}}else if(typeof t<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let u of this.inputNames)if(typeof r[u]>"u")throw new Error(`input '${u}' is missing in 'feeds'.`);if(i)for(let u of this.outputNames)o[u]=null;let a=await this.handler.run(r,o,n),l={};for(let u in a)if(Object.hasOwnProperty.call(a,u)){let p=a[u];p instanceof vs?l[u]=p:l[u]=new vs(p.type,p.data,p.dims)}return us(),l}async release(){return this.handler.dispose()}static async create(r,t,s,o){Ts();let n,i={};if(typeof r=="string"){if(n=r,typeof t=="object"&&t!==null)i=t;else if(typeof t<"u")throw new TypeError("'options' must be an object.")}else if(r instanceof Uint8Array){if(n=r,typeof t=="object"&&t!==null)i=t;else if(typeof t<"u")throw new TypeError("'options' must be an object.")}else if(r instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&r instanceof SharedArrayBuffer){let p=r,c=0,d=r.byteLength;if(typeof t=="object"&&t!==null)i=t;else if(typeof t=="number"){if(c=t,!Number.isSafeInteger(c))throw new RangeError("'byteOffset' must be an integer.");if(c<0||c>=p.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${p.byteLength}).`);if(d=r.byteLength-c,typeof s=="number"){if(d=s,!Number.isSafeInteger(d))throw new RangeError("'byteLength' must be an integer.");if(d<=0||c+d>p.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${p.byteLength-c}].`);if(typeof o=="object"&&o!==null)i=o;else if(typeof o<"u")throw new TypeError("'options' must be an object.")}else if(typeof s<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof t<"u")throw new TypeError("'options' must be an object.");n=new Uint8Array(p,c,d)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let[a,l]=await oM(i),u=await a.createInferenceSessionHandler(n,l);return us(),new vM(u)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}get inputMetadata(){return this.handler.inputMetadata}get outputMetadata(){return this.handler.outputMetadata}}}),qu,jv=je(()=>{Rv(),qu=yM}),Nv=je(()=>{}),Vv=je(()=>{}),Uv=je(()=>{}),Wv=je(()=>{}),xM={};ro(xM,{InferenceSession:()=>qu,TRACE:()=>Xo,TRACE_FUNC_BEGIN:()=>Ts,TRACE_FUNC_END:()=>us,Tensor:()=>vs,env:()=>Yt,registerBackend:()=>$n});var Es=je(()=>{Av(),Ov(),jv(),MM(),Nv(),Vv(),bM(),Uv(),Wv()}),Qu=je(()=>{}),TM={};ro(TM,{default:()=>EM});var Al,Fl,EM,Gv=je(()=>{var e;I0(),Fn(),Xu(),Al="ort-wasm-proxy-worker",Fl=((e=globalThis.self)==null?void 0:e.name)===Al,Fl&&(self.onmessage=r=>{let{type:t,in:s}=r.data;try{switch(t){case"init-wasm":Ju(s.wasm).then(()=>{fc(s).then(()=>{postMessage({type:t})},o=>{postMessage({type:t,err:o})})},o=>{postMessage({type:t,err:o})});break;case"init-ep":{let{epName:o,env:n}=s;_c(n,o).then(()=>{postMessage({type:t})},i=>{postMessage({type:t,err:i})});break}case"copy-from":{let{buffer:o}=s,n=ma(o);postMessage({type:t,out:n});break}case"create":{let{model:o,options:n}=s;gc(o,n).then(i=>{postMessage({type:t,out:i})},i=>{postMessage({type:t,err:i})});break}case"release":wc(s),postMessage({type:t});break;case"run":{let{sessionId:o,inputIndices:n,inputs:i,outputIndices:a,options:l}=s;Mc(o,n,i,a,new Array(a.length).fill(null),l).then(u=>{u.some(p=>p[3]!=="cpu")?postMessage({type:t,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:t,out:u},yc([...i,...u]))},u=>{postMessage({type:t,err:u})});break}case"end-profiling":bc(s),postMessage({type:t});break;default:}}catch(o){postMessage({type:t,err:o})}}),EM=Fl?null:r=>new Worker(r??Qr,{type:"module",name:Al})}),PM={};ro(PM,{default:()=>CM});var Ol,Dl,CM,Tf,Kv=je(()=>{var e,r;Dl=(Ol=import.meta.url,async function(t={}){var Gn;var s,o,n=t,i=new Promise((h,x)=>{s=h,o=x}),a=typeof window=="object",l=typeof WorkerGlobalScope<"u",u=l&&((Gn=self.name)==null?void 0:Gn.startsWith("em-pthread"));n.mountExternalData=(h,x)=>{h.startsWith("./")&&(h=h.substring(2)),(n.Eb||(n.Eb=new Map)).set(h,x)},n.unmountExternalData=()=>{delete n.Eb};var p=globalThis.SharedArrayBuffer??new WebAssembly.Memory({initial:0,maximum:0,pc:!0}).buffer.constructor;let c=h=>async(...x)=>{var k;try{if(n.Fb)throw Error("Session already started");let L=n.Fb={dc:x[0],errors:[]},N=await h(...x);if(n.Fb!==L)throw Error("Session mismatch");(k=n.Jb)==null||k.flush();let ue=L.errors;if(0<ue.length){let Te=await Promise.all(ue);if(Te=Te.filter(Le=>Le),0<Te.length)throw Error(Te.join(`
`))}return N}finally{n.Fb=null}};n.jsepInit=(h,x)=>{if(h==="webgpu"){[n.Jb,n.Ub,n.Yb,n.Kb,n.Xb,n.jb,n.Zb,n.ac,n.Vb,n.Wb,n.$b]=x;let k=n.Jb;n.jsepRegisterBuffer=(L,N,ue,Te)=>k.registerBuffer(L,N,ue,Te),n.jsepGetBuffer=L=>k.getBuffer(L),n.jsepCreateDownloader=(L,N,ue)=>k.createDownloader(L,N,ue),n.jsepOnCreateSession=L=>{k.onCreateSession(L)},n.jsepOnReleaseSession=L=>{k.onReleaseSession(L)},n.jsepOnRunStart=L=>k.onRunStart(L),n.bc=(L,N)=>{k.upload(L,N)}}else if(h==="webnn"){let k=x[0];[n.nc,n.Nb,n.webnnEnsureTensor,n.Ob,n.webnnDownloadTensor]=x.slice(1),n.webnnReleaseTensorId=n.Nb,n.webnnUploadTensor=n.Ob,n.webnnOnRunStart=L=>k.onRunStart(L),n.webnnOnRunEnd=k.onRunEnd.bind(k),n.webnnRegisterMLContext=(L,N)=>{k.registerMLContext(L,N)},n.webnnOnReleaseSession=L=>{k.onReleaseSession(L)},n.webnnCreateMLTensorDownloader=(L,N)=>k.createMLTensorDownloader(L,N),n.webnnRegisterMLTensor=(L,N,ue,Te)=>k.registerMLTensor(L,N,ue,Te),n.webnnCreateMLContext=L=>k.createMLContext(L),n.webnnRegisterMLConstant=(L,N,ue,Te,Le,Ke)=>k.registerMLConstant(L,N,ue,Te,Le,n.Eb,Ke),n.webnnRegisterGraphInput=k.registerGraphInput.bind(k),n.webnnIsGraphInput=k.isGraphInput.bind(k),n.webnnCreateTemporaryTensor=k.createTemporaryTensor.bind(k),n.webnnIsInt64Supported=k.isInt64Supported.bind(k)}};let d=()=>{let h=(x,k,L)=>(...N)=>{let ue=Zt,Te=k==null?void 0:k();N=x(...N);let Le=k==null?void 0:k();return Te!==Le&&(x=Le,L(Te),k=L=null),Zt!=ue?new Promise((Ke,et)=>{Hr={resolve:Ke,reject:et}}):N};(()=>{for(let x of["_OrtAppendExecutionProvider","_OrtCreateSession","_OrtRun","_OrtRunWithBinding","_OrtBindInput"])n[x]=h(n[x],()=>n[x],k=>n[x]=k)})(),c!==void 0&&(n._OrtRun=c(n._OrtRun),n._OrtRunWithBinding=c(n._OrtRunWithBinding)),d=void 0};n.asyncInit=()=>{d==null||d()};var _,f,T=Object.assign({},n),I=(h,x)=>{throw x},g="";(a||l)&&(l?g=self.location.href:typeof document<"u"&&document.currentScript&&(g=document.currentScript.src),Ol&&(g=Ol),g=g.startsWith("blob:")?"":g.slice(0,g.replace(/[?#].*/,"").lastIndexOf("/")+1),l&&(f=h=>{var x=new XMLHttpRequest;return x.open("GET",h,!1),x.responseType="arraybuffer",x.send(null),new Uint8Array(x.response)}),_=async h=>{if(V(h))return new Promise((k,L)=>{var N=new XMLHttpRequest;N.open("GET",h,!0),N.responseType="arraybuffer",N.onload=()=>{N.status==200||N.status==0&&N.response?k(N.response):L(N.status)},N.onerror=L,N.send(null)});var x=await fetch(h,{credentials:"same-origin"});if(x.ok)return x.arrayBuffer();throw Error(x.status+" : "+x.url)});var w=console.log.bind(console),S=console.error.bind(console),E=w,v=S;Object.assign(n,T),T=null;var M,y,C,F,z,K,q,R,Z,H,J,Q,se,fe=n.wasmBinary,ae=!1,V=h=>h.startsWith("file://");function A(){return M.buffer!=F.buffer&&re(),F}function U(){return M.buffer!=F.buffer&&re(),z}function ee(){return M.buffer!=F.buffer&&re(),K}function _e(){return M.buffer!=F.buffer&&re(),q}function le(){return M.buffer!=F.buffer&&re(),R}function ye(){return M.buffer!=F.buffer&&re(),Z}function ze(){return M.buffer!=F.buffer&&re(),H}function Ue(){return M.buffer!=F.buffer&&re(),se}if(u){let h=function(x){try{var k=x.data,L=k.Bb;if(L==="load"){let N=[];self.onmessage=ue=>N.push(ue),self.startWorker=()=>{postMessage({Bb:"loaded"});for(let ue of N)h(ue);self.onmessage=h};for(let ue of k.Rb)n[ue]&&!n[ue].proxy||(n[ue]=(...Te)=>{postMessage({Bb:"callHandler",Qb:ue,args:Te})},ue=="print"&&(E=n[ue]),ue=="printErr"&&(v=n[ue]));M=k.kc,re(),pe(k.lc)}else if(L==="run"){B(k.Ab),jn(k.Ab,0,0,1,0,0),Yr(),xe(k.Ab),W||(xo(),W=!0);try{te(k.fc,k.Hb)}catch(N){if(N!="unwind")throw N}}else k.target!=="setimmediate"&&(L==="checkMailbox"?W&&Re():L&&(v(`worker: received unknown command ${L}`),v(k)))}catch(N){throw Nn(),N}};var pe,W=!1;v=function(...x){x=x.join(" "),console.error(x)},self.alert=function(...x){postMessage({Bb:"alert",text:x.join(" "),ic:pn()})},self.onunhandledrejection=x=>{throw x.reason||x},self.onmessage=h}function re(){var h=M.buffer;n.HEAP8=F=new Int8Array(h),n.HEAP16=K=new Int16Array(h),n.HEAPU8=z=new Uint8Array(h),n.HEAPU16=q=new Uint16Array(h),n.HEAP32=R=new Int32Array(h),n.HEAPU32=Z=new Uint32Array(h),n.HEAPF32=H=new Float32Array(h),n.HEAPF64=se=new Float64Array(h),n.HEAP64=J=new BigInt64Array(h),n.HEAPU64=Q=new BigUint64Array(h)}function G(){u?startWorker(n):ct.Ca()}u||(M=new WebAssembly.Memory({initial:256,maximum:65536,shared:!0}),re());var Me,we=0,Se=null;function Pe(){if(--we==0&&Se){var h=Se;Se=null,h()}}function $e(h){throw v(h="Aborted("+h+")"),ae=!0,h=new WebAssembly.RuntimeError(h+". Build with -sASSERTIONS for more info."),o(h),h}function Fe(){return{a:{L:qe,Aa:He,b:Oe,$:yt,A:rt,pa:Bt,X:Xt,Z:Or,qa:Zr,na:cs,ga:es,ma:Ps,J:jr,Y:Cs,V:Gr,oa:ds,W:Ss,va:Is,E:it,Q:ts,O:en,D:rn,u:sn,r:nn,P:ks,z:j,R:X,ja:ie,T:Qe,aa:Ye,M:_t,F:Ot,ia:xe,sa:At,t:mr,Ba:Mr,w:br,o:dr,l:os,c:ss,n:Yo,j:Ns,v:ti,p:ri,f:si,s:ni,m:oi,e:no,k:ii,i:ai,g:oo,d:li,da:io,ea:ci,fa:lo,ba:uo,ca:cn,N:co,xa:pi,ua:mi,h:po,C:fi,G:ho,ta:hi,x:Ds,ra:_i,U:fa,q:di,y:gi,K:_a,S:wi,za:Mi,ya:bi,ka:_o,la:go,_:St,B:Bn,I:wo,ha:Mo,H:yo,a:M,wa:ke}}}var Be={829644:(h,x,k,L,N)=>{if(n===void 0||!n.Eb)return 1;if((h=lt(Number(h>>>0))).startsWith("./")&&(h=h.substring(2)),!(h=n.Eb.get(h)))return 2;if(x=Number(x>>>0),k=Number(k>>>0),L=Number(L>>>0),x+k>h.byteLength)return 3;try{let ue=h.subarray(x,x+k);switch(N){case 0:U().set(ue,L>>>0);break;case 1:n.mc?n.mc(L,ue):n.bc(L,ue);break;default:return 4}return 0}catch{return 4}},830468:(h,x,k)=>{n.Ob(h,U().subarray(x>>>0,x+k>>>0))},830532:()=>n.nc(),830574:h=>{n.Nb(h)},830611:()=>{n.Vb()},830642:()=>{n.Wb()},830671:()=>{n.$b()},830696:h=>n.Ub(h),830729:h=>n.Yb(h),830761:(h,x,k)=>{n.Kb(Number(h),Number(x),Number(k),!0)},830824:(h,x,k)=>{n.Kb(Number(h),Number(x),Number(k))},830881:()=>typeof wasmOffsetConverter<"u",830938:h=>{n.jb("Abs",h,void 0)},830989:h=>{n.jb("Neg",h,void 0)},831040:h=>{n.jb("Floor",h,void 0)},831093:h=>{n.jb("Ceil",h,void 0)},831145:h=>{n.jb("Reciprocal",h,void 0)},831203:h=>{n.jb("Sqrt",h,void 0)},831255:h=>{n.jb("Exp",h,void 0)},831306:h=>{n.jb("Erf",h,void 0)},831357:h=>{n.jb("Sigmoid",h,void 0)},831412:(h,x,k)=>{n.jb("HardSigmoid",h,{alpha:x,beta:k})},831491:h=>{n.jb("Log",h,void 0)},831542:h=>{n.jb("Sin",h,void 0)},831593:h=>{n.jb("Cos",h,void 0)},831644:h=>{n.jb("Tan",h,void 0)},831695:h=>{n.jb("Asin",h,void 0)},831747:h=>{n.jb("Acos",h,void 0)},831799:h=>{n.jb("Atan",h,void 0)},831851:h=>{n.jb("Sinh",h,void 0)},831903:h=>{n.jb("Cosh",h,void 0)},831955:h=>{n.jb("Asinh",h,void 0)},832008:h=>{n.jb("Acosh",h,void 0)},832061:h=>{n.jb("Atanh",h,void 0)},832114:h=>{n.jb("Tanh",h,void 0)},832166:h=>{n.jb("Not",h,void 0)},832217:(h,x,k)=>{n.jb("Clip",h,{min:x,max:k})},832286:h=>{n.jb("Clip",h,void 0)},832338:(h,x)=>{n.jb("Elu",h,{alpha:x})},832396:h=>{n.jb("Gelu",h,void 0)},832448:h=>{n.jb("Relu",h,void 0)},832500:(h,x)=>{n.jb("LeakyRelu",h,{alpha:x})},832564:(h,x)=>{n.jb("ThresholdedRelu",h,{alpha:x})},832634:(h,x)=>{n.jb("Cast",h,{to:x})},832692:h=>{n.jb("Add",h,void 0)},832743:h=>{n.jb("Sub",h,void 0)},832794:h=>{n.jb("Mul",h,void 0)},832845:h=>{n.jb("Div",h,void 0)},832896:h=>{n.jb("Pow",h,void 0)},832947:h=>{n.jb("Equal",h,void 0)},833e3:h=>{n.jb("Greater",h,void 0)},833055:h=>{n.jb("GreaterOrEqual",h,void 0)},833117:h=>{n.jb("Less",h,void 0)},833169:h=>{n.jb("LessOrEqual",h,void 0)},833228:(h,x,k,L,N)=>{n.jb("ReduceMean",h,{keepDims:!!x,noopWithEmptyAxes:!!k,axes:L?Array.from(le().subarray(Number(L)>>>0,Number(N)>>>0)):[]})},833403:(h,x,k,L,N)=>{n.jb("ReduceMax",h,{keepDims:!!x,noopWithEmptyAxes:!!k,axes:L?Array.from(le().subarray(Number(L)>>>0,Number(N)>>>0)):[]})},833577:(h,x,k,L,N)=>{n.jb("ReduceMin",h,{keepDims:!!x,noopWithEmptyAxes:!!k,axes:L?Array.from(le().subarray(Number(L)>>>0,Number(N)>>>0)):[]})},833751:(h,x,k,L,N)=>{n.jb("ReduceProd",h,{keepDims:!!x,noopWithEmptyAxes:!!k,axes:L?Array.from(le().subarray(Number(L)>>>0,Number(N)>>>0)):[]})},833926:(h,x,k,L,N)=>{n.jb("ReduceSum",h,{keepDims:!!x,noopWithEmptyAxes:!!k,axes:L?Array.from(le().subarray(Number(L)>>>0,Number(N)>>>0)):[]})},834100:(h,x,k,L,N)=>{n.jb("ReduceL1",h,{keepDims:!!x,noopWithEmptyAxes:!!k,axes:L?Array.from(le().subarray(Number(L)>>>0,Number(N)>>>0)):[]})},834273:(h,x,k,L,N)=>{n.jb("ReduceL2",h,{keepDims:!!x,noopWithEmptyAxes:!!k,axes:L?Array.from(le().subarray(Number(L)>>>0,Number(N)>>>0)):[]})},834446:(h,x,k,L,N)=>{n.jb("ReduceLogSum",h,{keepDims:!!x,noopWithEmptyAxes:!!k,axes:L?Array.from(le().subarray(Number(L)>>>0,Number(N)>>>0)):[]})},834623:(h,x,k,L,N)=>{n.jb("ReduceSumSquare",h,{keepDims:!!x,noopWithEmptyAxes:!!k,axes:L?Array.from(le().subarray(Number(L)>>>0,Number(N)>>>0)):[]})},834803:(h,x,k,L,N)=>{n.jb("ReduceLogSumExp",h,{keepDims:!!x,noopWithEmptyAxes:!!k,axes:L?Array.from(le().subarray(Number(L)>>>0,Number(N)>>>0)):[]})},834983:h=>{n.jb("Where",h,void 0)},835036:(h,x,k)=>{n.jb("Transpose",h,{perm:x?Array.from(le().subarray(Number(x)>>>0,Number(k)>>>0)):[]})},835160:(h,x,k,L)=>{n.jb("DepthToSpace",h,{blocksize:x,mode:lt(k),format:L?"NHWC":"NCHW"})},835293:(h,x,k,L)=>{n.jb("DepthToSpace",h,{blocksize:x,mode:lt(k),format:L?"NHWC":"NCHW"})},835426:(h,x,k,L,N,ue,Te,Le,Ke,et,bt,It,Wt,yr,Fs)=>{n.jb("ConvTranspose",h,{format:Ke?"NHWC":"NCHW",autoPad:x,dilations:[k],group:L,kernelShape:[N],pads:[ue,Te],strides:[Le],wIsConst:()=>!!A()[et>>>0],outputPadding:bt?Array.from(le().subarray(Number(bt)>>>0,Number(It)>>>0)):[],outputShape:Wt?Array.from(le().subarray(Number(Wt)>>>0,Number(yr)>>>0)):[],activation:lt(Fs)})},835859:(h,x,k,L,N,ue,Te,Le,Ke,et,bt,It,Wt,yr)=>{n.jb("ConvTranspose",h,{format:Le?"NHWC":"NCHW",autoPad:x,dilations:Array.from(le().subarray(Number(k)>>>0,2+(Number(k)>>>0)>>>0)),group:L,kernelShape:Array.from(le().subarray(Number(N)>>>0,2+(Number(N)>>>0)>>>0)),pads:Array.from(le().subarray(Number(ue)>>>0,4+(Number(ue)>>>0)>>>0)),strides:Array.from(le().subarray(Number(Te)>>>0,2+(Number(Te)>>>0)>>>0)),wIsConst:()=>!!A()[Ke>>>0],outputPadding:et?Array.from(le().subarray(Number(et)>>>0,Number(bt)>>>0)):[],outputShape:It?Array.from(le().subarray(Number(It)>>>0,Number(Wt)>>>0)):[],activation:lt(yr)})},836520:(h,x,k,L,N,ue,Te,Le,Ke,et,bt,It,Wt,yr,Fs)=>{n.jb("ConvTranspose",h,{format:Ke?"NHWC":"NCHW",autoPad:x,dilations:[k],group:L,kernelShape:[N],pads:[ue,Te],strides:[Le],wIsConst:()=>!!A()[et>>>0],outputPadding:bt?Array.from(le().subarray(Number(bt)>>>0,Number(It)>>>0)):[],outputShape:Wt?Array.from(le().subarray(Number(Wt)>>>0,Number(yr)>>>0)):[],activation:lt(Fs)})},836953:(h,x,k,L,N,ue,Te,Le,Ke,et,bt,It,Wt,yr)=>{n.jb("ConvTranspose",h,{format:Le?"NHWC":"NCHW",autoPad:x,dilations:Array.from(le().subarray(Number(k)>>>0,2+(Number(k)>>>0)>>>0)),group:L,kernelShape:Array.from(le().subarray(Number(N)>>>0,2+(Number(N)>>>0)>>>0)),pads:Array.from(le().subarray(Number(ue)>>>0,4+(Number(ue)>>>0)>>>0)),strides:Array.from(le().subarray(Number(Te)>>>0,2+(Number(Te)>>>0)>>>0)),wIsConst:()=>!!A()[Ke>>>0],outputPadding:et?Array.from(le().subarray(Number(et)>>>0,Number(bt)>>>0)):[],outputShape:It?Array.from(le().subarray(Number(It)>>>0,Number(Wt)>>>0)):[],activation:lt(yr)})},837614:(h,x)=>{n.jb("GlobalAveragePool",h,{format:x?"NHWC":"NCHW"})},837705:(h,x,k,L,N,ue,Te,Le,Ke,et,bt,It,Wt,yr)=>{n.jb("AveragePool",h,{format:yr?"NHWC":"NCHW",auto_pad:x,ceil_mode:k,count_include_pad:L,storage_order:N,dilations:ue?Array.from(le().subarray(Number(ue)>>>0,Number(Te)>>>0)):[],kernel_shape:Le?Array.from(le().subarray(Number(Le)>>>0,Number(Ke)>>>0)):[],pads:et?Array.from(le().subarray(Number(et)>>>0,Number(bt)>>>0)):[],strides:It?Array.from(le().subarray(Number(It)>>>0,Number(Wt)>>>0)):[]})},838184:(h,x)=>{n.jb("GlobalAveragePool",h,{format:x?"NHWC":"NCHW"})},838275:(h,x,k,L,N,ue,Te,Le,Ke,et,bt,It,Wt,yr)=>{n.jb("AveragePool",h,{format:yr?"NHWC":"NCHW",auto_pad:x,ceil_mode:k,count_include_pad:L,storage_order:N,dilations:ue?Array.from(le().subarray(Number(ue)>>>0,Number(Te)>>>0)):[],kernel_shape:Le?Array.from(le().subarray(Number(Le)>>>0,Number(Ke)>>>0)):[],pads:et?Array.from(le().subarray(Number(et)>>>0,Number(bt)>>>0)):[],strides:It?Array.from(le().subarray(Number(It)>>>0,Number(Wt)>>>0)):[]})},838754:(h,x)=>{n.jb("GlobalMaxPool",h,{format:x?"NHWC":"NCHW"})},838841:(h,x,k,L,N,ue,Te,Le,Ke,et,bt,It,Wt,yr)=>{n.jb("MaxPool",h,{format:yr?"NHWC":"NCHW",auto_pad:x,ceil_mode:k,count_include_pad:L,storage_order:N,dilations:ue?Array.from(le().subarray(Number(ue)>>>0,Number(Te)>>>0)):[],kernel_shape:Le?Array.from(le().subarray(Number(Le)>>>0,Number(Ke)>>>0)):[],pads:et?Array.from(le().subarray(Number(et)>>>0,Number(bt)>>>0)):[],strides:It?Array.from(le().subarray(Number(It)>>>0,Number(Wt)>>>0)):[]})},839316:(h,x)=>{n.jb("GlobalMaxPool",h,{format:x?"NHWC":"NCHW"})},839403:(h,x,k,L,N,ue,Te,Le,Ke,et,bt,It,Wt,yr)=>{n.jb("MaxPool",h,{format:yr?"NHWC":"NCHW",auto_pad:x,ceil_mode:k,count_include_pad:L,storage_order:N,dilations:ue?Array.from(le().subarray(Number(ue)>>>0,Number(Te)>>>0)):[],kernel_shape:Le?Array.from(le().subarray(Number(Le)>>>0,Number(Ke)>>>0)):[],pads:et?Array.from(le().subarray(Number(et)>>>0,Number(bt)>>>0)):[],strides:It?Array.from(le().subarray(Number(It)>>>0,Number(Wt)>>>0)):[]})},839878:(h,x,k,L,N)=>{n.jb("Gemm",h,{alpha:x,beta:k,transA:L,transB:N})},839982:h=>{n.jb("MatMul",h,void 0)},840036:(h,x,k,L)=>{n.jb("ArgMax",h,{keepDims:!!x,selectLastIndex:!!k,axis:L})},840144:(h,x,k,L)=>{n.jb("ArgMin",h,{keepDims:!!x,selectLastIndex:!!k,axis:L})},840252:(h,x)=>{n.jb("Softmax",h,{axis:x})},840315:(h,x)=>{n.jb("Concat",h,{axis:x})},840375:(h,x,k,L,N)=>{n.jb("Split",h,{axis:x,numOutputs:k,splitSizes:L?Array.from(le().subarray(Number(L)>>>0,Number(N)>>>0)):[]})},840531:h=>{n.jb("Expand",h,void 0)},840585:(h,x)=>{n.jb("Gather",h,{axis:Number(x)})},840656:(h,x)=>{n.jb("GatherElements",h,{axis:Number(x)})},840735:(h,x)=>{n.jb("GatherND",h,{batch_dims:Number(x)})},840814:(h,x,k,L,N,ue,Te,Le,Ke,et,bt)=>{n.jb("Resize",h,{antialias:x,axes:k?Array.from(le().subarray(Number(k)>>>0,Number(L)>>>0)):[],coordinateTransformMode:lt(N),cubicCoeffA:ue,excludeOutside:Te,extrapolationValue:Le,keepAspectRatioPolicy:lt(Ke),mode:lt(et),nearestMode:lt(bt)})},841176:(h,x,k,L,N,ue,Te)=>{n.jb("Slice",h,{starts:x?Array.from(le().subarray(Number(x)>>>0,Number(k)>>>0)):[],ends:L?Array.from(le().subarray(Number(L)>>>0,Number(N)>>>0)):[],axes:ue?Array.from(le().subarray(Number(ue)>>>0,Number(Te)>>>0)):[]})},841440:h=>{n.jb("Tile",h,void 0)},841492:(h,x,k)=>{n.jb("InstanceNormalization",h,{epsilon:x,format:k?"NHWC":"NCHW"})},841606:(h,x,k)=>{n.jb("InstanceNormalization",h,{epsilon:x,format:k?"NHWC":"NCHW"})},841720:h=>{n.jb("Range",h,void 0)},841773:(h,x)=>{n.jb("Einsum",h,{equation:lt(x)})},841854:(h,x,k,L,N)=>{n.jb("Pad",h,{mode:x,value:k,pads:L?Array.from(le().subarray(Number(L)>>>0,Number(N)>>>0)):[]})},841997:(h,x,k,L,N,ue)=>{n.jb("BatchNormalization",h,{epsilon:x,momentum:k,spatial:!!N,trainingMode:!!L,format:ue?"NHWC":"NCHW"})},842166:(h,x,k,L,N,ue)=>{n.jb("BatchNormalization",h,{epsilon:x,momentum:k,spatial:!!N,trainingMode:!!L,format:ue?"NHWC":"NCHW"})},842335:(h,x,k)=>{n.jb("CumSum",h,{exclusive:Number(x),reverse:Number(k)})},842432:(h,x,k)=>{n.jb("DequantizeLinear",h,{axis:x,blockSize:k})},842522:(h,x,k,L,N)=>{n.jb("GridSample",h,{align_corners:x,mode:lt(k),padding_mode:lt(L),format:N?"NHWC":"NCHW"})},842692:(h,x,k,L,N)=>{n.jb("GridSample",h,{align_corners:x,mode:lt(k),padding_mode:lt(L),format:N?"NHWC":"NCHW"})},842862:(h,x)=>{n.jb("ScatterND",h,{reduction:lt(x)})},842947:(h,x,k,L,N,ue,Te,Le,Ke)=>{n.jb("Attention",h,{numHeads:x,isUnidirectional:k,maskFilterValue:L,scale:N,doRotary:ue,qkvHiddenSizes:Te?Array.from(le().subarray(Number(Le)>>>0,Number(Le)+Te>>>0)):[],pastPresentShareBuffer:!!Ke})},843219:h=>{n.jb("BiasAdd",h,void 0)},843274:h=>{n.jb("BiasSplitGelu",h,void 0)},843335:h=>{n.jb("FastGelu",h,void 0)},843391:(h,x,k,L,N,ue,Te,Le,Ke,et,bt,It,Wt,yr,Fs,vi)=>{n.jb("Conv",h,{format:It?"NHWC":"NCHW",auto_pad:x,dilations:k?Array.from(le().subarray(Number(k)>>>0,Number(L)>>>0)):[],group:N,kernel_shape:ue?Array.from(le().subarray(Number(ue)>>>0,Number(Te)>>>0)):[],pads:Le?Array.from(le().subarray(Number(Le)>>>0,Number(Ke)>>>0)):[],strides:et?Array.from(le().subarray(Number(et)>>>0,Number(bt)>>>0)):[],w_is_const:()=>!!A()[Number(Wt)>>>0],activation:lt(yr),activation_params:Fs?Array.from(ze().subarray(Number(Fs)>>>0,Number(vi)>>>0)):[]})},843975:h=>{n.jb("Gelu",h,void 0)},844027:(h,x,k,L,N,ue,Te,Le,Ke)=>{n.jb("GroupQueryAttention",h,{numHeads:x,kvNumHeads:k,scale:L,softcap:N,doRotary:ue,rotaryInterleaved:Te,smoothSoftmax:Le,localWindowSize:Ke})},844244:(h,x,k,L)=>{n.jb("LayerNormalization",h,{axis:x,epsilon:k,simplified:!!L})},844355:(h,x,k,L)=>{n.jb("LayerNormalization",h,{axis:x,epsilon:k,simplified:!!L})},844466:(h,x,k,L,N,ue)=>{n.jb("MatMulNBits",h,{k:x,n:k,accuracyLevel:L,bits:N,blockSize:ue})},844593:(h,x,k,L,N,ue)=>{n.jb("MultiHeadAttention",h,{numHeads:x,isUnidirectional:k,maskFilterValue:L,scale:N,doRotary:ue})},844752:(h,x)=>{n.jb("QuickGelu",h,{alpha:x})},844816:(h,x,k,L,N)=>{n.jb("RotaryEmbedding",h,{interleaved:!!x,numHeads:k,rotaryEmbeddingDim:L,scale:N})},844955:(h,x,k)=>{n.jb("SkipLayerNormalization",h,{epsilon:x,simplified:!!k})},845057:(h,x,k)=>{n.jb("SkipLayerNormalization",h,{epsilon:x,simplified:!!k})},845159:(h,x,k,L)=>{n.jb("GatherBlockQuantized",h,{gatherAxis:x,quantizeAxis:k,blockSize:L})},845280:h=>{n.Zb(h)},845314:(h,x)=>n.ac(Number(h),Number(x),n.Fb.dc,n.Fb.errors)};function He(h,x,k){return Lr(async()=>{await n.Xb(Number(h),Number(x),Number(k))})}function qe(){return typeof wasmOffsetConverter<"u"}class Ie{constructor(x){Y(this,"name","ExitStatus");this.message=`Program terminated with exit(${x})`,this.status=x}}var Ve=h=>{h.terminate(),h.onmessage=()=>{}},Ze=[],st=h=>{Vt.length==0&&(oe(),D(Vt[0]));var x=Vt.pop();if(!x)return 6;zt.push(x),or[h.Ab]=x,x.Ab=h.Ab;var k={Bb:"run",fc:h.ec,Hb:h.Hb,Ab:h.Ab};return x.postMessage(k,h.Mb),0},at=0,Ge=(h,x,...k)=>{for(var L=2*k.length,N=_n(),ue=Un(8*L),Te=ue>>>3,Le=0;Le<k.length;Le++){var Ke=k[Le];typeof Ke=="bigint"?(J[Te+2*Le]=1n,J[Te+2*Le+1]=Ke):(J[Te+2*Le]=0n,Ue()[Te+2*Le+1>>>0]=Ke)}return h=To(h,0,L,ue,x),fn(N),h};function ke(h){if(u)return Ge(0,1,h);if(C=h,!(0<at)){for(var x of zt)Ve(x);for(x of Vt)Ve(x);Vt=[],zt=[],or={},ae=!0}I(0,new Ie(h))}function pt(h){if(u)return Ge(1,0,h);St(h)}var St=h=>{if(C=h,u)throw pt(h),"unwind";ke(h)},Vt=[],zt=[],gr=[],or={},Mt=h=>{var x=h.Ab;delete or[x],Vt.push(h),zt.splice(zt.indexOf(h),1),h.Ab=0,Eo(x)};function Yr(){gr.forEach(h=>h())}var D=h=>new Promise(x=>{h.onmessage=N=>{var ue=(N=N.data).Bb;if(N.Gb&&N.Gb!=pn()){var Te=or[N.Gb];Te?Te.postMessage(N,N.Mb):v(`Internal error! Worker sent a message "${ue}" to target pthread ${N.Gb}, but that thread no longer exists!`)}else ue==="checkMailbox"?Re():ue==="spawnThread"?st(N):ue==="cleanupThread"?Mt(or[N.hc]):ue==="loaded"?(h.loaded=!0,x(h)):ue==="alert"?alert(`Thread ${N.ic}: ${N.text}`):N.target==="setimmediate"?h.postMessage(N):ue==="callHandler"?n[N.Qb](...N.args):ue&&v(`worker sent an unknown command ${ue}`)},h.onerror=N=>{throw v(`worker sent an error! ${N.filename}:${N.lineno}: ${N.message}`),N};var k,L=[];for(k of[])n.propertyIsEnumerable(k)&&L.push(k);h.postMessage({Bb:"load",Rb:L,kc:M,lc:y})});function oe(){var h=new Worker((()=>{let x=URL;return import.meta.url>"file:"&&import.meta.url<"file;"?new x("ort.bundle.min.mjs",import.meta.url):new URL(import.meta.url)})(),{type:"module",workerData:"em-pthread",name:"em-pthread"});Vt.push(h)}var B=h=>{re();var x=ye()[h+52>>>2>>>0];h=ye()[h+56>>>2>>>0],Vn(x,x-h),fn(x)},te=(h,x)=>{at=0,h=So(h,x),0<at?C=h:mn(h)};class me{constructor(x){this.Ib=x-24}}function Oe(h,x,k){var L=new me(h>>>=0);throw x>>>=0,k>>>=0,ye()[L.Ib+16>>>2>>>0]=0,ye()[L.Ib+4>>>2>>>0]=x,ye()[L.Ib+8>>>2>>>0]=k,h}function ve(h,x,k,L){return u?Ge(2,1,h,x,k,L):yt(h,x,k,L)}function yt(h,x,k,L){if(h>>>=0,k>>>=0,L>>>=0,p===void 0)return 6;var N=[];return u&&N.length===0?ve(h,x>>>=0,k,L):(h={ec:k,Ab:h,Hb:L,Mb:N},u?(h.Bb="spawnThread",postMessage(h,N),0):st(h))}var Ft=typeof TextDecoder<"u"?new TextDecoder:void 0,ht=(h,x=0,k=NaN)=>{var L=(x>>>=0)+k;for(k=x;h[k]&&!(k>=L);)++k;if(16<k-x&&h.buffer&&Ft)return Ft.decode(h.buffer instanceof ArrayBuffer?h.subarray(x,k):h.slice(x,k));for(L="";x<k;){var N=h[x++];if(128&N){var ue=63&h[x++];if((224&N)==192)L+=String.fromCharCode((31&N)<<6|ue);else{var Te=63&h[x++];65536>(N=(240&N)==224?(15&N)<<12|ue<<6|Te:(7&N)<<18|ue<<12|Te<<6|63&h[x++])?L+=String.fromCharCode(N):(N-=65536,L+=String.fromCharCode(55296|N>>10,56320|1023&N))}}else L+=String.fromCharCode(N)}return L},lt=(h,x)=>(h>>>=0)?ht(U(),h,x):"";function rt(h,x,k){return u?Ge(3,1,h,x,k):0}function Bt(h,x){if(u)return Ge(4,1,h,x)}var Ht=h=>{for(var x=0,k=0;k<h.length;++k){var L=h.charCodeAt(k);127>=L?x++:2047>=L?x+=2:55296<=L&&57343>=L?(x+=4,++k):x+=3}return x},wr=(h,x,k)=>{var L=U();if(x>>>=0,0<k){var N=x;k=x+k-1;for(var ue=0;ue<h.length;++ue){var Te=h.charCodeAt(ue);if(55296<=Te&&57343>=Te&&(Te=65536+((1023&Te)<<10)|1023&h.charCodeAt(++ue)),127>=Te){if(x>=k)break;L[x++>>>0]=Te}else{if(2047>=Te){if(x+1>=k)break;L[x++>>>0]=192|Te>>6}else{if(65535>=Te){if(x+2>=k)break;L[x++>>>0]=224|Te>>12}else{if(x+3>=k)break;L[x++>>>0]=240|Te>>18,L[x++>>>0]=128|Te>>12&63}L[x++>>>0]=128|Te>>6&63}L[x++>>>0]=128|63&Te}}L[x>>>0]=0,h=x-N}else h=0;return h};function Xt(h,x){if(u)return Ge(5,1,h,x)}function Or(h,x,k){if(u)return Ge(6,1,h,x,k)}function Zr(h,x,k){return u?Ge(7,1,h,x,k):0}function cs(h,x){if(u)return Ge(8,1,h,x)}function es(h,x,k){if(u)return Ge(9,1,h,x,k)}function Ps(h,x,k,L){if(u)return Ge(10,1,h,x,k,L)}function jr(h,x,k,L){if(u)return Ge(11,1,h,x,k,L)}function Cs(h,x,k,L){if(u)return Ge(12,1,h,x,k,L)}function Gr(h){if(u)return Ge(13,1,h)}function ds(h,x){if(u)return Ge(14,1,h,x)}function Ss(h,x,k){if(u)return Ge(15,1,h,x,k)}var $s,ir,Is=()=>$e(""),Tr=h=>{for(var x="";U()[h>>>0];)x+=$s[U()[h++>>>0]];return x},ps={},zr={};function Ae(h,x,k={}){return function(L,N,ue={}){var Te=N.name;if(!L)throw new ir(`type "${Te}" must have a positive integer typeid pointer`);if(zr.hasOwnProperty(L)){if(ue.Sb)return;throw new ir(`Cannot register type '${Te}' twice`)}zr[L]=N,ps.hasOwnProperty(L)&&(N=ps[L],delete ps[L],N.forEach(Le=>Le()))}(h,x,k)}var Je=(h,x,k)=>{switch(x){case 1:return k?L=>A()[L>>>0]:L=>U()[L>>>0];case 2:return k?L=>ee()[L>>>1>>>0]:L=>_e()[L>>>1>>>0];case 4:return k?L=>le()[L>>>2>>>0]:L=>ye()[L>>>2>>>0];case 8:return k?L=>J[L>>>3]:L=>Q[L>>>3];default:throw new TypeError(`invalid integer width (${x}): ${h}`)}};function it(h,x,k){k>>>=0,Ae(h>>>=0,{name:x=Tr(x>>>0),fromWireType:L=>L,toWireType:function(L,N){if(typeof N!="bigint"&&typeof N!="number")throw N=N===null?"null":(L=typeof N)=="object"||L==="array"||L==="function"?N.toString():""+N,new TypeError(`Cannot convert "${N}" to ${this.name}`);return typeof N=="number"&&(N=BigInt(N)),N},Cb:Rt,readValueFromPointer:Je(x,k,x.indexOf("u")==-1),Db:null})}var Rt=8;function ts(h,x,k,L){Ae(h>>>=0,{name:x=Tr(x>>>0),fromWireType:function(N){return!!N},toWireType:function(N,ue){return ue?k:L},Cb:Rt,readValueFromPointer:function(N){return this.fromWireType(U()[N>>>0])},Db:null})}var rs=[],ur=[];function ss(h){9<(h>>>=0)&&--ur[h+1]==0&&(ur[h]=void 0,rs.push(h))}var cr=h=>{if(!h)throw new ir("Cannot use deleted val. handle = "+h);return ur[h]},hr=h=>{switch(h){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:let x=rs.pop()||ur.length;return ur[x]=h,ur[x+1]=1,x}};function ns(h){return this.fromWireType(ye()[h>>>2>>>0])}var hs={name:"emscripten::val",fromWireType:h=>{var x=cr(h);return ss(h),x},toWireType:(h,x)=>hr(x),Cb:Rt,readValueFromPointer:ns,Db:null};function en(h){return Ae(h>>>0,hs)}var tn=(h,x)=>{switch(x){case 4:return function(k){return this.fromWireType(ze()[k>>>2>>>0])};case 8:return function(k){return this.fromWireType(Ue()[k>>>3>>>0])};default:throw new TypeError(`invalid float width (${x}): ${h}`)}};function rn(h,x,k){k>>>=0,Ae(h>>>=0,{name:x=Tr(x>>>0),fromWireType:L=>L,toWireType:(L,N)=>N,Cb:Rt,readValueFromPointer:tn(x,k),Db:null})}function sn(h,x,k,L,N){if(h>>>=0,k>>>=0,x=Tr(x>>>0),N===-1&&(N=4294967295),N=Le=>Le,L===0){var ue=32-8*k;N=Le=>Le<<ue>>>ue}var Te=x.includes("unsigned")?function(Le,Ke){return Ke>>>0}:function(Le,Ke){return Ke};Ae(h,{name:x,fromWireType:N,toWireType:Te,Cb:Rt,readValueFromPointer:Je(x,k,L!==0),Db:null})}function nn(h,x,k){function L(ue){var Te=ye()[ue>>>2>>>0];return ue=ye()[ue+4>>>2>>>0],new N(A().buffer,ue,Te)}var N=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][x];Ae(h>>>=0,{name:k=Tr(k>>>0),fromWireType:L,Cb:Rt,readValueFromPointer:L},{Sb:!0})}function ks(h,x){Ae(h>>>=0,{name:x=Tr(x>>>0),fromWireType:function(k){for(var L,N=ye()[k>>>2>>>0],ue=k+4,Te=ue,Le=0;Le<=N;++Le){var Ke=ue+Le;Le!=N&&U()[Ke>>>0]!=0||(Te=lt(Te,Ke-Te),L===void 0?L=Te:(L+="\0",L+=Te),Te=Ke+1)}return Ur(k),L},toWireType:function(k,L){L instanceof ArrayBuffer&&(L=new Uint8Array(L));var N=typeof L=="string";if(!(N||L instanceof Uint8Array||L instanceof Uint8ClampedArray||L instanceof Int8Array))throw new ir("Cannot pass non-string to std::string");var ue=N?Ht(L):L.length,Te=hn(4+ue+1),Le=Te+4;if(ye()[Te>>>2>>>0]=ue,N)wr(L,Le,ue+1);else if(N)for(N=0;N<ue;++N){var Ke=L.charCodeAt(N);if(255<Ke)throw Ur(Te),new ir("String has UTF-16 code units that do not fit in 8 bits");U()[Le+N>>>0]=Ke}else for(N=0;N<ue;++N)U()[Le+N>>>0]=L[N];return k!==null&&k.push(Ur,Te),Te},Cb:Rt,readValueFromPointer:ns,Db(k){Ur(k)}})}var js=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,on=(h,x)=>{for(var k=h>>1,L=k+x/2;!(k>=L)&&_e()[k>>>0];)++k;if(32<(k<<=1)-h&&js)return js.decode(U().slice(h,k));for(k="",L=0;!(L>=x/2);++L){var N=ee()[h+2*L>>>1>>>0];if(N==0)break;k+=String.fromCharCode(N)}return k},an=(h,x,k)=>{if(k??(k=2147483647),2>k)return 0;var L=x;k=(k-=2)<2*h.length?k/2:h.length;for(var N=0;N<k;++N){var ue=h.charCodeAt(N);ee()[x>>>1>>>0]=ue,x+=2}return ee()[x>>>1>>>0]=0,x-L},ln=h=>2*h.length,As=(h,x)=>{for(var k=0,L="";!(k>=x/4);){var N=le()[h+4*k>>>2>>>0];if(N==0)break;++k,65536<=N?(N-=65536,L+=String.fromCharCode(55296|N>>10,56320|1023&N)):L+=String.fromCharCode(N)}return L},de=(h,x,k)=>{if(x>>>=0,k??(k=2147483647),4>k)return 0;var L=x;k=L+k-4;for(var N=0;N<h.length;++N){var ue=h.charCodeAt(N);if(55296<=ue&&57343>=ue&&(ue=65536+((1023&ue)<<10)|1023&h.charCodeAt(++N)),le()[x>>>2>>>0]=ue,(x+=4)+4>k)break}return le()[x>>>2>>>0]=0,x-L},$=h=>{for(var x=0,k=0;k<h.length;++k){var L=h.charCodeAt(k);55296<=L&&57343>=L&&++k,x+=4}return x};function j(h,x,k){if(h>>>=0,x>>>=0,k=Tr(k>>>=0),x===2)var L=on,N=an,ue=ln,Te=Le=>_e()[Le>>>1>>>0];else x===4&&(L=As,N=de,ue=$,Te=Le=>ye()[Le>>>2>>>0]);Ae(h,{name:k,fromWireType:Le=>{for(var Ke,et=ye()[Le>>>2>>>0],bt=Le+4,It=0;It<=et;++It){var Wt=Le+4+It*x;It!=et&&Te(Wt)!=0||(bt=L(bt,Wt-bt),Ke===void 0?Ke=bt:(Ke+="\0",Ke+=bt),bt=Wt+x)}return Ur(Le),Ke},toWireType:(Le,Ke)=>{if(typeof Ke!="string")throw new ir(`Cannot pass non-string to C++ string type ${k}`);var et=ue(Ke),bt=hn(4+et+x);return ye()[bt>>>2>>>0]=et/x,N(Ke,bt+4,et+x),Le!==null&&Le.push(Ur,bt),bt},Cb:Rt,readValueFromPointer:ns,Db(Le){Ur(Le)}})}function X(h,x){Ae(h>>>=0,{Tb:!0,name:x=Tr(x>>>0),Cb:0,fromWireType:()=>{},toWireType:()=>{}})}function ie(h){jn(h>>>0,!l,1,!a,131072,!1),Yr()}var ce=h=>{if(!ae)try{if(h(),!(0<at))try{u?mn(C):St(C)}catch(x){x instanceof Ie||x=="unwind"||I(0,x)}}catch(x){x instanceof Ie||x=="unwind"||I(0,x)}};function xe(h){h>>>=0,typeof Atomics.jc=="function"&&(Atomics.jc(le(),h>>>2,h).value.then(Re),h+=128,Atomics.store(le(),h>>>2,1))}var Re=()=>{var h=pn();h&&(xe(h),ce(Co))};function Qe(h,x){(h>>>=0)==x>>>0?setTimeout(Re):u?postMessage({Gb:h,Bb:"checkMailbox"}):(h=or[h])&&h.postMessage({Bb:"checkMailbox"})}var We=[];function Ye(h,x,k,L,N){for(x>>>=0,L/=2,We.length=L,k=N>>>0>>>3,N=0;N<L;N++)We[N]=J[k+2*N]?J[k+2*N+1]:Ue()[k+2*N+1>>>0];return(x?Be[x]:yi[h])(...We)}var _t=()=>{at=0};function Ot(h){h>>>=0,u?postMessage({Bb:"cleanupThread",hc:h}):Mt(or[h])}function At(h){}var Jt=(h,x)=>{var k=zr[h];if(k===void 0)throw h=Rn(h),k=Tr(h),Ur(h),new ir(`${x} has unknown type ${k}`);return k},Ut=(h,x,k)=>{var L=[];return h=h.toWireType(L,k),L.length&&(ye()[x>>>2>>>0]=hr(L)),h};function mr(h,x,k){return x>>>=0,k>>>=0,h=cr(h>>>0),x=Jt(x,"emval::as"),Ut(x,k,h)}function Mr(h,x){return x>>>=0,h=cr(h>>>0),(x=Jt(x,"emval::as")).toWireType(null,h)}var Er=h=>{try{h()}catch(x){$e(x)}},Pr=0,Zt=null,ms=0,Kt=[],fr={},Dr={},Kr=0,Hr=null,Ir=[];function Lr(h){return function(x){if(!ae){if(Pr===0){var k=!1,L=!1;x((N=0)=>{if(!ae&&(ms=N,k=!0,L)){Pr=2,Er(()=>Io(Zt)),typeof MainLoop<"u"&&MainLoop.Pb&&MainLoop.resume(),N=!1;try{var ue=function(){var Ke=le()[Zt+8>>>2>>>0];return Ke=ct[Dr[Ke]],--at,Ke()}()}catch(Ke){ue=Ke,N=!0}var Te=!1;if(!Zt){var Le=Hr;Le&&(Hr=null,(N?Le.reject:Le.resolve)(ue),Te=!0)}if(N&&!Te)throw ue}}),L=!0,k||(Pr=1,Zt=function(){var N=hn(65548),ue=N+12;ye()[N>>>2>>>0]=ue,ye()[N+4>>>2>>>0]=ue+65536,ue=Kt[0];var Te=fr[ue];return Te===void 0&&(Te=Kr++,fr[ue]=Te,Dr[Te]=ue),ue=Te,le()[N+8>>>2>>>0]=ue,N}(),typeof MainLoop<"u"&&MainLoop.Pb&&MainLoop.pause(),Er(()=>$o(Zt)))}else Pr===2?(Pr=0,Er(ko),Ur(Zt),Zt=null,Ir.forEach(ce)):$e(`invalid state: ${Pr}`);return ms}}(x=>{h().then(x)})}function br(h){return h>>>=0,Lr(async()=>{var x=await cr(h);return hr(x)})}var er=[];function dr(h,x,k,L){return k>>>=0,L>>>=0,(h=er[h>>>0])(null,x=cr(x>>>0),k,L)}var pr={},kr=h=>{var x=pr[h];return x===void 0?Tr(h):x};function os(h,x,k,L,N){return k>>>=0,L>>>=0,N>>>=0,(h=er[h>>>0])(x=cr(x>>>0),x[k=kr(k)],L,N)}var un=()=>typeof globalThis=="object"?globalThis:Function("return this")();function Yo(h){return(h>>>=0)==0?hr(un()):(h=kr(h),hr(un()[h]))}var Zo=h=>{var x=er.length;return er.push(h),x},ei=(h,x)=>{for(var k=Array(h),L=0;L<h;++L)k[L]=Jt(ye()[x+4*L>>>2>>>0],"parameter "+L);return k},so=(h,x)=>Object.defineProperty(x,"name",{value:h});function Ns(h,x,k){var L=(x=ei(h,x>>>0)).shift();h--;var N=`return function (obj, func, destructorsRef, args) {
`,ue=0,Te=[];k===0&&Te.push("obj");for(var Le=["retType"],Ke=[L],et=0;et<h;++et)Te.push("arg"+et),Le.push("argType"+et),Ke.push(x[et]),N+=`  var arg${et} = argType${et}.readValueFromPointer(args${ue?"+"+ue:""});
`,ue+=x[et].Cb;return N+=`  var rv = ${k===1?"new func":"func.call"}(${Te.join(", ")});
`,L.Tb||(Le.push("emval_returnValue"),Ke.push(Ut),N+=`  return emval_returnValue(retType, destructorsRef, rv);
`),Le.push(N+`};
`),h=function(bt){var It=Function;if(!(It instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof It} which is not a function`);var Wt=so(It.name||"unknownFunctionName",function(){});return Wt.prototype=It.prototype,Wt=new Wt,(bt=It.apply(Wt,bt))instanceof Object?bt:Wt}(Le)(...Ke),k=`methodCaller<(${x.map(bt=>bt.name).join(", ")}) => ${L.name}>`,Zo(so(k,h))}function ti(h){return h=kr(h>>>0),hr(n[h])}function ri(h,x){return x>>>=0,h=cr(h>>>0),x=cr(x),hr(h[x])}function si(h){9<(h>>>=0)&&(ur[h+1]+=1)}function ni(){return hr([])}function oi(h){h=cr(h>>>0);for(var x=Array(h.length),k=0;k<h.length;k++)x[k]=h[k];return hr(x)}function no(h){return hr(kr(h>>>0))}function ii(){return hr({})}function ai(h){for(var x=cr(h>>>=0);x.length;){var k=x.pop();x.pop()(k)}ss(h)}function oo(h,x,k){x>>>=0,k>>>=0,h=cr(h>>>0),x=cr(x),k=cr(k),h[x]=k}function li(h,x){return x>>>=0,h=(h=Jt(h>>>0,"_emval_take_value")).readValueFromPointer(x),hr(h)}function io(h,x){h=-9007199254740992>h||9007199254740992<h?NaN:Number(h),x>>>=0,h=new Date(1e3*h),le()[x>>>2>>>0]=h.getUTCSeconds(),le()[x+4>>>2>>>0]=h.getUTCMinutes(),le()[x+8>>>2>>>0]=h.getUTCHours(),le()[x+12>>>2>>>0]=h.getUTCDate(),le()[x+16>>>2>>>0]=h.getUTCMonth(),le()[x+20>>>2>>>0]=h.getUTCFullYear()-1900,le()[x+24>>>2>>>0]=h.getUTCDay(),h=(h.getTime()-Date.UTC(h.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,le()[x+28>>>2>>>0]=h}var ao=h=>h%4==0&&(h%100!=0||h%400==0),Dn=[0,31,60,91,121,152,182,213,244,274,305,335],ui=[0,31,59,90,120,151,181,212,243,273,304,334];function ci(h,x){h=-9007199254740992>h||9007199254740992<h?NaN:Number(h),x>>>=0,h=new Date(1e3*h),le()[x>>>2>>>0]=h.getSeconds(),le()[x+4>>>2>>>0]=h.getMinutes(),le()[x+8>>>2>>>0]=h.getHours(),le()[x+12>>>2>>>0]=h.getDate(),le()[x+16>>>2>>>0]=h.getMonth(),le()[x+20>>>2>>>0]=h.getFullYear()-1900,le()[x+24>>>2>>>0]=h.getDay();var k=(ao(h.getFullYear())?Dn:ui)[h.getMonth()]+h.getDate()-1|0;le()[x+28>>>2>>>0]=k,le()[x+36>>>2>>>0]=-60*h.getTimezoneOffset(),k=new Date(h.getFullYear(),6,1).getTimezoneOffset();var L=new Date(h.getFullYear(),0,1).getTimezoneOffset();h=0|(k!=L&&h.getTimezoneOffset()==Math.min(L,k)),le()[x+32>>>2>>>0]=h}function lo(h){h>>>=0;var x=new Date(le()[h+20>>>2>>>0]+1900,le()[h+16>>>2>>>0],le()[h+12>>>2>>>0],le()[h+8>>>2>>>0],le()[h+4>>>2>>>0],le()[h>>>2>>>0],0),k=le()[h+32>>>2>>>0],L=x.getTimezoneOffset(),N=new Date(x.getFullYear(),6,1).getTimezoneOffset(),ue=new Date(x.getFullYear(),0,1).getTimezoneOffset(),Te=Math.min(ue,N);return 0>k?le()[h+32>>>2>>>0]=+(N!=ue&&Te==L):0<k!=(Te==L)&&(N=Math.max(ue,N),x.setTime(x.getTime()+6e4*((0<k?Te:N)-L))),le()[h+24>>>2>>>0]=x.getDay(),k=(ao(x.getFullYear())?Dn:ui)[x.getMonth()]+x.getDate()-1|0,le()[h+28>>>2>>>0]=k,le()[h>>>2>>>0]=x.getSeconds(),le()[h+4>>>2>>>0]=x.getMinutes(),le()[h+8>>>2>>>0]=x.getHours(),le()[h+12>>>2>>>0]=x.getDate(),le()[h+16>>>2>>>0]=x.getMonth(),le()[h+20>>>2>>>0]=x.getYear(),h=x.getTime(),BigInt(isNaN(h)?-1:h/1e3)}function uo(h,x,k,L,N,ue,Te){return u?Ge(16,1,h,x,k,L,N,ue,Te):-52}function cn(h,x,k,L,N,ue){if(u)return Ge(17,1,h,x,k,L,N,ue)}var Vs={},di=()=>performance.timeOrigin+performance.now();function co(h,x){if(u)return Ge(18,1,h,x);if(Vs[h]&&(clearTimeout(Vs[h].id),delete Vs[h]),!x)return 0;var k=setTimeout(()=>{delete Vs[h],ce(()=>Po(h,performance.timeOrigin+performance.now()))},x);return Vs[h]={id:k,qc:x},0}function pi(h,x,k,L){h>>>=0,x>>>=0,k>>>=0,L>>>=0;var N=new Date().getFullYear(),ue=new Date(N,0,1).getTimezoneOffset();N=new Date(N,6,1).getTimezoneOffset();var Te=Math.max(ue,N);ye()[h>>>2>>>0]=60*Te,le()[x>>>2>>>0]=+(ue!=N),h=(x=Le=>{var Ke=Math.abs(Le);return`UTC${0<=Le?"-":"+"}${String(Math.floor(Ke/60)).padStart(2,"0")}${String(Ke%60).padStart(2,"0")}`})(ue),x=x(N),N<ue?(wr(h,k,17),wr(x,L,17)):(wr(h,L,17),wr(x,k,17))}var hi=()=>Date.now();function mi(h,x,k){return 0<=h&&3>=h?(h===0?h=Date.now():h=performance.timeOrigin+performance.now(),J[k>>>0>>>3]=BigInt(Math.round(1e6*h)),0):28}var Ln=[],dn=(h,x)=>{Ln.length=0;for(var k;k=U()[h++>>>0];){var L=k!=105;x+=(L&=k!=112)&&x%8?4:0,Ln.push(k==112?ye()[x>>>2>>>0]:k==106?J[x>>>3]:k==105?le()[x>>>2>>>0]:Ue()[x>>>3>>>0]),x+=L?8:4}return Ln};function po(h,x,k){return h>>>=0,x=dn(x>>>0,k>>>0),Be[h](...x)}function fi(h,x,k){return h>>>=0,x=dn(x>>>0,k>>>0),Be[h](...x)}var ho=()=>{};function Ds(h,x){return v(lt(h>>>0,x>>>0))}var _i=()=>{throw at+=1,"unwind"};function fa(){return 4294901760}var gi=()=>navigator.hardwareConcurrency;function _a(){return $e("Cannot use emscripten_pc_get_function without -sUSE_OFFSET_CONVERTER"),0}function wi(h){h>>>=0;var x=U().length;if(h<=x||4294901760<h)return!1;for(var k=1;4>=k;k*=2){var L=x*(1+.2/k);L=Math.min(L,h+100663296);e:{L=(Math.min(4294901760,65536*Math.ceil(Math.max(h,L)/65536))-M.buffer.byteLength+65535)/65536|0;try{M.grow(L),re();var N=1;break e}catch{}N=void 0}if(N)return!0}return!1}var Us=()=>($e("Cannot use convertFrameToPC (needed by __builtin_return_address) without -sUSE_OFFSET_CONVERTER"),0),Ws={},mo=h=>{h.forEach(x=>{Us()})};function Mi(){var h=Error().stack.toString().split(`
`);return h[0]=="Error"&&h.shift(),mo(h),Ws.Lb=Us(),Ws.cc=h,Ws.Lb}function bi(h,x,k){if(h>>>=0,x>>>=0,Ws.Lb==h)var L=Ws.cc;else(L=Error().stack.toString().split(`
`))[0]=="Error"&&L.shift(),mo(L);for(var N=3;L[N]&&Us()!=h;)++N;for(h=0;h<k&&L[h+N];++h)le()[x+4*h>>>2>>>0]=Us();return h}var zn,Gs={},fo=()=>{if(!zn){var h,x={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:"./this.program"};for(h in Gs)Gs[h]===void 0?delete x[h]:x[h]=Gs[h];var k=[];for(h in x)k.push(`${h}=${x[h]}`);zn=k}return zn};function _o(h,x){if(u)return Ge(19,1,h,x);h>>>=0,x>>>=0;var k=0;return fo().forEach((L,N)=>{var ue=x+k;for(N=ye()[h+4*N>>>2>>>0]=ue,ue=0;ue<L.length;++ue)A()[N++>>>0]=L.charCodeAt(ue);A()[N>>>0]=0,k+=L.length+1}),0}function go(h,x){if(u)return Ge(20,1,h,x);h>>>=0,x>>>=0;var k=fo();ye()[h>>>2>>>0]=k.length;var L=0;return k.forEach(N=>L+=N.length+1),ye()[x>>>2>>>0]=L,0}function Bn(h){return u?Ge(21,1,h):52}function wo(h,x,k,L){return u?Ge(22,1,h,x,k,L):52}function Mo(h,x,k,L){return u?Ge(23,1,h,x,k,L):70}var bo=[null,[],[]];function yo(h,x,k,L){if(u)return Ge(24,1,h,x,k,L);x>>>=0,k>>>=0,L>>>=0;for(var N=0,ue=0;ue<k;ue++){var Te=ye()[x>>>2>>>0],Le=ye()[x+4>>>2>>>0];x+=8;for(var Ke=0;Ke<Le;Ke++){var et=U()[Te+Ke>>>0],bt=bo[h];et===0||et===10?((h===1?E:v)(ht(bt)),bt.length=0):bt.push(et)}N+=Le}return ye()[L>>>2>>>0]=N,0}u||function(){for(var h=n.numThreads-1;h--;)oe();Ze.unshift(()=>{we++,function(x){u?x():Promise.all(Vt.map(D)).then(x)}(()=>Pe())})}();for(var vo=Array(256),Ks=0;256>Ks;++Ks)vo[Ks]=String.fromCharCode(Ks);$s=vo,ir=n.BindingError=class extends Error{constructor(h){super(h),this.name="BindingError"}},n.InternalError=class extends Error{constructor(h){super(h),this.name="InternalError"}},ur.push(0,1,void 0,1,null,1,!0,1,!1,1),n.count_emval_handles=()=>ur.length/2-5-rs.length;var ct,yi=[ke,pt,ve,rt,Bt,Xt,Or,Zr,cs,es,Ps,jr,Cs,Gr,ds,Ss,uo,cn,co,_o,go,Bn,wo,Mo,yo];(async function(){function h(L,N){return ct=L.exports,ct=function(){var ue=ct,Te={};for(let[Le,Ke]of Object.entries(ue))Te[Le]=typeof Ke=="function"?(...et)=>{Kt.push(Le);try{return Ke(...et)}finally{ae||(Kt.pop(),Zt&&Pr===1&&Kt.length===0&&(Pr=0,at+=1,Er(Wn),typeof Fibers<"u"&&Fibers.rc()))}}:Ke;return Te}(),ct=function(){var ue=ct,Te=Ke=>et=>Ke(et)>>>0,Le=Ke=>()=>Ke()>>>0;return(ue=Object.assign({},ue)).Da=Te(ue.Da),ue.fb=Le(ue.fb),ue.hb=Te(ue.hb),ue.tb=Te(ue.tb),ue.ub=Le(ue.ub),ue.__cxa_get_exception_ptr=Te(ue.__cxa_get_exception_ptr),ue}(),gr.push(ct.ib),y=N,Pe(),ct}we++;var x=Fe();if(n.instantiateWasm)return new Promise(L=>{n.instantiateWasm(x,(N,ue)=>{h(N,ue),L(N.exports)})});if(u)return new Promise(L=>{pe=N=>{var ue=new WebAssembly.Instance(N,Fe());L(h(ue,N))}});Me??(Me=n.locateFile?n.locateFile?n.locateFile("ort-wasm-simd-threaded.jsep.wasm",g):g+"ort-wasm-simd-threaded.jsep.wasm":new URL(""+new URL("ort-wasm-simd-threaded.jsep-B0T3yYHD.wasm",import.meta.url).href,import.meta.url).href);try{var k=await async function(L){var N=Me;if(!fe&&typeof WebAssembly.instantiateStreaming=="function"&&!V(N))try{var ue=fetch(N,{credentials:"same-origin"});return await WebAssembly.instantiateStreaming(ue,L)}catch(Te){v(`wasm streaming compile failed: ${Te}`),v("falling back to ArrayBuffer instantiation")}return async function(Te,Le){try{var Ke=await async function(et){if(!fe)try{var bt=await _(et);return new Uint8Array(bt)}catch{}if(et==Me&&fe)et=new Uint8Array(fe);else{if(!f)throw"both async and sync fetching of the wasm failed";et=f(et)}return et}(Te);return await WebAssembly.instantiate(Ke,Le)}catch(et){v(`failed to asynchronously prepare wasm: ${et}`),$e(et)}}(N,L)}(x);return h(k.instance,k.module)}catch(L){return o(L),Promise.reject(L)}})();var Rn=h=>(Rn=ct.Da)(h),xo=()=>(xo=ct.Ea)();n._OrtInit=(h,x)=>(n._OrtInit=ct.Fa)(h,x),n._OrtGetLastError=(h,x)=>(n._OrtGetLastError=ct.Ga)(h,x),n._OrtCreateSessionOptions=(h,x,k,L,N,ue,Te,Le,Ke,et)=>(n._OrtCreateSessionOptions=ct.Ha)(h,x,k,L,N,ue,Te,Le,Ke,et),n._OrtAppendExecutionProvider=(h,x,k,L,N)=>(n._OrtAppendExecutionProvider=ct.Ia)(h,x,k,L,N),n._OrtAddFreeDimensionOverride=(h,x,k)=>(n._OrtAddFreeDimensionOverride=ct.Ja)(h,x,k),n._OrtAddSessionConfigEntry=(h,x,k)=>(n._OrtAddSessionConfigEntry=ct.Ka)(h,x,k),n._OrtReleaseSessionOptions=h=>(n._OrtReleaseSessionOptions=ct.La)(h),n._OrtCreateSession=(h,x,k)=>(n._OrtCreateSession=ct.Ma)(h,x,k),n._OrtReleaseSession=h=>(n._OrtReleaseSession=ct.Na)(h),n._OrtGetInputOutputCount=(h,x,k)=>(n._OrtGetInputOutputCount=ct.Oa)(h,x,k),n._OrtGetInputOutputMetadata=(h,x,k,L)=>(n._OrtGetInputOutputMetadata=ct.Pa)(h,x,k,L),n._OrtFree=h=>(n._OrtFree=ct.Qa)(h),n._OrtCreateTensor=(h,x,k,L,N,ue)=>(n._OrtCreateTensor=ct.Ra)(h,x,k,L,N,ue),n._OrtGetTensorData=(h,x,k,L,N)=>(n._OrtGetTensorData=ct.Sa)(h,x,k,L,N),n._OrtReleaseTensor=h=>(n._OrtReleaseTensor=ct.Ta)(h),n._OrtCreateRunOptions=(h,x,k,L)=>(n._OrtCreateRunOptions=ct.Ua)(h,x,k,L),n._OrtAddRunConfigEntry=(h,x,k)=>(n._OrtAddRunConfigEntry=ct.Va)(h,x,k),n._OrtReleaseRunOptions=h=>(n._OrtReleaseRunOptions=ct.Wa)(h),n._OrtCreateBinding=h=>(n._OrtCreateBinding=ct.Xa)(h),n._OrtBindInput=(h,x,k)=>(n._OrtBindInput=ct.Ya)(h,x,k),n._OrtBindOutput=(h,x,k,L)=>(n._OrtBindOutput=ct.Za)(h,x,k,L),n._OrtClearBoundOutputs=h=>(n._OrtClearBoundOutputs=ct._a)(h),n._OrtReleaseBinding=h=>(n._OrtReleaseBinding=ct.$a)(h),n._OrtRunWithBinding=(h,x,k,L,N)=>(n._OrtRunWithBinding=ct.ab)(h,x,k,L,N),n._OrtRun=(h,x,k,L,N,ue,Te,Le)=>(n._OrtRun=ct.bb)(h,x,k,L,N,ue,Te,Le),n._OrtEndProfiling=h=>(n._OrtEndProfiling=ct.cb)(h),n._JsepOutput=(h,x,k)=>(n._JsepOutput=ct.db)(h,x,k),n._JsepGetNodeName=h=>(n._JsepGetNodeName=ct.eb)(h);var pn=()=>(pn=ct.fb)(),Ur=n._free=h=>(Ur=n._free=ct.gb)(h),hn=n._malloc=h=>(hn=n._malloc=ct.hb)(h),jn=(h,x,k,L,N,ue)=>(jn=ct.kb)(h,x,k,L,N,ue),Nn=()=>(Nn=ct.lb)(),To=(h,x,k,L,N)=>(To=ct.mb)(h,x,k,L,N),Eo=h=>(Eo=ct.nb)(h),mn=h=>(mn=ct.ob)(h),Po=(h,x)=>(Po=ct.pb)(h,x),Co=()=>(Co=ct.qb)(),Vn=(h,x)=>(Vn=ct.rb)(h,x),fn=h=>(fn=ct.sb)(h),Un=h=>(Un=ct.tb)(h),_n=()=>(_n=ct.ub)(),So=n.dynCall_ii=(h,x)=>(So=n.dynCall_ii=ct.vb)(h,x),$o=h=>($o=ct.wb)(h),Wn=()=>(Wn=ct.xb)(),Io=h=>(Io=ct.yb)(h),ko=()=>(ko=ct.zb)();return n.stackSave=()=>_n(),n.stackRestore=h=>fn(h),n.stackAlloc=h=>Un(h),n.setValue=function(h,x,k="i8"){switch(k.endsWith("*")&&(k="*"),k){case"i1":case"i8":A()[h>>>0]=x;break;case"i16":ee()[h>>>1>>>0]=x;break;case"i32":le()[h>>>2>>>0]=x;break;case"i64":J[h>>>3]=BigInt(x);break;case"float":ze()[h>>>2>>>0]=x;break;case"double":Ue()[h>>>3>>>0]=x;break;case"*":ye()[h>>>2>>>0]=x;break;default:$e(`invalid type for setValue: ${k}`)}},n.getValue=function(h,x="i8"){switch(x.endsWith("*")&&(x="*"),x){case"i1":case"i8":return A()[h>>>0];case"i16":return ee()[h>>>1>>>0];case"i32":return le()[h>>>2>>>0];case"i64":return J[h>>>3];case"float":return ze()[h>>>2>>>0];case"double":return Ue()[h>>>3>>>0];case"*":return ye()[h>>>2>>>0];default:$e(`invalid type for getValue: ${x}`)}},n.UTF8ToString=lt,n.stringToUTF8=wr,n.lengthBytesUTF8=Ht,function h(){if(0<we)Se=h;else if(u)s(n),G();else{for(;0<Ze.length;)Ze.shift()(n);0<we?Se=h:(n.calledRun=!0,ae||(G(),s(n)))}}(),n.PTR_SIZE=4,i}),CM=Dl,Tf=(r=(e=globalThis.self)==null?void 0:e.name)==null?void 0:r.startsWith("em-pthread"),Tf&&Dl()}),Ll,Iu,Ef,Qr,SM,Gi,Pf,Cf,zl,Sf,Bl,$M,Rl,IM,Xu=je(()=>{Qu(),Ll=typeof location>"u"?void 0:location.origin,Iu=import.meta.url>"file:"&&import.meta.url<"file;",Ef=()=>{{if(Iu){let e=URL;return new URL(new e("ort.bundle.min.mjs",import.meta.url).href,Ll).href}return import.meta.url}},Qr=Ef(),SM=()=>{if(Qr&&!Qr.startsWith("blob:"))return Qr.substring(0,Qr.lastIndexOf("/")+1)},Gi=(e,r)=>{try{let t=r??Qr;return(t?new URL(e,t):new URL(e)).origin===Ll}catch{return!1}},Pf=(e,r)=>{let t=r??Qr;try{return(t?new URL(e,t):new URL(e)).href}catch{return}},Cf=(e,r)=>`${r??"./"}${e}`,zl=async e=>{let r=await(await fetch(e,{credentials:"same-origin"})).blob();return URL.createObjectURL(r)},Sf=async e=>(await import(e)).default,Bl=(Gv(),Qo(TM)).default,$M=async()=>{if(!Qr)throw new Error("Failed to load proxy worker: cannot determine the script source URL.");if(Gi(Qr))return[void 0,Bl()];let e=await zl(Qr);return[e,Bl(e)]},Rl=(Kv(),Qo(PM)).default,IM=async(e,r,t)=>{if(!e&&!r&&Rl&&Qr&&Gi(Qr))return[void 0,Rl];{let s="ort-wasm-simd-threaded.jsep.mjs",o=e??Pf(s,r),n=t&&o&&!Gi(o,r),i=n?await zl(o):o??Cf(s,r);return[n?i:void 0,await Sf(i)]}}}),jl,Ki,Do,Nl,$f,If,kf,Ju,Qt,Fn=je(()=>{Xu(),Ki=!1,Do=!1,Nl=!1,$f=()=>{if(typeof SharedArrayBuffer>"u")return!1;try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},If=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},kf=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,19,1,17,0,65,1,253,15,65,2,253,15,65,3,253,15,253,147,2,11]))}catch{return!1}},Ju=async e=>{if(Ki)return Promise.resolve();if(Do)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(Nl)throw new Error("previous call to 'initializeWebAssembly()' failed.");Do=!0;let r=e.initTimeout,t=e.numThreads;if(e.simd!==!1){if(e.simd==="relaxed"){if(!kf())throw new Error("Relaxed WebAssembly SIMD is not supported in the current environment.")}else if(!If())throw new Error("WebAssembly SIMD is not supported in the current environment.")}let s=$f();t>1&&!s&&(typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+t+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),console.warn("WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading."),e.numThreads=t=1);let o=e.wasmPaths,n=typeof o=="string"?o:void 0,i=o==null?void 0:o.mjs,a=(i==null?void 0:i.href)??i,l=o==null?void 0:o.wasm,u=(l==null?void 0:l.href)??l,p=e.wasmBinary,[c,d]=await IM(a,n,t>1),_=!1,f=[];if(r>0&&f.push(new Promise(T=>{setTimeout(()=>{_=!0,T()},r)})),f.push(new Promise((T,I)=>{let g={numThreads:t};if(p)g.wasmBinary=p;else if(u||n)g.locateFile=w=>u??n+w;else if(a&&a.indexOf("blob:")!==0)g.locateFile=w=>new URL(w,a).href;else if(c){let w=SM();w&&(g.locateFile=S=>w+S)}d(g).then(w=>{Do=!1,Ki=!0,jl=w,T(),c&&URL.revokeObjectURL(c)},w=>{Do=!1,Nl=!0,I(w)})})),await Promise.race(f),_)throw new Error(`WebAssembly backend initializing failed due to timeout: ${r}ms`)},Qt=()=>{if(Ki&&jl)return jl;throw new Error("WebAssembly is not initialized yet.")}}),ys,la,Gt,Yu=je(()=>{Fn(),ys=(e,r)=>{let t=Qt(),s=t.lengthBytesUTF8(e)+1,o=t._malloc(s);return t.stringToUTF8(e,o,s),r.push(o),o},la=(e,r,t,s)=>{if(typeof e=="object"&&e!==null){if(t.has(e))throw new Error("Circular reference in options");t.add(e)}Object.entries(e).forEach(([o,n])=>{let i=r?r+o:o;if(typeof n=="object")la(n,i+".",t,s);else if(typeof n=="string"||typeof n=="number")s(i,n.toString());else if(typeof n=="boolean")s(i,n?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof n}`)})},Gt=e=>{let r=Qt(),t=r.stackSave();try{let s=r.PTR_SIZE,o=r.stackAlloc(2*s);r._OrtGetLastError(o,o+s);let n=Number(r.getValue(o,s===4?"i32":"i64")),i=r.getValue(o+s,"*"),a=i?r.UTF8ToString(i):"";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${a}`)}finally{r.stackRestore(t)}}}),kM,Hv=je(()=>{Fn(),Yu(),kM=e=>{let r=Qt(),t=0,s=[],o=e||{};try{if((e==null?void 0:e.logSeverityLevel)===void 0)o.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if((e==null?void 0:e.logVerbosityLevel)===void 0)o.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);(e==null?void 0:e.terminate)===void 0&&(o.terminate=!1);let n=0;return(e==null?void 0:e.tag)!==void 0&&(n=ys(e.tag,s)),t=r._OrtCreateRunOptions(o.logSeverityLevel,o.logVerbosityLevel,!!o.terminate,n),t===0&&Gt("Can't create run options."),(e==null?void 0:e.extra)!==void 0&&la(e.extra,"",new WeakSet,(i,a)=>{let l=ys(i,s),u=ys(a,s);r._OrtAddRunConfigEntry(t,l,u)!==0&&Gt(`Can't set a run config entry: ${i} - ${a}.`)}),[t,s]}catch(n){throw t!==0&&r._OrtReleaseRunOptions(t),s.forEach(i=>r._free(i)),n}}}),Af,Ff,Of,Lo,Df,AM,qv=je(()=>{Fn(),Yu(),Af=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},Ff=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},Of=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let r=e.extra.session;r.use_ort_model_bytes_directly||(r.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(t=>(typeof t=="string"?t:t.name)==="webgpu")&&(e.enableMemPattern=!1)},Lo=(e,r,t,s)=>{let o=ys(r,s),n=ys(t,s);Qt()._OrtAddSessionConfigEntry(e,o,n)!==0&&Gt(`Can't set a session config entry: ${r} - ${t}.`)},Df=async(e,r,t)=>{for(let s of r){let o=typeof s=="string"?s:s.name,n=[];switch(o){case"webnn":if(o="WEBNN",typeof s!="string"){let p=s==null?void 0:s.deviceType;p&&Lo(e,"deviceType",p,t)}break;case"webgpu":if(o="JS",typeof s!="string"){let p=s;if(p!=null&&p.preferredLayout){if(p.preferredLayout!=="NCHW"&&p.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${p.preferredLayout}`);Lo(e,"preferredLayout",p.preferredLayout,t)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${o}`)}let i=ys(o,t),a=n.length,l=0,u=0;if(a>0){l=Qt()._malloc(a*Qt().PTR_SIZE),t.push(l),u=Qt()._malloc(a*Qt().PTR_SIZE),t.push(u);for(let p=0;p<a;p++)Qt().setValue(l+p*Qt().PTR_SIZE,n[p][0],"*"),Qt().setValue(u+p*Qt().PTR_SIZE,n[p][1],"*")}await Qt()._OrtAppendExecutionProvider(e,i,l,u,a)!==0&&Gt(`Can't append execution provider: ${o}.`)}},AM=async e=>{let r=Qt(),t=0,s=[],o=e||{};Of(o);try{let n=Af(o.graphOptimizationLevel??"all"),i=Ff(o.executionMode??"sequential"),a=typeof o.logId=="string"?ys(o.logId,s):0,l=o.logSeverityLevel??2;if(!Number.isInteger(l)||l<0||l>4)throw new Error(`log serverity level is not valid: ${l}`);let u=o.logVerbosityLevel??0;if(!Number.isInteger(u)||u<0||u>4)throw new Error(`log verbosity level is not valid: ${u}`);let p=typeof o.optimizedModelFilePath=="string"?ys(o.optimizedModelFilePath,s):0;if(t=r._OrtCreateSessionOptions(n,!!o.enableCpuMemArena,!!o.enableMemPattern,i,!!o.enableProfiling,0,a,l,u,p),t===0&&Gt("Can't create session options."),o.executionProviders&&await Df(t,o.executionProviders,s),o.enableGraphCapture!==void 0){if(typeof o.enableGraphCapture!="boolean")throw new Error(`enableGraphCapture must be a boolean value: ${o.enableGraphCapture}`);Lo(t,"enableGraphCapture",o.enableGraphCapture.toString(),s)}if(o.freeDimensionOverrides)for(let[c,d]of Object.entries(o.freeDimensionOverrides)){if(typeof c!="string")throw new Error(`free dimension override name must be a string: ${c}`);if(typeof d!="number"||!Number.isInteger(d)||d<0)throw new Error(`free dimension override value must be a non-negative integer: ${d}`);let _=ys(c,s);r._OrtAddFreeDimensionOverride(t,_,d)!==0&&Gt(`Can't set a free dimension override: ${c} - ${d}.`)}return o.extra!==void 0&&la(o.extra,"",new WeakSet,(c,d)=>{Lo(t,c,d,s)}),[t,s]}catch(n){throw t!==0&&r._OrtReleaseSessionOptions(t)!==0&&Gt("Can't release session options."),s.forEach(i=>r._free(i)),n}}}),Jn,Bs,Sn,Zu,ua,ec,tc,ku,ft=je(()=>{Jn=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;case"int4":return 22;case"uint4":return 21;default:throw new Error(`unsupported data type: ${e}`)}},Bs=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";case 22:return"int4";case 21:return"uint4";default:throw new Error(`unsupported data type: ${e}`)}},Sn=(e,r)=>{let t=[-1,4,1,1,2,2,4,8,-1,1,2,8,4,8,-1,-1,-1,-1,-1,-1,-1,.5,.5][e],s=typeof r=="number"?r:r.reduce((o,n)=>o*n,1);return t>0?Math.ceil(s*t):void 0},Zu=e=>{switch(e){case"float16":return typeof Float16Array<"u"&&Float16Array.from?Float16Array:Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},ua=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},ec=e=>e==="float32"||e==="float16"||e==="int32"||e==="int64"||e==="uint32"||e==="uint8"||e==="bool"||e==="uint4"||e==="int4",tc=e=>e==="float32"||e==="float16"||e==="int32"||e==="int64"||e==="uint32"||e==="uint64"||e==="int8"||e==="uint8"||e==="bool"||e==="uint4"||e==="int4",ku=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;case"ml-tensor":return 5;default:throw new Error(`unsupported data location: ${e}`)}}}),rc,FM=je(()=>{Qu(),rc=async e=>{if(typeof e=="string"){let r=await fetch(e);if(!r.ok)throw new Error(`failed to load external data file: ${e}`);let t=r.headers.get("Content-Length"),s=t?parseInt(t,10):0;if(s<1073741824)return new Uint8Array(await r.arrayBuffer());{if(!r.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let o=r.body.getReader(),n;try{n=new ArrayBuffer(s)}catch(a){if(a instanceof RangeError){let l=Math.ceil(s/65536);n=new WebAssembly.Memory({initial:l,maximum:l}).buffer}else throw a}let i=0;for(;;){let{done:a,value:l}=await o.read();if(a)break;let u=l.byteLength;new Uint8Array(n,i,u).set(l),i+=u}return new Uint8Array(n,0,s)}}else return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)}}),Lf,zf,Bf,Rf,sc,jf,kt,Rs=je(()=>{ft(),Lf=["V","I","W","E","F"],zf=(e,r)=>{console.log(`[${Lf[e]},${new Date().toISOString()}]${r}`)},sc=(e,r)=>{Bf=e,Rf=r},jf=(e,r)=>{let t=ua(e),s=ua(Bf);t>=s&&zf(t,typeof r=="function"?r():r)},kt=(...e)=>{Rf&&jf(...e)}}),Nf,eo,be,ca,OM,DM,LM,xt=je(()=>{Nf=class{static calcMatMulShape(e,r){return e[1]!==r[0]?void 0:[e[0],r[1]]}},eo=class{static calcShape(e,r,t=!1){let s=e.length,o=r.length;if(s===0)return r;if(o===0)return e;let n=Math.max(e.length,r.length),i=new Array(n);if(t){if(s<2||o<2)return;let a=Nf.calcMatMulShape([e[s-2],e[s-1]],[r[o-2],r[o-1]]);if(a===void 0)return;[i[n-2],i[n-1]]=a}for(let a=t?3:1;a<=n;a++){let l=s-a<0?1:e[s-a],u=o-a<0?1:r[o-a];if(l!==u&&l>1&&u>1)return;let p=Math.max(l,u);if(l&&u)i[n-a]=Math.max(l,u);else{if(p>1)return;i[n-a]=0}}return i}static isValidBroadcast(e,r){let t=e.length,s=r.length;if(t>s)return!1;for(let o=1;o<=t;o++)if(e[t-o]!==1&&e[t-o]!==r[s-o])return!1;return!0}},be=class ia{static size(r){return ia.getSizeFromDimensionRange(r,0,r.length)}static convertShape(r,t=4){let s=r.length;if(s===0)return[];let o=new Array(s),n=s-1;for(;n>=0;){if(r[n]%t===0){o[n]=r[n]/t;break}if(t%r[n]!==0)throw new Error("cannot convert shape");o[n]=1,t/=r[n],n--}for(n--;n>=0;n--)o[n]=r[n];return o}static sizeFromDimension(r,t){if(t<0||t>r.length)throw new Error(`invalid dimension of ${t} for sizeFromDimension as Tensor has ${r.length} dimensions.`);return ia.getSizeFromDimensionRange(r,t,r.length)}static sizeToDimension(r,t){if(t<0||t>r.length)throw new Error(`invalid dimension of ${t} for sizeToDimension as Tensor has ${r.length} dimensions.`);return ia.getSizeFromDimensionRange(r,0,t)}static getSizeFromDimensionRange(r,t,s){let o=1;for(let n=t;n<s;n++){if(r[n]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");o*=Number(r[n])}return o}static computeStrides(r){let t=r.length;if(t===0)return[];if(t===1)return[1];let s=new Array(t);s[t-1]=1,s[t-2]=r[t-1];for(let o=t-3;o>=0;--o)s[o]=s[o+1]*r[o+1];return s}static normalizeAxis(r,t){if(r<-t&&r>=t)throw new Error("unsupported axis for this operation.");return r<0?r+t:r}static normalizeAxes(r,t){return r.map(s=>this.normalizeAxis(s,t??r.length))}static sortBasedOnPerm(r,t){return t?t.map(s=>r[s]):r.slice().reverse()}static padShape(r,t){let s=r.length;return r.map((o,n)=>o+t[n]+t[n+s])}static areEqual(r,t){return r.length!==t.length?!1:r.every((s,o)=>s===t[o])}},ca=class Go{static adjustPoolAttributes(r,t,s,o,n,i){if(!r&&s.length!==t.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(r)for(let a=0;a<t.length-2;a++)a>=s.length?s.push(t[a+2]):s[a]=t[a+2];for(let a=0;a<s.length;a++)if(a<o.length){if(o[a]<0)throw new Error("strides should be greater than or equal to 1")}else o.push(1);for(let a=0;a<s.length;a++)if(a<n.length){if(n[a]<0)throw new Error("dilations should be greater than or equal to 1")}else n.push(1);for(let a=0;a<s.length*2;a++)if(a<i.length){if(i[a]<0)throw new Error("pad should be greater than or equal to 1")}else i.push(0);for(let a=0;a<s.length;a++){if(s[a]<=0)throw new Error("kernel shapes need to be greater than 0");if(i[a]>=s[a]||i[a+s.length]>=s[a])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(r,t,s,o,n,i,a){if(a){if(n.length!==2*(r.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(t.length!==r.length-2)throw new Error("length of strides should be the length of data dimensions");if(o.length!==r.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let l=0;l<r.length-2;l++)Go.adjustPadAndReturnShape(r[l+(i?1:2)],t[l],s[l],o[l],n,l,l+r.length-2,a)}}static computePoolOutputShape(r,t,s,o,n,i,a){if(t.length<=0)throw new Error("input shape must be of size greater than 0");let l=[t[0],t[1]];return Go.computeShapeHelper(r,t,l,s,o,n,i,a),l}static computeConvOutputShape(r,t,s,o,n,i,a){if(r.length<=0||t.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let l=[r[0],t[0]];return Go.computeShapeHelper(!1,r,l,s,o,n,i,a),l}static computeShapeHelper(r,t,s,o,n,i,a,l){if(r)for(let u=0;u<t.length-2;u++)s.push(1);else for(let u=0;u<t.length-2;u++)s.push(Go.adjustPadAndReturnShape(t[u+2],o[u],n[u],i[u],a,u,u+t.length-2,l))}static adjustPadAndReturnShape(r,t,s,o,n,i,a,l){let u=s*(o-1)+1;if(l&&l!=="NOTSET")switch(l){case"VALID":return n[i]=0,n[a]=0,Math.floor((r-u)/t+1);case"SAME_LOWER":case"SAME_UPPER":if(s!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let p=((r+t-1)/t-1)*t+o-r;return n[i]=Math.floor(l==="SAME_LOWER"?(p+1)/2:p/2),n[a]=p-n[i],Math.floor((r+p-o)/t+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((r+n[i]+n[a]-u)/t+1)}},OM=class{static getShapeOfGemmResult(e,r,t,s,o){if(e.length!==2||t.length!==2)throw new Error("shape need to be of size 2");let n,i,a;r?(n=e[1],i=e[0]):(n=e[0],i=e[1]);let l=-1;if(s?(a=t[0],l=1):(a=t[1],l=0),t[l]!==i)throw new Error("dimension mismatch");if(n<=0||a<=0||i<=0)throw new Error("invalid shape specified");if(o&&!eo.isValidBroadcast(o,[n,a]))throw new Error("gemm: invalid bias shape for broadcast");return[n,a,i]}},DM=-34028234663852886e22,LM=34028234663852886e22}),nc,zM=je(()=>{ft(),nc=(e,r)=>new(Zu(r))(e)}),Au,Vl,Vf,Ul,Uf,Wl,Gl,Kl,Wf,BM,Qv=je(()=>{Rs(),Au=(e,r=!0)=>{if(e.byteLength%8!==0)throw new Error("Invalid Uint8Array length - must be a multiple of 8 (BigInt).");let t=e.byteLength/8,s=new BigInt64Array(e.buffer,e.byteOffset,t),o=new Int32Array(t);for(let n=0;n<t;n++){let i=s[n];if(i>2147483647n||i<-2147483648n)throw new Error(`Overflow occurred when converting BigInt to Int32 at index ${n}: ${i}`);o[n]=Number(i)}return r?new Uint8Array(o.buffer):o},Vl=(e,r=!0)=>{if(e.byteLength%4!==0)throw new Error("Invalid Uint8Array length - must be a multiple of 4 (Int32).");let t=e.byteLength/4,s=new Int32Array(e.buffer,e.byteOffset,t),o=BigInt64Array.from(s,BigInt);return r?new Uint8Array(o.buffer):o},Vf=1,Ul=()=>Vf++,Uf=new Map([["float32",32],["float16",16],["int32",32],["uint32",32],["int64",64],["uint64",64],["int8",8],["uint8",8],["int4",4],["uint4",4]]),Wl=(e,r)=>{let t=Uf.get(e);if(!t)throw new Error("Unsupported data type.");return r.length>0?Math.ceil(r.reduce((s,o)=>s*o)*t/8):0},Gl=class{constructor(e){this.shouldConvertInt64toInt32=!1,this.isInt64ToInt32Converted=!1;let{sessionId:r,context:t,tensor:s,dataType:o,shape:n,shouldConvertInt64toInt32:i=!1}=e;this.sessionId=r,this.mlContext=t,this.mlTensor=s,this.dataType=o,this.tensorShape=n,this.shouldConvertInt64toInt32=i}get tensor(){return this.mlTensor}get type(){return this.dataType}get shape(){return this.tensorShape}get byteLength(){return Wl(this.dataType,this.tensorShape)}destroy(){kt("verbose",()=>"[WebNN] TensorWrapper.destroy"),this.mlTensor.destroy()}write(e){this.mlContext.writeTensor(this.mlTensor,e)}async read(e,r){if(e){let t=await this.mlContext.readTensor(this.mlTensor),s=Vl(new Uint8Array(t));if(r){(r instanceof ArrayBuffer?new Uint8Array(r):new Uint8Array(r.buffer,r.byteOffset,r.byteLength)).set(s);return}else return s.buffer}else return r?this.mlContext.readTensor(this.mlTensor,r):this.mlContext.readTensor(this.mlTensor)}canReuseTensor(e,r,t){return this.mlContext===e&&this.dataType===r&&this.tensorShape.length===t.length&&this.tensorShape.every((s,o)=>s===t[o])}setIsInt64ToInt32Converted(e){this.isInt64ToInt32Converted=e}},Kl=class{constructor(e,r){this.tensorManager=e,this.wrapper=r}get tensorWrapper(){return this.wrapper}releaseTensor(){this.tensorWrapper&&(this.tensorManager.releaseTensor(this.tensorWrapper),this.wrapper=void 0)}async ensureTensor(e,r,t,s){let o=r,n=this.tensorManager.getMLContext(e),i=o==="int64"&&!n.opSupportLimits().input.dataTypes.includes("int64");if(i&&(o="int32",kt("verbose",()=>"[WebNN] TensorIdTracker.ensureTensor: convert dataType from int64 to int32")),this.wrapper){if(this.wrapper.canReuseTensor(n,o,t))return this.wrapper.tensor;if(s){if(this.wrapper.byteLength!==Wl(o,t))throw new Error("Unable to copy data to tensor with different size.");this.activeUpload=new Uint8Array(await this.wrapper.read())}this.tensorManager.releaseTensor(this.wrapper)}let a=typeof MLTensorUsage>"u"?void 0:MLTensorUsage.READ|MLTensorUsage.WRITE;return this.wrapper=await this.tensorManager.getCachedTensor(e,o,t,a,!0,!0,i),s&&this.activeUpload&&(this.wrapper.write(this.activeUpload),this.activeUpload=void 0),this.wrapper.tensor}upload(e){let r=e;if(this.wrapper)if(this.wrapper.shouldConvertInt64toInt32&&(r=Au(e,!0),this.wrapper.setIsInt64ToInt32Converted(!0)),r.byteLength===this.wrapper.byteLength){this.wrapper.write(r);return}else kt("verbose",()=>"Data size does not match tensor size. Releasing tensor."),this.releaseTensor();this.activeUpload?this.activeUpload.set(r):this.activeUpload=new Uint8Array(r)}async download(e){var r,t,s;if(this.activeUpload){let o=(r=this.wrapper)!=null&&r.isInt64ToInt32Converted?Vl(this.activeUpload):this.activeUpload;if(e){e instanceof ArrayBuffer?new Uint8Array(e).set(o):new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(o);return}else return o.buffer}if(!this.wrapper)throw new Error("Tensor has not been created.");return e?this.wrapper.read((t=this.wrapper)==null?void 0:t.shouldConvertInt64toInt32,e):this.wrapper.read((s=this.wrapper)==null?void 0:s.shouldConvertInt64toInt32)}},Wf=class{constructor(e){this.backend=e,this.tensorTrackersById=new Map,this.freeTensors=[],this.externalTensors=new Set}getMLContext(e){let r=this.backend.getMLContext(e);if(!r)throw new Error("MLContext not found for session.");return r}reserveTensorId(){let e=Ul();return this.tensorTrackersById.set(e,new Kl(this)),e}releaseTensorId(e){let r=this.tensorTrackersById.get(e);r&&(this.tensorTrackersById.delete(e),r.tensorWrapper&&this.releaseTensor(r.tensorWrapper))}async ensureTensor(e,r,t,s,o){kt("verbose",()=>`[WebNN] TensorManager.ensureTensor {tensorId: ${r}, dataType: ${t}, shape: ${s}, copyOld: ${o}}`);let n=this.tensorTrackersById.get(r);if(!n)throw new Error("Tensor not found.");return n.ensureTensor(e,t,s,o)}upload(e,r){let t=this.tensorTrackersById.get(e);if(!t)throw new Error("Tensor not found.");t.upload(r)}async download(e,r){kt("verbose",()=>`[WebNN] TensorManager.download {tensorId: ${e}, dstBuffer: ${r==null?void 0:r.byteLength}}`);let t=this.tensorTrackersById.get(e);if(!t)throw new Error("Tensor not found.");return t.download(r)}releaseTensorsForSession(e){for(let r of this.freeTensors)r.sessionId===e&&r.destroy();this.freeTensors=this.freeTensors.filter(r=>r.sessionId!==e)}registerTensor(e,r,t,s){let o=this.getMLContext(e),n=Ul(),i=new Gl({sessionId:e,context:o,tensor:r,dataType:t,shape:s});return this.tensorTrackersById.set(n,new Kl(this,i)),this.externalTensors.add(i),n}async getCachedTensor(e,r,t,s,o,n,i=!1){let a=this.getMLContext(e);for(let[u,p]of this.freeTensors.entries())if(p.canReuseTensor(a,r,t)){kt("verbose",()=>`[WebNN] Reusing tensor {dataType: ${r}, shape: ${t}}`);let c=this.freeTensors.splice(u,1)[0];return c.sessionId=e,c}kt("verbose",()=>`[WebNN] MLContext.createTensor {dataType: ${r}, shape: ${t}}`);let l=await a.createTensor({dataType:r,shape:t,dimensions:t,usage:s,writable:o,readable:n});return new Gl({sessionId:e,context:a,tensor:l,dataType:r,shape:t,shouldConvertInt64toInt32:i})}releaseTensor(e){this.externalTensors.has(e)&&this.externalTensors.delete(e),this.freeTensors.push(e)}},BM=(...e)=>new Wf(...e)}),Hi,Gf,RM,Xv=je(()=>{ft(),Fn(),zM(),Qv(),Rs(),Hi=new Map([[1,"float32"],[10,"float16"],[6,"int32"],[12,"uint32"],[7,"int64"],[13,"uint64"],[22,"int4"],[21,"uint4"],[3,"int8"],[2,"uint8"],[9,"uint8"]]),Gf=(e,r)=>{if(e===r)return!0;if(e===void 0||r===void 0)return!1;let t=Object.keys(e).sort(),s=Object.keys(r).sort();return t.length===s.length&&t.every((o,n)=>o===s[n]&&e[o]===r[o])},RM=class{constructor(e){this.tensorManager=BM(this),this.mlContextBySessionId=new Map,this.sessionIdsByMLContext=new Map,this.mlContextCache=[],this.sessionGraphInputs=new Map,this.temporaryGraphInputs=[],this.temporarySessionTensorIds=new Map,sc(e.logLevel,!!e.debug)}get currentSessionId(){if(this.activeSessionId===void 0)throw new Error("No active session");return this.activeSessionId}onRunStart(e){kt("verbose",()=>`[WebNN] onRunStart {sessionId: ${e}}`),this.activeSessionId=e}onRunEnd(e){kt("verbose",()=>`[WebNN] onRunEnd {sessionId: ${e}}`);let r=this.temporarySessionTensorIds.get(e);if(r){for(let t of r)kt("verbose",()=>`[WebNN] releasing temporary tensor {tensorId: ${t}}`),this.tensorManager.releaseTensorId(t);this.temporarySessionTensorIds.delete(e),this.activeSessionId=void 0}}async createMLContext(e){if(e instanceof GPUDevice){let t=this.mlContextCache.findIndex(s=>s.gpuDevice===e);if(t!==-1)return this.mlContextCache[t].mlContext;{let s=await navigator.ml.createContext(e);return this.mlContextCache.push({gpuDevice:e,mlContext:s}),s}}else if(e===void 0){let t=this.mlContextCache.findIndex(s=>s.options===void 0&&s.gpuDevice===void 0);if(t!==-1)return this.mlContextCache[t].mlContext;{let s=await navigator.ml.createContext();return this.mlContextCache.push({mlContext:s}),s}}let r=this.mlContextCache.findIndex(t=>Gf(t.options,e));if(r!==-1)return this.mlContextCache[r].mlContext;{let t=await navigator.ml.createContext(e);return this.mlContextCache.push({options:e,mlContext:t}),t}}registerMLContext(e,r){this.mlContextBySessionId.set(e,r);let t=this.sessionIdsByMLContext.get(r);t||(t=new Set,this.sessionIdsByMLContext.set(r,t)),t.add(e),this.temporaryGraphInputs.length>0&&(this.sessionGraphInputs.set(e,this.temporaryGraphInputs),this.temporaryGraphInputs=[])}onReleaseSession(e){this.sessionGraphInputs.delete(e);let r=this.mlContextBySessionId.get(e);if(!r)return;this.tensorManager.releaseTensorsForSession(e),this.mlContextBySessionId.delete(e);let t=this.sessionIdsByMLContext.get(r);if(t.delete(e),t.size===0){this.sessionIdsByMLContext.delete(r);let s=this.mlContextCache.findIndex(o=>o.mlContext===r);s!==-1&&this.mlContextCache.splice(s,1)}}getMLContext(e){return this.mlContextBySessionId.get(e)}reserveTensorId(){return this.tensorManager.reserveTensorId()}releaseTensorId(e){kt("verbose",()=>`[WebNN] releaseTensorId {tensorId: ${e}}`),this.tensorManager.releaseTensorId(e)}async ensureTensor(e,r,t,s,o){let n=Hi.get(t);if(!n)throw new Error(`Unsupported ONNX data type: ${t}`);return this.tensorManager.ensureTensor(e??this.currentSessionId,r,n,s,o)}async createTemporaryTensor(e,r,t){kt("verbose",()=>`[WebNN] createTemporaryTensor {onnxDataType: ${r}, shape: ${t}}`);let s=Hi.get(r);if(!s)throw new Error(`Unsupported ONNX data type: ${r}`);let o=this.tensorManager.reserveTensorId();await this.tensorManager.ensureTensor(e,o,s,t,!1);let n=this.temporarySessionTensorIds.get(e);return n?n.push(o):this.temporarySessionTensorIds.set(e,[o]),o}uploadTensor(e,r){if(!Qt().shouldTransferToMLTensor)throw new Error("Trying to upload to a MLTensor while shouldTransferToMLTensor is false");kt("verbose",()=>`[WebNN] uploadTensor {tensorId: ${e}, data: ${r.byteLength}}`),this.tensorManager.upload(e,r)}async downloadTensor(e,r){return this.tensorManager.download(e,r)}createMLTensorDownloader(e,r){return async()=>{let t=await this.tensorManager.download(e);return nc(t,r)}}registerMLTensor(e,r,t,s){let o=Hi.get(t);if(!o)throw new Error(`Unsupported ONNX data type: ${t}`);let n=this.tensorManager.registerTensor(e,r,o,s);return kt("verbose",()=>`[WebNN] registerMLTensor {tensor: ${r}, dataType: ${o}, dimensions: ${s}} -> {tensorId: ${n}}`),n}registerMLConstant(e,r,t,s,o,n,i=!1){if(!n)throw new Error("External mounted files are not available.");let a=e;e.startsWith("./")&&(a=e.substring(2));let l=n.get(a);if(!l)throw new Error(`File with name ${a} not found in preloaded files.`);if(r+t>l.byteLength)throw new Error("Out of bounds: data offset and length exceed the external file data size.");let u=l.slice(r,r+t).buffer,p;switch(o.dataType){case"float32":p=new Float32Array(u);break;case"float16":p=typeof Float16Array<"u"&&Float16Array.from?new Float16Array(u):new Uint16Array(u);break;case"int32":p=new Int32Array(u);break;case"uint32":p=new Uint32Array(u);break;case"int64":i?(p=Au(new Uint8Array(u),!1),o.dataType="int32"):p=new BigInt64Array(u);break;case"uint64":p=new BigUint64Array(u);break;case"int8":p=new Int8Array(u);break;case"int4":case"uint4":case"uint8":p=new Uint8Array(u);break;default:throw new Error(`Unsupported data type: ${o.dataType} in creating WebNN Constant from external data.`)}return kt("verbose",()=>`[WebNN] registerMLConstant {dataType: ${o.dataType}, shape: ${o.shape}}} ${i?"(Note: it was int64 data type and registered to int32 as workaround)":""}`),s.constant(o,p)}registerGraphInput(e){this.temporaryGraphInputs.push(e)}isGraphInput(e,r){let t=this.sessionGraphInputs.get(e);return t?t.includes(r):!1}isInt64Supported(e){var r;return!!((r=this.mlContextBySessionId.get(e))!=null&&r.opSupportLimits().input.dataTypes.includes("int64"))}flush(){}}}),oc=je(()=>{}),Hl,qi,Qi,Kf,Hf,ql,Fu,qf,jM,Jv=je(()=>{Rs(),oc(),Hl=new Map([[64,250],[128,200],[256,200],[512,200],[2048,230],[4096,200],[8192,50],[16384,50],[32768,50],[65536,50],[131072,50],[262144,50],[524288,50],[1048576,50],[2097152,30],[4194304,20],[8388608,10],[12582912,10],[16777216,10],[26214400,15],[33554432,22],[44236800,2],[58982400,6],[67108864,6],[134217728,6],[167772160,6]]),qi=[],Qi=e=>Math.ceil(Number(e)/16)*16,Kf=e=>{for(let r=0;r<qi.length;r++){let t=qi[r];if(e<=t)return t}return Math.ceil(e/16)*16},Hf=1,ql=()=>Hf++,Fu=async(e,r,t,s)=>{let o=Qi(t),n=e.device.createBuffer({size:o,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let i=e.getCommandEncoder();e.endComputePass(),i.copyBufferToBuffer(r,0,n,0,o),e.flush(),await n.mapAsync(GPUMapMode.READ);let a=n.getMappedRange();if(s){let l=s();return l.set(new Uint8Array(a,0,t)),l}else return new Uint8Array(a.slice(0,t))}finally{n.destroy()}},qf=class{constructor(e){this.backend=e,this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersPending=[],this.capturedPendingBuffers=new Map;for(let[r]of Hl)qi.push(r),this.freeBuffers.set(r,[]),this.freeUniformBuffers.set(r,[]);this.sessionCount=0}upload(e,r){let t=r.buffer,s=r.byteOffset,o=r.byteLength,n=Qi(o),i=this.storageCache.get(e);if(!i)throw new Error("gpu data for uploading does not exist");if(Number(i.originalSize)!==o)throw new Error(`inconsistent data size. gpu data size=${i.originalSize}, data size=${o}`);let a=this.backend.device.createBuffer({mappedAtCreation:!0,size:n,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),l=a.getMappedRange();new Uint8Array(l).set(new Uint8Array(t,s,o)),a.unmap();let u=this.backend.device.createCommandEncoder();u.copyBufferToBuffer(a,0,i.gpuData.buffer,0,n),this.backend.device.queue.submit([u.finish()]),a.destroy(),kt("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${e})`)}memcpy(e,r){let t=this.storageCache.get(e);if(!t)throw new Error("source gpu data for memcpy does not exist");let s=this.storageCache.get(r);if(!s)throw new Error("destination gpu data for memcpy does not exist");if(t.originalSize!==s.originalSize)throw new Error("inconsistent source and destination gpu data size");let o=Qi(t.originalSize),n=this.backend.getCommandEncoder();this.backend.endComputePass(),n.copyBufferToBuffer(t.gpuData.buffer,0,s.gpuData.buffer,0,o)}registerExternalBuffer(e,r,t){let s;if(t){if(s=t[0],e===t[1])return kt("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${s}, buffer is the same, skip.`),s;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.
             Please use the previous external buffer!`)}else s=ql();return this.storageCache.set(s,{gpuData:{id:s,type:0,buffer:e},originalSize:r}),kt("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${s}, registered.`),s}unregisterExternalBuffer(e){e!==void 0&&(this.storageCache.delete(e),kt("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${e}`))}create(e,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let t=Kf(e),s,o=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,n=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(o||n){let a=(o?this.freeBuffers:this.freeUniformBuffers).get(t);a?a.length>0?s=a.pop():s=this.backend.device.createBuffer({size:t,usage:r}):s=this.backend.device.createBuffer({size:t,usage:r})}else s=this.backend.device.createBuffer({size:t,usage:r});let i={id:ql(),type:0,buffer:s};return this.storageCache.set(i.id,{gpuData:i,originalSize:Number(e)}),kt("verbose",()=>`[WebGPU] GpuDataManager.create(size=${e}) => id=${i.id}`),i}get(e){var r;return(r=this.storageCache.get(e))==null?void 0:r.gpuData}release(e){let r=typeof e=="bigint"?Number(e):e,t=this.storageCache.get(r);if(!t){if(this.storageCache.size===0)return 0;throw new Error("releasing data does not exist")}return kt("verbose",()=>`[WebGPU] GpuDataManager.release(id=${r}), gpuDataId=${t.gpuData.id}`),this.storageCache.delete(r),this.buffersPending.push(t.gpuData.buffer),t.originalSize}async download(e,r){let t=this.storageCache.get(Number(e));if(!t)throw new Error("data does not exist");await Fu(this.backend,t.gpuData.buffer,t.originalSize,r)}refreshPendingBuffers(){if(this.buffersPending.length!==0)if(this.backend.sessionStatus==="default"){for(let e of this.buffersPending){let r=Hl.get(e.size);if((e.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){let t=this.freeBuffers.get(e.size)||[];r===void 0||t.length>=r?e.destroy():t.push(e)}else if((e.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM){let t=this.freeUniformBuffers.get(e.size)||[];r===void 0||t.length>=r?e.destroy():t.push(e)}else e.destroy()}this.buffersPending=[]}else{let e=this.capturedPendingBuffers.get(this.backend.currentSessionId);e||(e=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,e));for(let r of this.buffersPending)e.push(r);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach(e=>{e.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(e=>{e.forEach(r=>{r.destroy()})}),this.storageCache.forEach(e=>{e.gpuData.buffer.destroy()}),this.capturedPendingBuffers.forEach(e=>{e.forEach(r=>{r.destroy()})}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onCreateSession(){this.sessionCount+=1}onReleaseSession(e){let r=this.capturedPendingBuffers.get(e);r&&(r.forEach(t=>{t.destroy()}),this.capturedPendingBuffers.delete(e)),this.sessionCount-=1,this.sessionCount===0&&(kt("warning",()=>"[WebGPU] Clearing webgpu buffer cache"),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.storageCache=new Map)}},jM=(...e)=>new qf(...e)}),Qf,Nt,lr=je(()=>{Qf=class{constructor(e){Object.assign(this,e)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(e=>`${this[e]}`).join(";")),this.key}},Nt=e=>new Qf(e)}),to,Xi,$r,Rr,ut,nr,Ou,Zn,Ys,ot,zo,Ce,tt,NM,ic,Xf,VM,Tt=je(()=>{ft(),xt(),to=64,Xi=(e,r)=>{if(r===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(Number(e)){case 10:return r>1?`vec${r}<f16>`:"f16";case 1:return r>1?`vec${r}<f32>`:"f32";case 6:return r>1?`vec${r}<i32>`:"i32";case 12:return r>1?`vec${r}<u32>`:"u32";case 7:if(r>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(r>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(r!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];case 22:return"i32";case 21:return"u32";default:throw new Error(`Unknown data type: ${e}`)}},$r=(e,r=1)=>{let t=Xi(e,r);return typeof t=="string"?t:t[0]},Rr=(e,r=1)=>{let t=Xi(e,r);return typeof t=="string"?t:t[1]},ut=(...e)=>{let r=[];return e.forEach(t=>{t.length!==0&&r.push({type:12,data:t},{type:12,data:be.computeStrides(t)})}),r},nr=e=>e%4===0?4:e%2===0?2:1,Ou=(e="f32",r,t="0")=>!r||r===1?`${e}(${t})`:`vec${r}<${e}>(${t})`,Zn=(e,r,t)=>e==="f32"?t:r===1?`f32(${t})`:`vec${r}<f32>(${t})`,Ys=(e,r)=>r===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:r===2?`(${e}.x + ${e}.y)`:r===3?`(${e}.x + ${e}.y + ${e}.z)`:e,ot=(e,r,t,s)=>e.startsWith("uniforms.")&&t>4?typeof r=="string"?s==="f16"?`${e}[(${r}) / 8][(${r}) % 8 / 4][(${r}) % 8 % 4]`:`${e}[(${r}) / 4][(${r}) % 4]`:s==="f16"?`${e}[${Math.floor(r/8)}][${Math.floor(r%8/4)}][${r%8%4}]`:`${e}[${Math.floor(r/4)}][${r%4}]`:t>1?`${e}[${r}]`:e,zo=(e,r,t,s,o)=>{let n=typeof t=="number",i=n?t:t.length,a=[...new Array(i).keys()],l=i<2?"u32":i<=4?`vec${i}<u32>`:`array<u32, ${i}>`,u=Xi(r,o),p=typeof u=="string"?u:u[1],c=typeof u=="string"?u:u[0],d={indices:l,value:p,storage:c,tensor:r},_=V=>typeof V=="string"?V:`${V}u`,f={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},T=n?"uniforms.":"",I=`${T}${e}_shape`,g=`${T}${e}_strides`,w="";for(let V=0;V<i-1;V++)w+=`
    let dim${V} = current / ${ot(g,V,i)};
    let rest${V} = current % ${ot(g,V,i)};
    indices[${V}] = dim${V};
    current = rest${V};
    `;w+=`indices[${i-1}] = current;`;let S=i<2?"":`
  fn o2i_${e}(offset: u32) -> ${d.indices} {
    var indices: ${d.indices};
    var current = offset;
    ${w}
    return indices;
  }`,E=V=>(f.offsetToIndices=!0,i<2?V:`o2i_${e}(${V})`),v=[];if(i>=2)for(let V=i-1;V>=0;V--)v.push(`${ot(g,V,i)} * (indices[${V}])`);let M=i<2?"":`
  fn i2o_${e}(indices: ${d.indices}) -> u32 {
    return ${v.join("+")};
  }`,y=V=>(f.indicesToOffset=!0,i<2?V:`i2o_${e}(${V})`),C=(...V)=>i===0?"0u":`${d.indices}(${V.map(_).join(",")})`,F=(V,A)=>i<2?`${V}`:`${ot(V,A,i)}`,z=(V,A,U)=>i<2?`${V}=${U};`:`${ot(V,A,i)}=${U};`,K={},q=(V,A)=>{f.broadcastedIndicesToOffset=!0;let U=`${A.name}broadcastedIndicesTo${e}Offset`;if(U in K)return`${U}(${V})`;let ee=[];for(let _e=i-1;_e>=0;_e--){let le=A.indicesGet("outputIndices",_e+A.rank-i);ee.push(`${F(g,_e)} * (${le} % ${F(I,_e)})`)}return K[U]=`fn ${U}(outputIndices: ${A.type.indices}) -> u32 {
             return ${ee.length>0?ee.join("+"):"0u"};
           }`,`${U}(${V})`},R=(V,A)=>(()=>{if(d.storage===d.value)return`${e}[${V}]=${A};`;if(d.storage==="vec2<u32>"&&d.value==="i32")return`${e}[${V}]=vec2<u32>(u32(${A}), select(0u, 0xFFFFFFFFu, ${A} < 0));`;if(d.storage==="vec2<u32>"&&d.value==="u32")return`${e}[${V}]=vec2<u32>(u32(${A}), 0u);`;if(d.storage==="u32"&&d.value==="vec4<bool>")return`${e}[${V}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${A}));`;throw new Error(`not supported combination of storage type ${d.storage} and value type ${d.value} yet`)})(),Z=V=>(()=>{if(d.storage===d.value)return`${e}[${V}]`;if(d.storage==="vec2<u32>"&&d.value==="i32")return`i32(${e}[${V}].x)`;if(d.storage==="vec2<u32>"&&d.value==="u32")return`u32(${e}[${V}].x)`;if(d.storage==="u32"&&d.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${V}] & 0xFFu), bool(${e}[${V}] & 0xFF00u), bool(${e}[${V}] & 0xFF0000u), bool(${e}[${V}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${d.storage} and value type ${d.value} yet`)})(),H=i<2?"":`
  fn get_${e}ByIndices(indices: ${d.indices}) -> ${p} {
    return ${Z(`i2o_${e}(indices)`)};
  }`,J=i<2?"":(()=>{let V=a.map(U=>`d${U}: u32`).join(", "),A=a.map(U=>`d${U}`).join(", ");return`
  fn get_${e}(${V}) -> ${p} {
    return get_${e}ByIndices(${C(A)});
  }`})(),Q=(...V)=>{if(V.length!==i)throw new Error(`indices length must be ${i}`);let A=V.map(_).join(",");return i===0?Z("0u"):i===1?Z(A[0]):(f.get=!0,f.getByIndices=!0,f.indicesToOffset=!0,`get_${e}(${A})`)},se=V=>i<2?Z(V):(f.getByIndices=!0,f.indicesToOffset=!0,`get_${e}ByIndices(${V})`),fe=i<2?"":`
  fn set_${e}ByIndices(indices: ${d.indices}, value: ${p}) {
    ${R(`i2o_${e}(indices)`,"value")}
  }`,ae=i<2?"":(()=>{let V=a.map(U=>`d${U}: u32`).join(", "),A=a.map(U=>`d${U}`).join(", ");return`
  fn set_${e}(${V}, value: ${p}) {
    set_${e}ByIndices(${C(A)}, value);
  }`})();return{impl:()=>{let V=[],A=!1;return f.offsetToIndices&&(V.push(S),A=!0),f.indicesToOffset&&(V.push(M),A=!0),f.broadcastedIndicesToOffset&&(Object.values(K).forEach(U=>V.push(U)),A=!0),f.set&&(V.push(ae),A=!0),f.setByIndices&&(V.push(fe),A=!0),f.get&&(V.push(J),A=!0),f.getByIndices&&(V.push(H),A=!0),!n&&A&&V.unshift(`const ${I} = ${d.indices}(${t.join(",")});`,`const ${g} = ${d.indices}(${be.computeStrides(t).join(",")});`),V.join(`
`)},type:d,offsetToIndices:E,indicesToOffset:y,broadcastedIndicesToOffset:q,indices:C,indicesGet:F,indicesSet:z,set:(...V)=>{if(V.length!==i+1)throw new Error(`indices length must be ${i}`);let A=V[i];if(typeof A!="string")throw new Error("value must be string");let U=V.slice(0,i).map(_).join(",");return i===0?R("0u",A):i===1?R(U[0],A):(f.set=!0,f.setByIndices=!0,f.indicesToOffset=!0,`set_${e}(${U}, ${A})`)},setByOffset:R,setByIndices:(V,A)=>i<2?R(V,A):(f.setByIndices=!0,f.indicesToOffset=!0,`set_${e}ByIndices(${V}, ${A});`),get:Q,getByOffset:Z,getByIndices:se,usage:s,name:e,strides:g,shape:I,rank:i}},Ce=(e,r,t,s=1)=>zo(e,r,t,"input",s),tt=(e,r,t,s=1)=>zo(e,r,t,"output",s),NM=(e,r,t)=>zo(e,r,t,"atomicOutput",1),ic=(e,r,t,s=1)=>zo(e,r,t,"internal",s),Xf=class{constructor(e,r){this.normalizedDispatchGroup=e,this.limits=r,this.internalVariables=[],this.variables=[],this.uniforms=[],this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(e){return`if (global_idx >= ${typeof e=="number"?`${e}u`:e}) { return; }`}mainStart(e=to){let r=typeof e=="number"?e:e[0],t=typeof e=="number"?1:e[1],s=typeof e=="number"?1:e[2];if(r>this.limits.maxComputeWorkgroupSizeX||t>this.limits.maxComputeWorkgroupSizeY||s>this.limits.maxComputeWorkgroupSizeZ)throw new Error(`workgroup size [${r}, ${t}, ${s}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);if(r*t*s>this.limits.maxComputeInvocationsPerWorkgroup)throw new Error(`workgroup size [${r}, ${t}, ${s}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);let o=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,n=o?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(global_invocation_id) global_id : vec3<u32>,
                                             @builtin(local_invocation_id) local_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,i=o?`let global_idx = global_id.x;
         let workgroup_index = workgroup_id.x;`:`let workgroup_index = workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
             workgroup_id.y * num_workgroups[0] + workgroup_id.x;
         let global_idx = workgroup_index * ${r*t*s}u + local_idx;`;return`@compute @workgroup_size(${r}, ${t}, ${s})
  fn main(${n}) {
    ${i}
  `}appendVariableUniforms(e){e.rank!==0&&(e.shape.startsWith("uniforms.")&&this.uniforms.push({name:e.shape.replace("uniforms.",""),type:"u32",length:e.rank}),e.strides.startsWith("uniforms.")&&this.uniforms.push({name:e.strides.replace("uniforms.",""),type:"u32",length:e.rank}))}declareVariable(e,r){if(e.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(e),this.appendVariableUniforms(e);let t=e.usage==="input"?"read":"read_write",s=e.usage==="atomicOutput"?"atomic<i32>":e.type.storage;return`@group(0) @binding(${r}) var<storage, ${t}> ${e.name}: array<${s}>;`}declareVariables(...e){return e.map(r=>this.declareVariable(r,this.variableIndex++)).join(`
`)}registerInternalVariable(e){if(e.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(e),this.appendVariableUniforms(e)}registerInternalVariables(...e){return e.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(e,r,t=1){return this.uniforms.push({name:e,type:r,length:t}),this}registerUniforms(e){return this.uniforms=this.uniforms.concat(e),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let e=[];for(let{name:r,type:t,length:s}of this.uniforms)if(s&&s>4)t==="f16"?e.push(`@align(16) ${r}:array<mat2x4<${t}>, ${Math.ceil(s/8)}>`):e.push(`${r}:array<vec4<${t}>, ${Math.ceil(s/4)}>`);else{let o=s==null||s===1?t:`vec${s}<${t}>`;e.push(`${r}:${o}`)}return`
      struct Uniforms { ${e.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(e=>e.impl()).join(`
`)+this.internalVariables.map(e=>e.impl()).join(`
`)}get variablesInfo(){if(this.uniforms.length===0)return;let e=r=>[12,10,1,6][["u32","f16","f32","i32"].indexOf(r)];return this.uniforms.map(r=>[e(r.type),r.length??1])}},VM=(e,r)=>new Xf(e,r)}),Jf,Ql,Yf,Zf,e_,t_,Jr,UM,WM,Zs=je(()=>{ft(),xt(),lr(),Tt(),Jf=(e,r)=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.");if(r.length!==0&&r.length!==e[0].dims.length)throw new Error(`perm size ${r.length} does not match input rank ${e[0].dims.length}`)},Ql=(e,r)=>r.length!==0?r:[...new Array(e).keys()].reverse(),Yf=(e,r)=>be.sortBasedOnPerm(e,Ql(e.length,r)),Zf=(e,r,t,s)=>{let o=`fn perm(i: ${s.type.indices}) -> ${t.type.indices} {
    var a: ${t.type.indices};`;for(let n=0;n<r;++n)o+=`a[${e[n]}]=i[${n}];`;return o+="return a;}"},e_=(e,r)=>{let t=[],s=[];for(let o=0;o<e.length;++o)e[o]!==1&&t.push(e[o]),e[r[o]]!==1&&s.push(r[o]);return{newShape:t,newPerm:s}},t_=(e,r)=>{let t=0;for(let s=0;s<e.length;++s)if(r[e[s]]!==1){if(e[s]<t)return!1;t=e[s]}return!0},Jr=(e,r)=>{let t=e.dataType,s=e.dims.length,o=Ql(s,r),n=Yf(e.dims,o),i=e.dims,a=n,l=s<2||t_(o,e.dims),u;if(l)return u=f=>{let T=Ce("input",t,i,4),I=tt("output",t,a,4);return`
  ${f.registerUniform("output_size","u32").declareVariables(T,I)}
  ${f.mainStart()}
    ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    output[global_idx] = input[global_idx];
  }`},{name:"TransposeCopy",shaderCache:{inputDependencies:["type"]},getRunData:()=>{let f=be.size(n);return{outputs:[{dims:n,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(f/64/4)},programUniforms:[{type:12,data:Math.ceil(f/4)}]}},getShaderSource:u};let{newShape:p,newPerm:c}=e_(e.dims,o),d=be.areEqual(c,[2,3,1]),_=be.areEqual(c,[3,1,2]);if(p.length===2||d||_){i=d?[p[0],p[1]*p[2]]:_?[p[0]*p[1],p[2]]:p,a=[i[1],i[0]];let f=16;return u=T=>{let I=Ce("a",t,i.length),g=tt("output",t,a.length);return`
  ${T.registerUniform("output_size","u32").declareVariables(I,g)}
  var<workgroup> tile : array<array<${g.type.value}, ${f+1}>, ${f}>;
  ${T.mainStart([f,f,1])}
    let stride = (uniforms.output_shape[1] - 1) / ${f} + 1;
    let workgroup_id_x = workgroup_index % stride;
    let workgroup_id_y = workgroup_index / stride;
    let input_col = workgroup_id_y * ${f}u + local_id.x;
    let input_row = workgroup_id_x * ${f}u + local_id.y;
    if (input_row < uniforms.a_shape[0] && input_col < uniforms.a_shape[1]) {
      tile[local_id.y][local_id.x] = ${I.getByIndices(`${I.type.indices}(input_row, input_col)`)};
    }
    workgroupBarrier();

    let output_col = workgroup_id_x * ${f}u + local_id.x;
    let output_row = workgroup_id_y * ${f}u + local_id.y;
    if (output_row < uniforms.output_shape[0] && output_col < uniforms.output_shape[1]) {
      ${g.setByIndices(`${g.type.indices}(output_row, output_col)`,"tile[local_id.x][local_id.y]")}
    }
  }`},{name:"TransposeShared",shaderCache:{inputDependencies:["type"]},getRunData:()=>{let T=be.size(n);return{outputs:[{dims:n,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(a[1]/f),y:Math.ceil(a[0]/f)},programUniforms:[{type:12,data:T},...ut(i,a)]}},getShaderSource:u}}return u=f=>{let T=Ce("a",t,i.length),I=tt("output",t,a.length);return`
  ${f.registerUniform("output_size","u32").declareVariables(T,I)}

  ${Zf(o,s,T,I)}

  ${f.mainStart()}
    ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${I.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${I.setByOffset("global_idx",T.getByIndices("aIndices"))}
  }`},{name:"Transpose",shaderCache:{hint:`${r}`,inputDependencies:["rank"]},getRunData:()=>{let f=be.size(n);return{outputs:[{dims:n,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(f/64)},programUniforms:[{type:12,data:f},...ut(i,a)]}},getShaderSource:u}},UM=(e,r)=>{Jf(e.inputs,r.perm),e.compute(Jr(e.inputs[0],r.perm))},WM=e=>Nt({perm:e.perm})}),r_,s_,n_,o_,i_,a_,l_,u_,c_,d_,_s,GM,KM,HM,qM,QM,XM,JM,YM,ZM,eb,Yv=je(()=>{ft(),xt(),Tt(),ac(),Zs(),r_={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},s_={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},n_={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},o_={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},i_=(e,r)=>{let t=[];for(let s=r-e;s<r;++s)t.push(s);return t},a_=(e,r)=>{let t=[],s=e.length;for(let n=0;n<s;n++)r.indexOf(n)===-1&&t.push(e[n]);let o=r.map(n=>e[n]);return[t,o]},l_=(e,r)=>{let t=e.length+r.length,s=[],o=0;for(let n=0;n<t;n++)r.indexOf(n)===-1?s.push(e[o++]):s.push(1);return s},u_=(e,r)=>{for(let t=0;t<e.length;++t)if(e[e.length-t-1]!==r-1-t)return!1;return!0},c_=(e,r)=>{let t=[];if(!u_(e,r)){for(let s=0;s<r;++s)e.indexOf(s)===-1&&t.push(s);e.forEach(s=>t.push(s))}return t},d_=(e,r,t,s,o,n,i)=>{let a=t[0].dims,l=be.size(n),u=be.size(i),p=Ce("_A",t[0].dataType,a),c=tt("output",o,n),d=64;l===1&&(d=256);let _=`
          var<workgroup> aBestValues : array<f32, ${d}>;
       `,f=T=>`
        ${T.registerUniform("reduceSize","u32").declareVariables(p,c)}
        ${_}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${T.mainStart(d)}

          let outputIndex = global_idx / ${d};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = f32(${n_[s]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${d}) {
           let candidate = f32(${p.getByOffset("offset + k")});
           bestValue = ${r_[s]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${d}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${s_[s]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${c.setByOffset("outputIndex",`${s==="mean"?`${c.type.storage}(bestValue / f32(uniforms.reduceSize))`:`${c.type.storage}(${o_[s]})`}`)};
         }
        }`;return{name:e,shaderCache:{hint:`${r};${d}`,inputDependencies:["type"]},getShaderSource:f,getRunData:()=>({outputs:[{dims:n,dataType:o}],dispatchGroup:{x:l},programUniforms:[{type:12,data:u}]})}},_s=(e,r,t,s)=>{let o=e.inputs.length===1?t:Du(e.inputs,t),n=o.axes;n.length===0&&!o.noopWithEmptyAxes&&(n=e.inputs[0].dims.map((_,f)=>f));let i=be.normalizeAxes(n,e.inputs[0].dims.length),a=i,l=e.inputs[0],u=c_(a,e.inputs[0].dims.length);u.length>0&&(l=e.compute(Jr(e.inputs[0],u),{inputs:[0],outputs:[-1]})[0],a=i_(a.length,l.dims.length));let[p,c]=a_(l.dims,a),d=p;o.keepDims&&(d=l_(p,i)),e.compute(d_(r,o.cacheKey,[l],s,e.inputs[0].dataType,d,c),{inputs:[l]})},GM=(e,r)=>{_s(e,"ReduceMeanShared",r,"mean")},KM=(e,r)=>{_s(e,"ReduceL1Shared",r,"l1")},HM=(e,r)=>{_s(e,"ReduceL2Shared",r,"l2")},qM=(e,r)=>{_s(e,"ReduceLogSumExpShared",r,"logSumExp")},QM=(e,r)=>{_s(e,"ReduceMaxShared",r,"max")},XM=(e,r)=>{_s(e,"ReduceMinShared",r,"min")},JM=(e,r)=>{_s(e,"ReduceProdShared",r,"prod")},YM=(e,r)=>{_s(e,"ReduceSumShared",r,"sum")},ZM=(e,r)=>{_s(e,"ReduceSumSquareShared",r,"sumSquare")},eb=(e,r)=>{_s(e,"ReduceLogSumShared",r,"logSum")}}),gs,p_,da,Du,ws,h_,m_,f_,__,g_,w_,M_,b_,y_,v_,Ms,tb,rb,sb,nb,ob,ib,ab,lb,ub,cb,ac=je(()=>{ft(),xt(),lr(),Tt(),Yv(),gs=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},p_=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],da=(e,r,t,s,o,n,i=!1,a=!1)=>{let l=[],u=t[0].dims,p=u.length,c=be.normalizeAxes(o,p),d=!a&&c.length===0;u.forEach((T,I)=>{d||c.indexOf(I)>=0?i&&l.push(1):l.push(T)});let _=l.length,f=be.size(l);return{name:e,shaderCache:r,getShaderSource:T=>{let I=[],g=Ce("_A",t[0].dataType,p),w=tt("output",n,_),S=s(g,w,c),E=S[2];for(let v=0,M=0;v<p;v++)d||c.indexOf(v)>=0?(i&&M++,E=`for(var j${v}: u32 = 0; j${v} < ${u[v]}; j${v}++) {
                  ${S[2].includes("last_index")?`let last_index = j${v};`:""}
                  ${g.indicesSet("input_indices",v,`j${v}`)}
                  ${E}
                }`):(I.push(`${g.indicesSet("input_indices",v,w.indicesGet("output_indices",M))};`),M++);return`

        ${T.registerUniform("output_size","u32").declareVariables(g,w)}

        ${T.mainStart()}
          ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var input_indices: ${g.type.indices};
          let output_indices = ${w.offsetToIndices("global_idx")};

          ${I.join(`
`)}
          ${S[0]}       // init ops for reduce max/min
          ${S[1]}
          ${E}
          ${S[3]}
          ${S.length===4?w.setByOffset("global_idx","value"):S.slice(4).join(`
`)}
        }`},getRunData:()=>({outputs:[{dims:l,dataType:n}],dispatchGroup:{x:Math.ceil(f/64)},programUniforms:[{type:12,data:f},...ut(u,l)]})}},Du=(e,r)=>{let t=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(s=>t.push(Number(s))),Nt({axes:t,keepDims:r.keepDims,noopWithEmptyAxes:r.noopWithEmptyAxes})},ws=(e,r,t,s)=>{let o=e.inputs,n=o.length===1?t:Du(o,t);e.compute(da(r,{hint:n.cacheKey,inputDependencies:["rank"]},[o[0]],n.noopWithEmptyAxes&&n.axes.length===0?p_:s,n.axes,o[0].dataType,n.keepDims,n.noopWithEmptyAxes),{inputs:[0]})},h_=(e,r)=>{gs(e.inputs),ws(e,"ReduceLogSum",r,(t,s)=>[`var value = ${s.type.storage}(0);`,"",`value += ${t.getByIndices("input_indices")};`,"value = log(value);"])},m_=(e,r)=>{gs(e.inputs),ws(e,"ReduceL1",r,(t,s)=>[`var value = ${s.type.storage}(0);`,"",`value += abs(${t.getByIndices("input_indices")});`,""])},f_=(e,r)=>{gs(e.inputs),ws(e,"ReduceL2",r,(t,s)=>[`var t = ${s.type.value}(0); var value = ${s.type.value}(0);`,"",`t = ${t.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},__=(e,r)=>{gs(e.inputs),ws(e,"ReduceLogSumExp",r,(t,s)=>[`var value = ${s.type.storage}(0);`,"",`value += exp(${t.getByIndices("input_indices")});`,"value = log(value);"])},g_=(e,r)=>{gs(e.inputs),ws(e,"ReduceMax",r,(t,s,o)=>{let n=[];for(let i=0;i<t.rank;i++)(o.indexOf(i)>=0||o.length===0)&&n.push(t.indicesSet("input_indices",i,0));return[`${n.join(`
`)}`,`var value = ${t.getByIndices("input_indices")};`,`value = max(value, ${t.getByIndices("input_indices")});`,""]})},w_=(e,r)=>{gs(e.inputs),ws(e,"ReduceMean",r,(t,s,o)=>{let n=1;for(let i=0;i<t.rank;i++)(o.indexOf(i)>=0||o.length===0)&&(n*=e.inputs[0].dims[i]);return["var sum = f32(0);","",`sum += f32(${t.getByIndices("input_indices")});`,`let value = ${s.type.value}(sum / ${n});`]})},M_=(e,r)=>{gs(e.inputs),ws(e,"ReduceMin",r,(t,s,o)=>{let n=[];for(let i=0;i<t.rank;i++)(o.indexOf(i)>=0||o.length===0)&&n.push(`input_indices[${i}] = 0;`);return[`${n.join(`
`)}`,`var value = ${t.getByIndices("input_indices")};`,`value = min(value, ${t.getByIndices("input_indices")});`,""]})},b_=(e,r)=>{gs(e.inputs),ws(e,"ReduceProd",r,(t,s)=>[`var value = ${s.type.storage}(1);`,"",`value *= ${t.getByIndices("input_indices")};`,""])},y_=(e,r)=>{gs(e.inputs),ws(e,"ReduceSum",r,(t,s)=>[`var value = ${s.type.storage}(0);`,"",`value += ${t.getByIndices("input_indices")};`,""])},v_=(e,r)=>{gs(e.inputs),ws(e,"ReduceSumSquare",r,(t,s)=>[`var t = ${s.type.value}(0); var value = ${s.type.value}(0);`,"",`t = ${t.getByIndices("input_indices")}; value += t * t;`,""])},Ms=(e,r,t)=>{if(r.length===0)return t;let s=1,o=1;for(let n=0;n<r.length;n++)r.indexOf(n)===-1?s*=e[n]:o*=e[n];return o<32&&s>1024},tb=(e,r)=>{Ms(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?w_(e,r):GM(e,r)},rb=(e,r)=>{Ms(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?m_(e,r):KM(e,r)},sb=(e,r)=>{Ms(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?f_(e,r):HM(e,r)},nb=(e,r)=>{Ms(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?__(e,r):qM(e,r)},ob=(e,r)=>{Ms(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?g_(e,r):QM(e,r)},ib=(e,r)=>{Ms(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?M_(e,r):XM(e,r)},ab=(e,r)=>{Ms(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?b_(e,r):JM(e,r)},lb=(e,r)=>{Ms(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?y_(e,r):YM(e,r)},ub=(e,r)=>{Ms(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?v_(e,r):ZM(e,r)},cb=(e,r)=>{Ms(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?h_(e,r):eb(e,r)}}),Xl,db,pb,Lu,Zv=je(()=>{ft(),lr(),ac(),Xl=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},db=(e,r)=>{Xl(e.inputs);let t=(s,o,n)=>{let i=[];for(let a=0;a<s.rank;a++)(n.indexOf(a)>=0||n.length===0)&&i.push(`input_indices[${a}] = 0;`);return[`${i.join(`
`)}`,`var value = ${s.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${s.getByIndices("input_indices")} ${r.selectLastIndex>0?"<=":"<"} value) {
         value = ${s.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",o.setByOffset("global_idx","best_index")]};e.compute(da("ArgMin",{hint:r.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],t,[r.axis],7,r.keepDims),{inputs:[0]})},pb=(e,r)=>{Xl(e.inputs);let t=(s,o,n)=>{let i=[];for(let a=0;a<s.rank;a++)(n.indexOf(a)>=0||n.length===0)&&i.push(`input_indices[${a}] = 0;`);return[`${i.join(`
`)}`,`var value = ${s.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${s.getByIndices("input_indices")} ${r.selectLastIndex>0?">=":">"} value) {
         value = ${s.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",o.setByOffset("global_idx","best_index")]};e.compute(da("argMax",{hint:r.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],t,[r.axis],7,r.keepDims),{inputs:[0]})},Lu=e=>Nt(e)}),x_,Ji,T_,E_,P_,Jo,C_,hb,lc=je(()=>{ft(),xt(),oc(),Tt(),x_=(e,r)=>{let t=e[0],s=e[1],o=e[2],n=e[3],i=e[4],a=e[5];if(i&&a)throw new Error("Attention cannot have both past and attention_bias");if(t.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let l=t.dims[0],u=t.dims[1],p=t.dims[2];if(o.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(s.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(s.dims[0]!==p)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(o.dims[0]!==s.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let c=o.dims[0]/3,d=c,_=d;if(r.qkvHiddenSizes.length>0){if(r.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let S of r.qkvHiddenSizes)if(S%r.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");c=r.qkvHiddenSizes[0],d=r.qkvHiddenSizes[1],_=r.qkvHiddenSizes[2]}let f=u;if(c!==d)throw new Error("qkv_hidden_sizes first element should be same as the second");if(o.dims[0]!==c+d+_)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let T=0;if(i){if(d!==_)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(i.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(i.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(i.dims[1]!==l)throw new Error('Input "past" second dimension must be batch_size');if(i.dims[2]!==r.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(i.dims[4]!==d/r.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');r.pastPresentShareBuffer||(T=i.dims[3])}let I=f+T,g=-1,w=0;if(n)throw new Error("Mask not supported");if(i)throw new Error("past is not supported");if(a){if(a.dims.length!==4)throw new Error('Input "attention_bias" must have 4 dimensions');if(a.dims[0]!==l||a.dims[1]!==r.numHeads||a.dims[2]!==u||a.dims[3]!==I)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:l,sequenceLength:u,pastSequenceLength:T,kvSequenceLength:f,totalSequenceLength:I,maxSequenceLength:g,inputHiddenSize:p,hiddenSize:c,vHiddenSize:_,headSize:Math.floor(c/r.numHeads),vHeadSize:Math.floor(_/r.numHeads),numHeads:r.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:r.maskFilterValue,maskType:w,scale:r.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Ji=(e,r,t)=>r&&e?`
      let total_sequence_length_input = u32(${r.getByOffset("0")});
      let present_sequence_length = max(total_sequence_length_input, uniforms.past_sequence_length);
      let is_subsequent_prompt: bool = sequence_length > 1 && sequence_length != total_sequence_length_input;
      let is_first_prompt: bool = is_subsequent_prompt == false && sequence_length == total_sequence_length_input;
      total_sequence_length = u32(${e==null?void 0:e.getByOffset("batchIdx")}) + 1;
      var past_sequence_length: u32 = 0;
      if (is_first_prompt == false) {
        past_sequence_length = total_sequence_length - sequence_length;
      }
       `:`
    ${t?"let past_sequence_length = uniforms.past_sequence_length":""};
    let present_sequence_length = total_sequence_length;
    `,T_=(e,r,t,s,o,n,i,a)=>{let l=nr(i?1:n),u=64,p=n/l;p<u&&(u=32);let c=Math.ceil(n/l/u),d=[{type:12,data:r},{type:12,data:t},{type:12,data:s},{type:12,data:o},{type:12,data:p},{type:12,data:c}],_=$r(e.dataType,l),f=Rr(1,l),T=["type"];i&&T.push("type"),a&&T.push("type");let I=g=>{let w=tt("x",e.dataType,e.dims,l),S=[w],E=i?Ce("seq_lens",i.dataType,i.dims):void 0;E&&S.push(E);let v=a?Ce("total_sequence_length_input",a.dataType,a.dims):void 0;v&&S.push(v);let M=Rr(e.dataType),y=[{name:"batch_size",type:"u32"},{name:"num_heads",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"sequence_length",type:"u32"},{name:"total_sequence_length",type:"u32"},{name:"elements_per_thread",type:"u32"}];return`
  var<workgroup> thread_max: array<f32, ${u}>;
  var<workgroup> thread_sum: array<f32, ${u}>;
  ${g.registerUniforms(y).declareVariables(...S)}
  ${g.mainStart([u,1,1])}
    let batchIdx = workgroup_id.z / uniforms.num_heads;
    let headIdx = workgroup_id.z % uniforms.num_heads;
    let sequence_length = uniforms.sequence_length;
    var total_sequence_length = uniforms.total_sequence_length;
    ${Ji(E,v,!1)}
    let local_offset = local_idx * uniforms.elements_per_thread;
    let offset = (global_idx / ${u}) * uniforms.total_sequence_length + local_offset;
    let seq_causal_length = ${i?"u32(past_sequence_length + workgroup_id.y + 1)":"total_sequence_length"};
    var thread_max_vector = ${f}(-3.402823e+38f);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
      thread_max_vector = max(${f}(x[offset + i]), thread_max_vector);
    }
    thread_max[local_idx] = ${(()=>{switch(l){case 1:return"thread_max_vector";case 2:return"max(thread_max_vector.x, thread_max_vector.y)";case 4:return"max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))";default:throw new Error(`Unsupported components: ${l}`)}})()};
    workgroupBarrier();

    var max_value =  f32(-3.402823e+38f);
    for (var i = 0u; i < ${u}; i++) {
      max_value = max(thread_max[i], max_value);
    }

    var sum_vector = ${f}(0);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
      sum_vector += exp(${f}(x[offset + i]) - max_value);
    }
    thread_sum[local_idx] = ${(()=>{switch(l){case 1:return"sum_vector";case 2:return"sum_vector.x + sum_vector.y";case 4:return"sum_vector.x + sum_vector.y + sum_vector.z + sum_vector.w";default:throw new Error(`Unsupported components: ${l}`)}})()};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${u}; i++) {
      sum += thread_sum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
        x[offset + i] = ${w.type.value}(${M}(1.0) / ${M}(seq_causal_length));
      }
    } else {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
        var f32input = ${f}(x[offset + i]);
        x[offset + i] = ${w.type.value}(exp(f32input - max_value) / sum);
      }
    }
      ${i?`
        for (var total_seq_id: u32 = seq_causal_length; total_seq_id + local_offset < uniforms.total_sequence_length; total_seq_id++) {
          x[offset + total_seq_id] = ${w.type.value}(${M}(0));
        }`:""};
  }`};return{name:"AttentionProbsSoftmax",shaderCache:{hint:`${u};${_};${l}`,inputDependencies:T},getShaderSource:I,getRunData:()=>({outputs:[],dispatchGroup:{x:1,y:o,z:r*t},programUniforms:d})}},E_=(e,r,t,s,o,n,i,a,l)=>{let u=i+n.kvSequenceLength,p=[n.batchSize,n.numHeads,n.sequenceLength,u],c=e>1&&s,d=n.kvNumHeads?n.kvNumHeads:n.numHeads,_=c?[n.batchSize,d,u,n.headSize]:void 0,f=n.nReps?n.nReps:1,T=n.scale===0?1/Math.sqrt(n.headSize):n.scale,I=nr(n.headSize),g=n.headSize/I,w=12,S={x:Math.ceil(u/w),y:Math.ceil(n.sequenceLength/w),z:n.batchSize*n.numHeads},E=[{type:12,data:n.sequenceLength},{type:12,data:g},{type:12,data:u},{type:12,data:n.numHeads},{type:12,data:n.headSize},{type:1,data:T},{type:12,data:i},{type:12,data:n.kvSequenceLength},{type:12,data:f}],v=c&&s&&be.size(s.dims)>0,M=["type","type"];v&&M.push("type"),o&&M.push("type"),a&&M.push("type"),l&&M.push("type");let y=[{dims:p,dataType:r.dataType,gpuDataType:0}];c&&y.push({dims:_,dataType:r.dataType,gpuDataType:0});let C=F=>{let z=Ce("q",r.dataType,r.dims,I),K=Ce("key",t.dataType,t.dims,I),q=[z,K];if(v){let fe=Ce("past_key",s.dataType,s.dims,I);q.push(fe)}o&&q.push(Ce("attention_bias",o.dataType,o.dims));let R=a?Ce("seq_lens",a.dataType,a.dims):void 0;R&&q.push(R);let Z=l?Ce("total_sequence_length_input",l.dataType,l.dims):void 0;Z&&q.push(Z);let H=tt("output",r.dataType,p),J=[H];c&&J.push(tt("present_key",r.dataType,_,I));let Q=Rr(1,I),se=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"alpha",type:"f32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"n_reps",type:"u32"}];return`
  const TILE_SIZE = ${w}u;

  var<workgroup> tileQ: array<${z.type.storage}, ${w*w}>;
  var<workgroup> tileK: array<${z.type.storage}, ${w*w}>;
  ${F.registerUniforms(se).declareVariables(...q,...J)}
  ${F.mainStart([w,w,1])}
    // x holds the N and y holds the M
    let headIdx = workgroup_id.z % uniforms.num_heads;
    let kvHeadIdx = ${f===1?"headIdx":"headIdx / uniforms.n_reps"};
    let kv_num_heads = ${f===1?"uniforms.num_heads":"uniforms.num_heads / uniforms.n_reps"};
    let batchIdx = workgroup_id.z / uniforms.num_heads;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let sequence_length = uniforms.M;
    var total_sequence_length = uniforms.N;
    ${Ji(R,Z,!0)}
    let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx;
    let qOffset = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;
    ${v&&c?"let pastKeyOffset = absKvHeadIdx * uniforms.past_sequence_length * uniforms.K;":""};
    let kOffset = absKvHeadIdx * uniforms.kv_sequence_length * uniforms.K;
    ${c?"let presentKeyOffset = absKvHeadIdx * uniforms.N * uniforms.K;":""}
    var value = ${Q}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
      ${v&&c?`
              if (n + local_id.y < past_sequence_length) {
                tileK[idx] = past_key[pastKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
              } else if (n + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {
                tileK[idx] = key[kOffset + (n + local_id.y - past_sequence_length) * uniforms.K + w + local_id.x];
              }`:`
          if (n + local_id.y < uniforms.kv_sequence_length) {
            tileK[idx] = key[kOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
          }`}
      ${c?`if (n + local_id.y < present_sequence_length) {
        present_key[presentKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x] = tileK[idx];
      }`:""}
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {
          value += ${Q}(tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k]);
      }

      workgroupBarrier();
    }

    if (global_id.y < uniforms.M && global_id.x < total_sequence_length) {
      let headOffset = workgroup_id.z * uniforms.M * uniforms.N;
      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;
      var sum: f32 = ${(()=>{switch(I){case 1:return"value";case 2:return"value.x + value.y";case 4:return"value.x + value.y + value.z + value.w";default:throw new Error(`Unsupported components: ${I}`)}})()};
        output[outputIdx] = ${H.type.value} (sum * uniforms.alpha) + ${o?"attention_bias[outputIdx]":"0.0"};
    }
  }`};return{name:"AttentionProbs",shaderCache:{hint:`${I};${o!==void 0};${s!==void 0};${e}`,inputDependencies:M},getRunData:()=>({outputs:y,dispatchGroup:S,programUniforms:E}),getShaderSource:C}},P_=(e,r,t,s,o,n,i=void 0,a=void 0)=>{let l=n+o.kvSequenceLength,u=o.nReps?o.nReps:1,p=o.vHiddenSize*u,c=e>1&&s,d=o.kvNumHeads?o.kvNumHeads:o.numHeads,_=c?[o.batchSize,d,l,o.headSize]:void 0,f=[o.batchSize,o.sequenceLength,p],T=12,I={x:Math.ceil(o.vHeadSize/T),y:Math.ceil(o.sequenceLength/T),z:o.batchSize*o.numHeads},g=[{type:12,data:o.sequenceLength},{type:12,data:l},{type:12,data:o.vHeadSize},{type:12,data:o.numHeads},{type:12,data:o.headSize},{type:12,data:p},{type:12,data:n},{type:12,data:o.kvSequenceLength},{type:12,data:u}],w=c&&s&&be.size(s.dims)>0,S=["type","type"];w&&S.push("type"),i&&S.push("type"),a&&S.push("type");let E=[{dims:f,dataType:r.dataType,gpuDataType:0}];c&&E.push({dims:_,dataType:r.dataType,gpuDataType:0});let v=M=>{let y=Ce("probs",r.dataType,r.dims),C=Ce("v",t.dataType,t.dims),F=[y,C];w&&F.push(Ce("past_value",s.dataType,s.dims));let z=i?Ce("seq_lens",i.dataType,i.dims):void 0;i&&F.push(z);let K=a?Ce("total_sequence_length_input",a.dataType,a.dims):void 0;a&&F.push(K);let q=[tt("output",r.dataType,f)];c&&q.push(tt("present_value",r.dataType,_));let R=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"v_hidden_size",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"n_reps",type:"u32"}];return`
  const TILE_SIZE = ${T}u;
  var<workgroup> tileQ: array<${y.type.value}, ${T*T}>;
  var<workgroup> tileV: array<${y.type.value}, ${T*T}>;
  ${M.registerUniforms(R).declareVariables(...F,...q)}
  ${M.mainStart([T,T,1])}
   let headIdx = workgroup_id.z % uniforms.num_heads;
   let batchIdx = workgroup_id.z / uniforms.num_heads;
   let kvHeadIdx = ${u===1?"headIdx":"headIdx / uniforms.n_reps"};
   let kv_num_heads = ${u===1?"uniforms.num_heads":"uniforms.num_heads / uniforms.n_reps"};
   let m = global_id.y;
   let n = global_id.x;
   let sequence_length = uniforms.M;
   var total_sequence_length = uniforms.K;
   ${Ji(z,K,!0)}
   let offsetA = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;
   let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx; // kvHeadIdx is relative to the batch
   ${w&&c?"let pastValueOffset = absKvHeadIdx * uniforms.N * uniforms.past_sequence_length + n;":""};
   let vOffset = absKvHeadIdx * uniforms.N * uniforms.kv_sequence_length + n;
   ${c?"let presentValueOffset = absKvHeadIdx * uniforms.N * uniforms.K + n;":""}
   var value = ${y.type.storage}(0);
   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
        ${w&&c?`
        if (w + local_id.y < past_sequence_length) {
          tileV[idx] = past_value[pastValueOffset + (w + local_id.y) * uniforms.N];
        } else if (w + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {
          tileV[idx] = v[vOffset + (w + local_id.y - past_sequence_length) * uniforms.N];
        }
      `:`
            if (w + local_id.y < uniforms.kv_sequence_length) {
              tileV[idx] = v[vOffset + (w + local_id.y) * uniforms.N];
            }`}
        ${c?`
            if (w + local_id.y < present_sequence_length) {
          present_value[presentValueOffset + (w + local_id.y) * uniforms.N] = tileV[idx];
        }`:""}
      }
     workgroupBarrier();
     for (var k: u32 = 0u; k < TILE_SIZE && w+k < total_sequence_length; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileV[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   if (m < uniforms.M && n < uniforms.N) {
     let outputIdx = batchIdx * uniforms.M * uniforms.v_hidden_size + m * uniforms.v_hidden_size
       + headIdx * uniforms.N + n;
     output[outputIdx] = value;
   }
  }`};return{name:"AttentionScore",shaderCache:{hint:`${s!==void 0};${e}`,inputDependencies:S},getRunData:()=>({outputs:E,dispatchGroup:I,programUniforms:g}),getShaderSource:v}},Jo=(e,r,t,s,o,n,i,a,l,u,p=void 0,c=void 0)=>{let d=Math.min(e.outputCount,1+(i?1:0)+(a?1:0)),_=d>1?u.pastSequenceLength:0,f=_+u.kvSequenceLength,T=l&&be.size(l.dims)>0?l:void 0,I=[r,t];d>1&&i&&be.size(i.dims)>0&&I.push(i),T&&I.push(T),p&&I.push(p),c&&I.push(c);let g=e.compute(E_(d,r,t,i,T,u,_,p,c),{inputs:I,outputs:d>1?[-1,1]:[-1]})[0];e.compute(T_(g,u.batchSize,u.numHeads,_,u.sequenceLength,f,p,c),{inputs:p&&c?[g,p,c]:[g],outputs:[]});let w=[g,s];d>1&&a&&be.size(a.dims)>0&&w.push(a),p&&w.push(p),c&&w.push(c),e.compute(P_(d,g,s,a,u,_,p,c),{inputs:w,outputs:d>1?[0,2]:[0]})},C_=(e,r)=>{let t=[r.batchSize,r.numHeads,r.sequenceLength,r.headSize],s=r.sequenceLength,o=r.inputHiddenSize,n=r.headSize,i=12,a={x:Math.ceil(r.headSize/i),y:Math.ceil(r.sequenceLength/i),z:r.batchSize*r.numHeads},l=[e.inputs[0],e.inputs[1],e.inputs[2]],u=[{type:12,data:s},{type:12,data:o},{type:12,data:n},{type:12,data:r.numHeads},{type:12,data:r.headSize},{type:12,data:r.hiddenSize},{type:12,data:r.hiddenSize+r.hiddenSize+r.vHiddenSize}],p=c=>{let d=tt("output_q",l[0].dataType,t),_=tt("output_k",l[0].dataType,t),f=tt("output_v",l[0].dataType,t),T=Ce("input",l[0].dataType,l[0].dims),I=Ce("weight",l[1].dataType,l[1].dims),g=Ce("bias",l[2].dataType,l[2].dims),w=T.type.storage,S=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`
  const TILE_SIZE = ${i}u;
  var<workgroup> tileInput: array<${w}, ${i*i}>;
  var<workgroup> tileWeightQ: array<${w}, ${i*i}>;
  var<workgroup> tileWeightK: array<${w}, ${i*i}>;
  var<workgroup> tileWeightV: array<${w}, ${i*i}>;
  ${c.registerUniforms(S).declareVariables(T,I,g,d,_,f)}
  ${c.mainStart([i,i,1])}
    let batchIndex = workgroup_id.z / uniforms.num_heads;
    let headNumber = workgroup_id.z % uniforms.num_heads;
    let m = global_id.y;
    let n = global_id.x;

    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;
    let biasOffsetQ = headNumber * uniforms.head_size;
    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;
    let biasOffsetV = uniforms.hidden_size + biasOffsetK;

    var valueQ = ${w}(0);
    var valueK = ${w}(0);
    var valueV = ${w}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        let offset = n + (w + local_id.y) * uniforms.ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * uniforms.N + n) % uniforms.head_size;
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * uniforms.M * uniforms.N;
    if (m < uniforms.M && n < uniforms.N) {
      let outputIdx = offset + m * uniforms.N + n;
      output_q[outputIdx] = valueQ;
      output_k[outputIdx] = valueK;
      output_v[outputIdx] = valueV;
    }
  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:t,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:t,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:t,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:a,programUniforms:u}),getShaderSource:p},{inputs:l,outputs:[-1,-1,-1]})},hb=(e,r)=>{let t=x_(e.inputs,r),[s,o,n]=C_(e,t);return Jo(e,s,o,n,e.inputs[4],void 0,void 0,void 0,e.inputs[5],t)}}),S_,$_,I_,mb,ex=je(()=>{Es(),ft(),xt(),lr(),Tt(),S_=(e,r)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let t=(s,o,n)=>{let i=o.length;if(i!==s.length)throw new Error(`${n}: num dimensions != ${i}`);o.forEach((a,l)=>{if(a!==s[l])throw new Error(`${n}: dim[${l}] do not match`)})};if(e[0].dims.length>1){let s=r.format==="NHWC"?r.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,r.spatial?2:void 0);t(e[1].dims,s,"Invalid input scale"),t(e[2].dims,s,"Invalid input B"),t(e[3].dims,s,"Invalid input mean"),t(e[4].dims,s,"Invalid input var")}else t(e[1].dims,[1],"Invalid input scale"),t(e[2].dims,[1],"Invalid input B"),t(e[3].dims,[1],"Invalid input mean"),t(e[4].dims,[1],"Invalid input var")},$_=(e,r)=>{let{epsilon:t,spatial:s,format:o}=r,n=e[0].dims,i=s?nr(n[n.length-1]):1,a=o==="NHWC"&&n.length>1?i:1,l=be.size(n)/i,u=s,p=u?n.length:n,c=Ce("x",e[0].dataType,e[0].dims,i),d=Ce("scale",e[1].dataType,e[1].dims,a),_=Ce("bias",e[2].dataType,e[2].dims,a),f=Ce("inputMean",e[3].dataType,e[3].dims,a),T=Ce("inputVar",e[4].dataType,e[4].dims,a),I=tt("y",e[0].dataType,p,i),g=()=>{let S="";if(s)S=`let cOffset = ${n.length===1?"0u":o==="NHWC"?`outputIndices[${n.length-1}] / ${i}`:"outputIndices[1]"};`;else if(o==="NCHW")S=`
            ${I.indicesSet("outputIndices","0","0")}
            let cOffset = ${I.indicesToOffset("outputIndices")};`;else{S=`var cIndices = ${d.type.indices}(0);
                       cIndices[0] = outputIndices[${n.length-1}];`;for(let E=1;E<d.rank;E++)S+=`cIndices[${E}] = outputIndices[${E}];`;S+=`let cOffset = ${d.indicesToOffset("cIndices")};`}return S},w=S=>`
  const epsilon = ${t};
  ${S.registerUniform("outputSize","u32").declareVariables(c,d,_,f,T,I)}
  ${S.mainStart()}
  ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${I.offsetToIndices(`global_idx * ${i}`)};
    ${g()}
    let scale = ${d.getByOffset("cOffset")};
    let bias = ${_.getByOffset("cOffset")};
    let inputMean = ${f.getByOffset("cOffset")};
    let inputVar = ${T.getByOffset("cOffset")};
    let x = ${c.getByOffset("global_idx")};
    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;
    ${I.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${r.epsilon}_${r.format}_${s}_${i}`,inputDependencies:u?["rank","type","type","type","type"]:void 0},getShaderSource:w,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:u?[{type:12,data:l},...ut(n)]:[{type:12,data:l}]})}},I_=e=>Nt(e),mb=(e,r)=>{let{inputs:t,outputCount:s}=e,o=I_({...r,outputCount:s});if(Yt.webgpu.validateInputContent&&S_(t,o),r.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute($_(t,o))}}),k_,A_,fb,tx=je(()=>{xt(),Tt(),k_=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},A_=e=>{let r=e[0].dims,t=e[0].dims[2],s=be.size(r)/4,o=e[0].dataType,n=Ce("input",o,r,4),i=Ce("bias",o,[t],4),a=Ce("residual",o,r,4),l=tt("output",o,r,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:u=>`
  const channels = ${t}u / 4;
  ${u.declareVariables(n,i,a,l)}

  ${u.mainStart()}
    ${u.guardAgainstOutOfBoundsWorkgroupSizes(s)}
    let value = ${n.getByOffset("global_idx")}
      + ${i.getByOffset("global_idx % channels")} + ${a.getByOffset("global_idx")};
    ${l.setByOffset("global_idx","value")}
  }`}},fb=e=>{k_(e.inputs),e.compute(A_(e.inputs))}}),F_,Lt,_b,gb,wb,Mb,bb,yb,vb,xb,Tb,O_,Eb,Pb,Cb,Sb,Ko,$b,aa,Ib,kb,Ab,Fb,Ob,Db,Lb,zb,Bb,Rb,jb,Nb,Vb,Ub,Wb,Gb,Jl,Kb,zu,Bu,Hb,qb,Qb,D_,L_,Xb,uc=je(()=>{ft(),xt(),lr(),Tt(),F_=(e,r,t,s,o,n,i)=>{let a=Math.ceil(r/4),l="";typeof o=="string"?l=`${o}(a)`:l=o("a");let u=Ce("inputData",t,[a],4),p=tt("outputData",s,[a],4),c=[{name:"vec_size",type:"u32"}];return i&&c.push(...i),`
      ${e.registerUniforms(c).declareVariables(u,p)}

  ${n??""}

  ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${u.getByOffset("global_idx")};
    ${p.setByOffset("global_idx",l)}
  }`},Lt=(e,r,t,s,o,n=e.dataType,i,a)=>{let l=[{type:12,data:Math.ceil(be.size(e.dims)/4)}];return i&&l.push(...i),{name:r,shaderCache:{hint:o,inputDependencies:["type"]},getShaderSource:u=>F_(u,be.size(e.dims),e.dataType,n,t,s,a),getRunData:u=>({outputs:[{dims:e.dims,dataType:n}],dispatchGroup:{x:Math.ceil(be.size(u[0].dims)/64/4)},programUniforms:l})}},_b=e=>{e.compute(Lt(e.inputs[0],"Abs","abs"))},gb=e=>{e.compute(Lt(e.inputs[0],"Acos","acos"))},wb=e=>{e.compute(Lt(e.inputs[0],"Acosh","acosh"))},Mb=e=>{e.compute(Lt(e.inputs[0],"Asin","asin"))},bb=e=>{e.compute(Lt(e.inputs[0],"Asinh","asinh"))},yb=e=>{e.compute(Lt(e.inputs[0],"Atan","atan"))},vb=e=>{e.compute(Lt(e.inputs[0],"Atanh","atanh"))},xb=e=>Nt(e),Tb=(e,r)=>{let t;switch(r.to){case 10:t="vec4<f16>";break;case 1:t="vec4<f32>";break;case 12:t="vec4<u32>";break;case 6:t="vec4<i32>";break;case 9:t="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${r.to}`)}e.compute(Lt(e.inputs[0],"Cast",t,void 0,r.cacheKey,r.to))},O_=e=>{let r,t,s=e.length>=2&&e[1].data!==0,o=e.length>=3&&e[2].data!==0;switch(e[0].dataType){case 1:r=s?e[1].getFloat32Array()[0]:-34028234663852886e22,t=o?e[2].getFloat32Array()[0]:34028234663852886e22;break;case 10:r=s?e[1].getUint16Array()[0]:64511,t=o?e[2].getUint16Array()[0]:31743;break;default:throw new Error("Unsupport data type")}return Nt({min:r,max:t})},Eb=(e,r)=>{let t=r||O_(e.inputs),s=Rr(e.inputs[0].dataType);e.compute(Lt(e.inputs[0],"Clip",o=>`clamp(${o}, vec4<${s}>(uniforms.min), vec4<${s}>(uniforms.max))`,void 0,t.cacheKey,void 0,[{type:e.inputs[0].dataType,data:t.min},{type:e.inputs[0].dataType,data:t.max}],[{name:"min",type:s},{name:"max",type:s}]),{inputs:[0]})},Pb=e=>{e.compute(Lt(e.inputs[0],"Ceil","ceil"))},Cb=e=>{e.compute(Lt(e.inputs[0],"Cos","cos"))},Sb=e=>{e.compute(Lt(e.inputs[0],"Cosh","cosh"))},Ko=e=>Nt(e),$b=(e,r)=>{let t=Rr(e.inputs[0].dataType);e.compute(Lt(e.inputs[0],"Elu",s=>`elu_vf32(${s})`,`
  const elu_alpha_ = ${t}(${r.alpha});

  fn elu_f32(a: ${t}) -> ${t} {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<${t}>) -> vec4<${t}> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,r.cacheKey))},aa=(e="f32")=>`
const r0: ${e} = 0.3275911;
const r1: ${e} = 0.254829592;
const r2: ${e} = -0.284496736;
const r3: ${e} = 1.421413741;
const r4: ${e} = -1.453152027;
const r5: ${e} = 1.061405429;

fn erf_vf32(v: vec4<${e}>) -> vec4<${e}> {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,Ib=e=>{let r=Rr(e.inputs[0].dataType);e.compute(Lt(e.inputs[0],"Erf",t=>`erf_vf32(${t})`,aa(r)))},kb=e=>{e.compute(Lt(e.inputs[0],"Exp","exp"))},Ab=e=>{e.compute(Lt(e.inputs[0],"Floor","floor"))},Fb=e=>{let r=Rr(e.inputs[0].dataType);e.compute(Lt(e.inputs[0],"Gelu",t=>`0.5 * ${t} * (1.0 + erf_vf32(${t} * 0.7071067811865475))`,aa(r)))},Ob=(e,r)=>{let t=Rr(e.inputs[0].dataType);e.compute(Lt(e.inputs[0],"LeakyRelu",s=>`select(leaky_relu_alpha_ * ${s}, ${s}, ${s} >= vec4<${t}>(0.0))`,`const leaky_relu_alpha_ = ${t}(${r.alpha});`,r.cacheKey))},Db=e=>{e.compute(Lt(e.inputs[0],"Not",r=>`!${r}`))},Lb=e=>{e.compute(Lt(e.inputs[0],"Neg",r=>`-${r}`))},zb=e=>{e.compute(Lt(e.inputs[0],"Reciprocal",r=>`1.0/${r}`))},Bb=e=>{let r=Rr(e.inputs[0].dataType);e.compute(Lt(e.inputs[0],"Relu",t=>`select(vec4<${r}>(0.0), ${t}, ${t} > vec4<${r}>(0.0))`))},Rb=e=>{e.compute(Lt(e.inputs[0],"Sigmoid",r=>`(1.0 / (1.0 + exp(-${r})))`))},jb=e=>Nt(e),Nb=(e,r)=>{let t=Rr(e.inputs[0].dataType);e.compute(Lt(e.inputs[0],"HardSigmoid",s=>`max(vec4<${t}>(0.0), min(vec4<${t}>(1.0), ${r.alpha} * ${s} + vec4<${t}>(${r.beta})))`,void 0,r.cacheKey))},Vb=e=>{e.compute(Lt(e.inputs[0],"Sin","sin"))},Ub=e=>{e.compute(Lt(e.inputs[0],"Sinh","sinh"))},Wb=e=>{e.compute(Lt(e.inputs[0],"Sqrt","sqrt"))},Gb=e=>{e.compute(Lt(e.inputs[0],"Tan","tan"))},Jl=e=>`sign(${e}) * (1 - exp(-2 * abs(${e}))) / (1 + exp(-2 * abs(${e})))`,Kb=e=>{e.compute(Lt(e.inputs[0],"Tanh",Jl))},zu=(e="f32")=>`
const fast_gelu_a: ${e} = 0.5;
const fast_gelu_b: ${e} = 0.7978845608028654;
const fast_gelu_c: ${e} = 0.035677408136300125;

fn tanh_v(v: vec4<${e}>) -> vec4<${e}> {
  return ${Jl("v")};
}
`,Bu=e=>`(fast_gelu_a + fast_gelu_a * tanh_v(${e} * (fast_gelu_c * ${e} * ${e} + fast_gelu_b))) * ${e}`,Hb=e=>{let r=Rr(e.inputs[0].dataType);e.compute(Lt(e.inputs[0],"FastGelu",Bu,zu(r),void 0,e.inputs[0].dataType))},qb=(e,r)=>{let t=Rr(e.inputs[0].dataType);return e.compute(Lt(e.inputs[0],"ThresholdedRelu",s=>`select(vec4<${t}>(0.0), ${s}, ${s} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${t}>(${r.alpha});`,r.cacheKey)),0},Qb=e=>{e.compute(Lt(e.inputs[0],"Log","log"))},D_=(e,r)=>`
const alpha = vec4<${e}>(${r});
const one = ${e}(1.0);
const zero = ${e}(0.0);

fn quick_gelu_impl(x: vec4<${e}>) -> vec4<${e}> {
  let v = x *alpha;
  var x1 : vec4<${e}>;
  for (var i = 0; i < 4; i = i + 1) {
    if (v[i] >= zero) {
      x1[i] = one / (one + exp(-v[i]));
    } else {
      x1[i] = one - one / (one + exp(v[i]));
    }
  }
  return x * x1;
}
`,L_=e=>`quick_gelu_impl(${e})`,Xb=(e,r)=>{let t=Rr(e.inputs[0].dataType);e.compute(Lt(e.inputs[0],"QuickGelu",L_,D_(t,r.alpha),r.cacheKey,e.inputs[0].dataType))}}),z_,B_,Jb,rx=je(()=>{xt(),Tt(),uc(),z_=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},B_=e=>{let r=e[0].dims.slice();r[2]=r[2]/2;let t=Ce("input",e[0].dataType,e[0].dims,4),s=Ce("bias",e[0].dataType,[e[0].dims[2]],4),o=tt("output",e[0].dataType,r,4),n=be.size(r)/4,i=$r(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)}}),getShaderSource:a=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${e[0].dims[2]/4/2}u;

  ${a.declareVariables(t,s,o)}

  ${aa(i)}

  ${a.mainStart()}
    ${a.guardAgainstOutOfBoundsWorkgroupSizes(n)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${o.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},Jb=e=>{z_(e.inputs),e.compute(B_(e.inputs))}}),R_,j_,bs,Yb,Zb,ey,ty,ry,sy,ny,oy,iy,ay,sx=je(()=>{ft(),xt(),Tt(),R_=(e,r,t,s,o,n,i,a,l,u,p,c)=>{let d,_;typeof a=="string"?d=_=(w,S)=>`${a}((${w}),(${S}))`:typeof a=="function"?d=_=a:(d=a.scalar,_=a.vector);let f=tt("outputData",p,s.length,4),T=Ce("aData",l,r.length,4),I=Ce("bData",u,t.length,4),g;if(o)if(n){let w=be.size(r)===1,S=be.size(t)===1,E=r.length>0&&r[r.length-1]%4===0,v=t.length>0&&t[t.length-1]%4===0;w||S?g=f.setByOffset("global_idx",_(w?`${T.type.value}(${T.getByOffset("0")}.x)`:T.getByOffset("global_idx"),S?`${I.type.value}(${I.getByOffset("0")}.x)`:I.getByOffset("global_idx"))):g=`
            let outputIndices = ${f.offsetToIndices("global_idx * 4u")};
            let offsetA = ${T.broadcastedIndicesToOffset("outputIndices",f)};
            let offsetB = ${I.broadcastedIndicesToOffset("outputIndices",f)};
            ${f.setByOffset("global_idx",_(i||E?T.getByOffset("offsetA / 4u"):`${T.type.value}(${T.getByOffset("offsetA / 4u")}[offsetA % 4u])`,i||v?I.getByOffset("offsetB / 4u"):`${I.type.value}(${I.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else g=f.setByOffset("global_idx",_(T.getByOffset("global_idx"),I.getByOffset("global_idx")));else{if(!n)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let w=(S,E,v="")=>{let M=`aData[indexA${E}][componentA${E}]`,y=`bData[indexB${E}][componentB${E}]`;return`
            let outputIndices${E} = ${f.offsetToIndices(`global_idx * 4u + ${E}u`)};
            let offsetA${E} = ${T.broadcastedIndicesToOffset(`outputIndices${E}`,f)};
            let offsetB${E} = ${I.broadcastedIndicesToOffset(`outputIndices${E}`,f)};
            let indexA${E} = offsetA${E} / 4u;
            let indexB${E} = offsetB${E} / 4u;
            let componentA${E} = offsetA${E} % 4u;
            let componentB${E} = offsetB${E} % 4u;
            ${S}[${E}] = ${v}(${d(M,y)});
          `};p===9?g=`
            var data = vec4<u32>(0);
            ${w("data",0,"u32")}
            ${w("data",1,"u32")}
            ${w("data",2,"u32")}
            ${w("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:g=`
            ${w("outputData[global_idx]",0)}
            ${w("outputData[global_idx]",1)}
            ${w("outputData[global_idx]",2)}
            ${w("outputData[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(T,I,f)}

        ${c??""}

        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${g}
      }`},j_=(e,r,t,s,o,n,i=t.dataType)=>{let a=t.dims.map(T=>Number(T)??1),l=s.dims.map(T=>Number(T)??1),u=!be.areEqual(a,l),p=a,c=be.size(a),d=!1,_=!1,f=[u];if(u){let T=eo.calcShape(a,l,!1);if(!T)throw new Error("Can't perform binary op on the given tensors");p=T.slice(),c=be.size(p);let I=be.size(a)===1,g=be.size(l)===1,w=a.length>0&&a[a.length-1]%4===0,S=l.length>0&&l[l.length-1]%4===0;f.push(I),f.push(g),f.push(w),f.push(S);let E=1;for(let v=1;v<p.length;v++){let M=a[a.length-v],y=l[l.length-v];if(M===y)E*=M;else break}E%4===0?(_=!0,d=!0):(I||g||w||S)&&(d=!0)}else d=!0;return f.push(d),{name:e,shaderCache:{hint:r+f.map(T=>T.toString()).join("_"),inputDependencies:["rank","rank"]},getShaderSource:T=>R_(T,a,l,p,d,u,_,o,t.dataType,s.dataType,i,n),getRunData:()=>({outputs:[{dims:p,dataType:i}],dispatchGroup:{x:Math.ceil(c/64/4)},programUniforms:[{type:12,data:Math.ceil(be.size(p)/4)},...ut(a,l,p)]})}},bs=(e,r,t,s,o,n)=>{e.compute(j_(r,o??"",e.inputs[0],e.inputs[1],t,s,n))},Yb=e=>{bs(e,"Add",(r,t)=>`${r}+${t}`)},Zb=e=>{bs(e,"Div",(r,t)=>`${r}/${t}`)},ey=e=>{bs(e,"Equal",{scalar:(r,t)=>`u32(${r}==${t})`,vector:(r,t)=>`vec4<u32>(${r}==${t})`},void 0,void 0,9)},ty=e=>{bs(e,"Mul",(r,t)=>`${r}*${t}`)},ry=e=>{let r=Ce("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;bs(e,"Pow",{scalar:(t,s)=>`pow_custom(${t},${s})`,vector:(t,s)=>`pow_vector_custom(${t},${s})`},`
    fn pow_custom(a : ${r}, b : ${r}) -> ${r} {
      if (b == ${r}(0.0)) {
        return ${r}(1.0);
      } else if (a < ${r}(0.0) && f32(b) != floor(f32(b))) {
        return ${r}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${r}(1.0), round(f32(abs(b) % ${r}(2.0))) != 1.0) * ${r}(${r==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${r}>, b : vec4<${r}>) -> vec4<${r}> {
      // TODO: implement vectorized pow
      return vec4<${r}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},sy=e=>{bs(e,"Sub",(r,t)=>`${r}-${t}`)},ny=e=>{bs(e,"Greater",{scalar:(r,t)=>`u32(${r}>${t})`,vector:(r,t)=>`vec4<u32>(${r}>${t})`},void 0,void 0,9)},oy=e=>{bs(e,"Less",{scalar:(r,t)=>`u32(${r}<${t})`,vector:(r,t)=>`vec4<u32>(${r}<${t})`},void 0,void 0,9)},iy=e=>{bs(e,"GreaterOrEqual",{scalar:(r,t)=>`u32(${r}>=${t})`,vector:(r,t)=>`vec4<u32>(${r}>=${t})`},void 0,void 0,9)},ay=e=>{bs(e,"LessOrEqual",{scalar:(r,t)=>`u32(${r}<=${t})`,vector:(r,t)=>`vec4<u32>(${r}<=${t})`},void 0,void 0,9)}}),N_,V_,U_,W_,ly,uy,nx=je(()=>{ft(),xt(),lr(),Tt(),N_=(e,r)=>{if(!e||e.length<1)throw new Error("too few inputs");let t=0,s=e[t],o=s.dataType,n=s.dims.length;e.forEach((i,a)=>{if(a!==t){if(i.dataType!==o)throw new Error("input tensors should be one type");if(i.dims.length!==n)throw new Error("input tensors should have the same shape");i.dims.forEach((l,u)=>{if(u!==r&&l!==s.dims[u])throw new Error("non concat dimensions must match")})}})},V_=(e,r)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${e}u>(${r});
    for (var i: u32 = 0u; i < ${e}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${e}u;
  }`,U_=(e,r)=>{let t=e.length,s=[];for(let o=0;o<t;++o){let n=r.setByOffset("global_idx",e[o].getByIndices("indices"));t===1?s.push(n):o===0?s.push(`if (inputIndex == ${o}u) { ${n} }`):o===t-1?s.push(`else { ${n} }`):s.push(`else if (inputIndex == ${o}) { ${n} }`)}return s.join(`
`)},W_=(e,r,t,s)=>{let o=be.size(t),n=new Array(e.length),i=new Array(e.length),a=0,l=[],u=[],p=[{type:12,data:o}];for(let T=0;T<e.length;++T)a+=e[T].dims[r],n[T]=a,u.push(e[T].dims.length),i[T]=Ce(`input${T}`,s,u[T]),l.push("rank"),p.push({type:12,data:n[T]});for(let T=0;T<e.length;++T)p.push(...ut(e[T].dims));p.push(...ut(t));let c=tt("output",s,t.length),d=c.indicesGet("indices",r),_=Array.from(Array(n.length).keys()).map(T=>`uniforms.sizeInConcatAxis${T}`).join(","),f=T=>`

  ${(()=>{T.registerUniform("outputSize","u32");for(let I=0;I<e.length;I++)T.registerUniform(`sizeInConcatAxis${I}`,"u32");return T.declareVariables(...i,c)})()}

  ${V_(n.length,_)}

  ${T.mainStart()}
    ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${c.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${d});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${n.length}u>(${_});
      ${d} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${U_(i,c)}
  }`;return{name:"Concat",shaderCache:{hint:`${r}`,inputDependencies:l},getRunData:()=>({outputs:[{dims:t,dataType:s}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:p}),getShaderSource:f}},ly=(e,r)=>{let t=e.inputs,s=t[0].dims,o=be.normalizeAxis(r.axis,s.length);N_(t,o);let n=s.slice();n[o]=t.reduce((a,l)=>a+(l.dims.length>o?l.dims[o]:0),0);let i=t.filter(a=>be.size(a.dims)>0);e.compute(W_(i,o,n,t[0].dataType),{inputs:i})},uy=e=>Nt({axis:e.axis})}),In,kn,An,cc,On=je(()=>{ft(),xt(),In=(e,r,t="f32")=>{switch(e.activation){case"Relu":return`value = max(value, ${r}(0.0));`;case"Sigmoid":return`value = (${r}(1.0) / (${r}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${r}(${t}(uniforms.clip_min)), ${r}(${t}(uniforms.clip_max)));`;case"HardSigmoid":return`value = max(${r}(0.0), min(${r}(1.0), ${t}(uniforms.alpha) * value + ${t}(uniforms.beta)));`;case"LeakyRelu":return`value = select(${t}(uniforms.alpha) * value, value, value >= ${r}(0.0));`;case"Tanh":return`let e2x = exp(-2.0 * abs(value));
              value = sign(value) * (1.0 - e2x) / (1.0 + e2x);
        `;case"":return"";default:throw new Error(`Unsupported activation ${e.activation}`)}},kn=(e,r)=>{e.activation==="Clip"?r.push({type:1,data:e.clipMax},{type:1,data:e.clipMin}):e.activation==="HardSigmoid"?r.push({type:1,data:e.alpha},{type:1,data:e.beta}):e.activation==="LeakyRelu"&&r.push({type:1,data:e.alpha})},An=(e,r)=>{e.activation==="Clip"?r.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}):e.activation==="HardSigmoid"?r.push({name:"alpha",type:"f32"},{name:"beta",type:"f32"}):e.activation==="LeakyRelu"&&r.push({name:"alpha",type:"f32"})},cc=e=>{let r=(e==null?void 0:e.activation)||"";if(r==="HardSigmoid"){let[t,s]=(e==null?void 0:e.activation_params)||[.2,.5];return{activation:r,alpha:t,beta:s}}else if(r==="Clip"){let[t,s]=(e==null?void 0:e.activation_params)||[DM,LM];return{activation:r,clipMax:s,clipMin:t}}else if(r==="LeakyRelu"){let[t]=(e==null?void 0:e.activation_params)||[.01];return{activation:r,alpha:t}}return{activation:r}}}),Fr,cy,dc=je(()=>{Fr=(e,r)=>{switch(e){case 1:return r;case 2:return`vec2<${r}>`;case 3:return`vec3<${r}>`;case 4:return`vec4<${r}>`;default:throw new Error(`${e}-component is not supported.`)}},cy=e=>`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      `}),dy,ox=je(()=>{dy=e=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));
}
`}),qo,pc,hc=je(()=>{ft(),xt(),Tt(),On(),qo=(e,r,t,s,o)=>{let n=s-t;return`
      ${Array.from({length:t}).map((i,a)=>`
      if (${ot(r.shape,a,r.rank)} != 1) {
        ${r.indicesSet(e,a,ot(o,a+n,s))}
      } else {
        ${r.indicesSet(e,a,0)}
      }`).join("")}
`},pc=(e,r,t,s,o=!1,n)=>{let i=e[0].dims,a=e[1].dims,l=i[i.length-2],u=a[a.length-1],p=i[i.length-1],c=nr(u),d=nr(p),_=nr(l),f=be.size(t)/c/_,T=e.length>2,I=s?s.slice(0,-2):t.slice(0,-2),g=[be.size(I),l,u],w=[{type:12,data:f},{type:12,data:l},{type:12,data:u},{type:12,data:p}];kn(r,w),w.push(...ut(I,i,a)),T&&w.push(...ut(e[2].dims)),w.push(...ut(g));let S=E=>{let v=ic("batch_dims",e[0].dataType,I.length),M=Ce("a",e[0].dataType,i.length,d),y=Ce("b",e[1].dataType,a.length,c),C=tt("output",e[0].dataType,g.length,c),F=$r(C.type.tensor),z=In(r,C.type.value,F),K=[M,y],q="";if(T){let H=o?c:1;K.push(Ce("bias",e[2].dataType,e[2].dims.length,H)),q=`${o?`value += bias[col / ${H}];`:`value += ${C.type.value}(bias[row + i]);`}`}let R=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];An(r,R);let Z=()=>{let H=`var a_data: ${M.type.value};`;for(let J=0;J<d;J++)H+=`
              let b_data${J} = b[(b_offset + (k + ${J}) * uniforms.N + col) / ${c}];`;for(let J=0;J<_;J++){H+=`a_data = a[(a_offset + (row + ${J}) * uniforms.K + k) / ${d}];`;for(let Q=0;Q<d;Q++)H+=`
            values[${J}] = fma(${y.type.value}(a_data${d===1?"":`[${Q}]`}), b_data${Q}, values[${J}]);
`}return H};return`
  ${E.registerUniforms(R).registerInternalVariables(v).declareVariables(...K,C)}
  ${E.mainStart()}
    ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let col = (global_idx % (uniforms.N / ${c})) * ${c};
    var index1 = global_idx / (uniforms.N / ${c});
    let stride1 = uniforms.M / ${_};
    let row = (index1 % stride1) * ${_};
    let batch = index1 / stride1;

    ${t.length===2?"":`let batch_indices = ${v.offsetToIndices("batch")};`}

    var a_indices: ${M.type.indices};
    ${qo("a_indices",M,M.rank-2,v.rank,"batch_indices")}
    ${M.indicesSet("a_indices",M.rank-2,0)}
    ${M.indicesSet("a_indices",M.rank-1,0)}
    let a_offset = ${M.indicesToOffset("a_indices")};

    var b_indices: ${y.type.indices};
    ${qo("b_indices",y,y.rank-2,v.rank,"batch_indices")}
    ${y.indicesSet("b_indices",y.rank-2,0)}
    ${y.indicesSet("b_indices",y.rank-1,0)}
    let b_offset = ${y.indicesToOffset("b_indices")};
    var values: array<${C.type.value}, ${_}>;
    for (var k: u32 = 0u; k < uniforms.K; k = k + ${d}) {
      ${Z()}
    }
    for (var i = 0u; i < ${_}u; i++) {
      var value = values[i];
      ${q}
      ${z}
      let cur_indices = ${C.type.indices}(batch, row + i, col);
      let offset = ${C.indicesToOffset("cur_indices")};
      ${C.setByOffset(`offset / ${c}`,"value")};
    }
  }
  `};return{name:"MatMulNaive",shaderCache:{hint:`${r.activation};${c};${d};${_};${o}`,inputDependencies:T?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:n?n(t):t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(f/64)},programUniforms:w}),getShaderSource:S}}}),G_,K_,Ru,Yl,H_,ju,q_,pa,mc=je(()=>{ft(),xt(),Tt(),On(),hc(),dc(),G_=(e,r)=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${r?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${r?", batchIndices":""});
        `,K_=(e,r)=>e?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${r===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${r===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${r===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,Ru=(e,r,t="f32",s,o=!1,n=32,i=!1,a=32)=>{let l=r[1]*e[1],u=r[0]*e[0],p=o?l:n,c=o?n:l,d=p/r[0],_=n/r[1];if(!((o&&d===4&&e[1]===4||!o&&(d===3||d===4))&&p%r[0]===0&&n%r[1]===0&&e[0]===4))throw new Error(`If transposeA ${o} is true, innerElementSize ${d} and workPerThread[1] ${e[1]} must be 4.
      Otherwise, innerElementSize ${d} must be 3 or 4.
  tileAWidth ${p} must be divisible by workgroupSize[0]${r[0]}. tileInner ${n} must be divisible by workgroupSize[1] ${r[1]}. colPerThread ${e[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${d}<${t}>, ${p/d}>, ${c}>;
var<workgroup> mm_Bsub: array<array<vec4<${t}>, ${u/e[0]}>, ${n}>;

const rowPerThread = ${e[1]};
const colPerThread = ${e[0]};
const innerElementSize = ${d};
const tileInner = ${n};

@compute @workgroup_size(${r[0]}, ${r[1]}, ${r[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${i?"0":"i32(globalId.z)"};
  ${s?`let batchIndices = ${s.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${l};

  let num_tiles = ${i?`${Math.ceil(a/n)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
  var kStart = ${i?`i32(globalId.z) * ${a}`:"0"};

  var acc: array<vec4<${t}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${_};
  for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${G_(o,s)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${_}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${s?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${d===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${K_(o,d)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},Yl=(e,r)=>e?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${r?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${r?", batchIndices":""});
            `,H_=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",ju=(e,r,t="f32",s,o=!1,n=32,i=!1,a=32,l=!1)=>{let u=e[1]*r[1],p=e[0]*r[0],c=o?u:n,d=o?n:u;if(!(d%r[1]===0&&c%r[0]===0&&n%r[1]===0))throw new Error(`tileAHight ${d} must be divisible by workgroupSize[1]${r[1]}, tileAWidth ${c} must be divisible by workgroupSize[0]${r[0]}, tileInner ${n} must be divisible by workgroupSize[1]${r[1]}`);let _=d/r[1],f=c/r[0],T=n/r[1],I=l?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${u};
    let globalColStart = i32(workgroupId.x) * ${p};

    // Loop over shared dimension.
    for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${d}; inputRow = inputRow + ${r[1]}) {
        for (var inputCol = localCol; inputCol < ${c}; inputCol = inputCol + ${r[0]}) {
          ${Yl(o,s)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${n}; inputRow = inputRow + ${r[1]}) {
            for (var inputCol = localCol; inputCol < ${p}; inputCol = inputCol + ${r[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${s?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${t}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${r[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${o?`mm_Asub[k][localRow + innerRow * ${r[1]}];`:`mm_Asub[localRow + innerRow * ${r[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${r[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${r[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${u};

let tileRowA = i32(localId.y) * ${_};
let tileColA = i32(localId.x) * ${f};
let tileRowB = i32(localId.y) * ${T};
// Loop over shared dimension.
for (var t = 0; t < num_tiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${_}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${f}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${Yl(o,s)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${T}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${s?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${t}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${H_(o)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${t}, ${c}>, ${d}>;
  var<workgroup> mm_Bsub : array<array<${t}, ${p}>, ${n}>;
  const rowPerThread = ${e[1]};
  const colPerThread = ${e[0]};
  const tileInner = ${n};

@compute @workgroup_size(${r[0]}, ${r[1]}, ${r[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${i?"0":"i32(globalId.z)"};
    ${s?`let batchIndices = ${s.offsetToIndices("u32(batch)")};`:""}
    let num_tiles = ${i?`${Math.ceil(a/n)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
    var kStart = ${i?`i32(globalId.z) * ${a}`:"0"};

    var acc : array<array<${t}, colPerThread>, rowPerThread>;
    ${I}
  }
`},q_=(e,r,t,s,o=!1)=>{let[n,i,a,l]=s,u=$r(s[0].type.tensor);return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${n.type.indices}) -> ${Fr(e,u)} {
      var value = ${Fr(e,u)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)
      {
        var aIndices: ${i.type.indices};
        ${qo("aIndices",i,i.rank-2,n.rank,"batchIndices")}
        ${i.indicesSet("aIndices",i.rank-2,"u32(row)")}
        ${i.indicesSet("aIndices",i.rank-1,"u32(colIn)")}
        value = ${i.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${n.type.indices}) -> ${Fr(e,u)} {
      var value = ${Fr(e,u)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)
      {
        var bIndices: ${a.type.indices};
        ${qo("bIndices",a,a.rank-2,n.rank,"batchIndices")}
        ${a.indicesSet("bIndices",a.rank-2,"u32(row)")}
        ${a.indicesSet("bIndices",a.rank-1,"u32(colIn)")}
        value = ${a.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Fr(e,u)}) {
      let col = colIn * ${e};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${r?`value = value + ${o?"bias[colIn]":`${Fr(e,u)}(bias[row])`};`:""}
        ${t}
        ${l.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},pa=(e,r,t,s,o=!1,n)=>{let i=e[0].dims,a=e[1].dims,l=i.slice(0,-2),u=a.slice(0,-2),p=s?s.slice(0,-2):t.slice(0,-2),c=be.size(p),d=i[i.length-2],_=i[i.length-1],f=a[a.length-1],T=_%4===0&&f%4===0,I=d<=8?[4,1,1]:[4,4,1],g=[8,8,1],w=[Math.ceil(f/g[0]/I[0]),Math.ceil(d/g[1]/I[1]),Math.ceil(c/g[2]/I[2])],S=T?4:1,E=[...l,d,_/S],v=E.length,M=[...u,_,f/S],y=M.length,C=[c,d,f/S],F=[{type:6,data:d},{type:6,data:f},{type:6,data:_}];kn(r,F),F.push(...ut(p,E,M));let z=["rank","rank"],K=e.length>2;K&&(F.push(...ut(e[2].dims)),z.push("rank")),F.push(...ut(C));let q=R=>{let Z=p.length,H=ic("batchDims",e[0].dataType,Z,1),J=$r(e[0].dataType),Q=Ce("a",e[0].dataType,v,S),se=Ce("b",e[1].dataType,y,S),fe=tt("result",e[0].dataType,C.length,S),ae=[Q,se];if(K){let _e=o?S:1;ae.push(Ce("bias",e[2].dataType,e[2].dims.length,_e))}let V=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];An(r,V);let A=$r(fe.type.tensor),U=In(r,fe.type.value,A),ee=q_(S,K,U,[H,Q,se,fe],o);return`
  ${R.registerUniforms(V).registerInternalVariables(H).declareVariables(...ae,fe)}
  ${ee}
  ${T?Ru(I,g,J,H):ju(I,g,J,H)}
                   `};return{name:"MatMul",shaderCache:{hint:`${I};${r.activation};${T};${o}`,inputDependencies:z},getRunData:()=>({outputs:[{dims:n?n(t):t,dataType:e[0].dataType}],dispatchGroup:{x:w[0],y:w[1],z:w[2]},programUniforms:F}),getShaderSource:q}}}),Q_,py,ix=je(()=>{ft(),Rs(),Tt(),On(),dc(),ox(),mc(),Q_=(e,r,t,s,o=!1,n,i=4,a=4,l=4,u="f32")=>{let p=F=>{switch(F){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${u}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${F} is not supported.`)}},c=F=>{switch(F){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${F} is not supported.`)}},d=e?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,_=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,f=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",T=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",I=e?"row":"col",g=e?"col":"row",w=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${I} / outWidth;
    let outCol = ${I} % outWidth;

    let WRow = ${g} / (i32(uniforms.w_shape[1]) * inChannels);
    let WCol = ${g} / inChannels % i32(uniforms.w_shape[1]);
    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
    let xCh = ${g} % inChannels;
    var resData = ${Fr(i,u)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${f} && xCol >= 0 && xCol < ${T}) {
      ${d}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${p(i)}
    }
    return resData;`,S=e?r&&s?`
    let col = colIn * ${i};
    ${w}`:`
    let col = colIn * ${i};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
      ${w}
    }
    return ${Fr(i,u)}(0.0);`:s&&t?`
    let col = colIn * ${i};
    ${w}`:`
    let col = colIn * ${i};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${w}
    }
    return ${Fr(i,u)}(0.0);`,E=e?s&&t?c(a):`
    let col = colIn * ${a};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${c(a)}
    }
    return ${Fr(a,u)}(0.0);`:`
    let col = colIn * ${a};
    if (row < uniforms.dim_inner && col < uniforms.dim_a_outer) {
      ${c(a)}
    }
    return ${Fr(a,u)}(0.0);`,v=Fr(l,u),M=Fr(e?i:a,u),y=Fr(e?a:i,u),C=In(n,v,u);return`
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${M} {
      ${e?S:E}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${y} {
      ${e?E:S}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${v}) {
      let col = colIn * ${l};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)
      {
      var value = valueIn;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${_}
      ${cy(o)}
      ${C}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},py=(e,r,t,s,o,n,i,a,l)=>{let u=r.format==="NHWC",p=u?e[0].dims[3]:e[0].dims[1],c=t[0],d=u?t[2]:t[3],_=u?t[1]:t[2],f=u?t[3]:t[1],T=u&&(p%4===0||p%3===0)&&f%4===0,I=u?f:d*_,g=u?d*_:f,w=[8,8,1],S=s<=8?[4,1,1]:[4,4,1],E=[Math.ceil(I/w[0]/S[0]),Math.ceil(g/w[1]/S[1]),Math.ceil(c/w[2]/S[2])];kt("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${E}`);let v=T?u&&p%4!==0?3:4:1,M=w[1]*S[1],y=w[0]*S[0],C=Math.max(w[0]*v,w[1]),F=s%M===0,z=o%y===0,K=n%C===0,q=T?[v,4,4]:[1,1,1],R=[{type:6,data:s},{type:6,data:o},{type:6,data:n},{type:6,data:[r.pads[0],r.pads[1]]},{type:6,data:r.strides},{type:6,data:r.dilations}];kn(r,R),R.push(...ut(e[0].dims,e[1].dims));let Z=["rank","rank"];i&&(R.push(...ut(e[2].dims)),Z.push("rank")),R.push(...ut(t));let H=J=>{let Q=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];An(r,Q);let se=T?4:1,fe=$r(e[0].dataType),ae=`
      fn setOutputAtIndex(flatIndex : i32, value : ${T?`vec4<${fe}>`:fe}) {
        result[flatIndex] = ${T?`vec4<${fe}>`:fe}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${T?`vec4<${fe}>`:fe}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${T?"/ 4":""}, value);
      }`,V=Ce("x",e[0].dataType,e[0].dims.length,v===3?1:v),A=Ce("w",e[1].dataType,e[1].dims.length,se),U=[V,A],ee=tt("result",e[0].dataType,t.length,se);if(i){let _e=Ce("bias",e[2].dataType,e[2].dims.length,se);U.push(_e),ae+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${T?`vec4<${fe}>`:fe} {
          return bias[coords.${u?"w":"y"}${T?"/ 4":""}];
        }`}return`
        ${dy("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${J.registerUniforms(Q).declareVariables(...U,ee)}
        ${ae}
        ${Q_(u,F,z,K,i,r,q[0],q[1],q[2],fe)}
        ${T?Ru(S,w,fe,void 0,!u,C):ju(S,w,fe,void 0,!u,C,!1,void 0,a)}`};return{name:"Conv2DMatMul",shaderCache:{hint:`${r.cacheKey};${v};${T};${F};${z};${K};${M};${y};${C}`,inputDependencies:Z},getRunData:()=>({outputs:[{dims:l?l(t):t,dataType:e[0].dataType}],dispatchGroup:{x:E[0],y:E[1],z:E[2]},programUniforms:R}),getShaderSource:H}}}),X_,Zl,Bo,J_,eu,Y_,hy,my,ax=je(()=>{ft(),Rs(),xt(),Tt(),On(),dc(),X_=e=>{let r=1;for(let t=0;t<e.length;t++)r*=e[t];return r},Zl=e=>typeof e=="number"?[e,e,e]:e,Bo=(e,r)=>r<=1?e:e+(e-1)*(r-1),J_=(e,r,t,s=1)=>{let o=Bo(r,s);return Math.floor((e[0]*(t-1)-t+o)/2)},eu=(e,r,t,s,o)=>{o==null&&(o=J_(e,r[0],s[0]));let n=[0,0,0,t];for(let i=0;i<3;i++)e[i]+2*o>=r[i]&&(n[i]=Math.trunc((e[i]-r[i]+2*o)/s[i]+1));return n},Y_=(e,r,t,s,o,n,i,a,l,u)=>{let p,c,d,_;if(e==="VALID"&&(e=0),typeof e=="number"){p={top:e,bottom:e,left:e,right:e,front:e,back:e};let f=eu([r,t,s,1],[a,l,u],1,[o,n,i],e);c=f[0],d=f[1],_=f[2]}else if(Array.isArray(e)){if(!e.every((T,I,g)=>T===g[0]))throw Error(`Unsupported padding parameter: ${e}`);p={top:e[0],bottom:e[1],left:e[2],right:e[3],front:e[4],back:e[5]};let f=eu([r,t,s,1],[a,l,u],1,[o,n,i],e[0]);c=f[0],d=f[1],_=f[2]}else if(e==="SAME_UPPER"){c=Math.ceil(r/o),d=Math.ceil(t/n),_=Math.ceil(s/i);let f=(c-1)*o+a-r,T=(d-1)*n+l-t,I=(_-1)*i+u-s,g=Math.floor(f/2),w=f-g,S=Math.floor(T/2),E=T-S,v=Math.floor(I/2),M=I-v;p={top:S,bottom:E,left:v,right:M,front:g,back:w}}else throw Error(`Unknown padding parameter: ${e}`);return{padInfo:p,outDepth:c,outHeight:d,outWidth:_}},hy=(e,r,t,s,o,n=!1,i="channelsLast")=>{let a,l,u,p,c;if(i==="channelsLast")[a,l,u,p,c]=e;else if(i==="channelsFirst")[a,c,l,u,p]=e;else throw new Error(`Unknown dataFormat ${i}`);let[d,,_,f,T]=r,[I,g,w]=Zl(t),[S,E,v]=Zl(s),M=Bo(_,S),y=Bo(f,E),C=Bo(T,v),{padInfo:F,outDepth:z,outHeight:K,outWidth:q}=Y_(o,l,u,p,I,g,w,M,y,C),R=n?d*c:d,Z=[0,0,0,0,0];return i==="channelsFirst"?Z=[a,R,z,K,q]:i==="channelsLast"&&(Z=[a,z,K,q,R]),{batchSize:a,dataFormat:i,inDepth:l,inHeight:u,inWidth:p,inChannels:c,outDepth:z,outHeight:K,outWidth:q,outChannels:R,padInfo:F,strideDepth:I,strideHeight:g,strideWidth:w,filterDepth:_,filterHeight:f,filterWidth:T,effectiveFilterDepth:M,effectiveFilterHeight:y,effectiveFilterWidth:C,dilationDepth:S,dilationHeight:E,dilationWidth:v,inShape:e,outShape:Z,filterShape:r}},my=(e,r,t,s,o,n)=>{let i=n==="channelsLast";i?e[0].dims[3]:e[0].dims[1];let a=[64,1,1],l={x:t.map((I,g)=>g)},u=[Math.ceil(X_(l.x.map(I=>t[I]))/a[0]),1,1];kt("verbose",()=>`[conv3d_naive_webgpu] dispatch = ${u}`);let p=1,c=be.size(t),d=[{type:12,data:c},{type:12,data:s},{type:12,data:o},{type:12,data:r.strides},{type:12,data:r.dilations}];kn(r,d),d.push(...ut(e[0].dims,e[1].dims));let _=["rank","rank"],f=e.length===3;f&&(d.push(...ut(e[2].dims)),_.push("rank")),d.push(...ut(t));let T=I=>{let g=[{name:"output_size",type:"u32"},{name:"filter_dims",type:"u32",length:s.length},{name:"pads",type:"u32",length:o.length},{name:"strides",type:"u32",length:r.strides.length},{name:"dilations",type:"u32",length:r.dilations.length}];An(r,g);let w=1,S=$r(e[0].dataType),E=Ce("x",e[0].dataType,e[0].dims.length,p),v=Ce("W",e[1].dataType,e[1].dims.length,w),M=[E,v],y=tt("result",e[0].dataType,t.length,w),C="";if(f){let K=Ce("bias",e[2].dataType,e[2].dims.length,w);M.push(K),C+=`
        fn getBiasByOutputCoords(coords : array<u32, 5>) -> ${S} {
          return bias[${i?ot("coords",4,5):ot("coords",1,5)}];
        }`}let F=Fr(p,S),z=In(r,F,S);return`
            ${C}
            fn getX(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${E.getByIndices("aIndices")};
            }
            fn getW(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${v.getByIndices("aIndices")};
            }
          ${I.registerUniforms(g).declareVariables(...M,y)}
          ${I.mainStart()}
          ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
              let coords = ${y.offsetToIndices("global_idx")};
              let batch = ${ot("coords",0,E.rank)};
              let d2 = ${i?ot("coords",E.rank-1,E.rank):ot("coords",1,E.rank)};
              let xFRCCorner = vec3<u32>(${i?ot("coords",1,E.rank):ot("coords",2,E.rank)},
              ${i?ot("coords",2,E.rank):ot("coords",3,E.rank)},
              ${i?ot("coords",3,E.rank):ot("coords",4,E.rank)}) * uniforms.strides - uniforms.pads;
              let xFCorner = xFRCCorner.x;
              let xRCorner = xFRCCorner.y;
              let xCCorner = xFRCCorner.z;
              let xShapeY = ${i?ot("uniforms.x_shape",1,E.rank):ot("uniforms.x_shape",2,E.rank)};
              let xShapeZ = ${i?ot("uniforms.x_shape",2,E.rank):ot("uniforms.x_shape",3,E.rank)};
              let xShapeW = ${i?ot("uniforms.x_shape",3,E.rank):ot("uniforms.x_shape",4,E.rank)};
              let xShapeU = ${i?ot("uniforms.x_shape",4,E.rank):ot("uniforms.x_shape",1,E.rank)};
              let inputDepthNearestVec4 = (xShapeU / 4) * 4;
              let inputDepthVec4Remainder = xShapeU % 4;

              var value = 0.0;
              for (var wF = 0u; wF < uniforms.filter_dims[0]; wF++) {
                let xF = xFCorner + wF * uniforms.dilations[0];
                if (xF < 0 || xF >= xShapeY) {
                  continue;
                }

                for (var wR = 0u; wR < uniforms.filter_dims[1]; wR++) {
                  let xR = xRCorner + wR * uniforms.dilations[1];
                  if (xR < 0 || xR >= xShapeZ) {
                    continue;
                  }

                  for (var wC = 0u; wC < uniforms.filter_dims[2]; wC++) {
                    let xC = xCCorner + wC * uniforms.dilations[2];
                    if (xC < 0 || xC >= xShapeW) {
                      continue;
                    }

                    for (var d1 = 0u; d1 < inputDepthNearestVec4; d1 += 4) {
                      ${i?`let xValues = vec4<f32>(
                               getX(batch, xF, xR, xC, d1),
                               getX(batch, xF, xR, xC, d1 + 1),
                               getX(batch, xF, xR, xC, d1 + 2),
                               getX(batch, xF, xR, xC, d1 + 3));
                            `:`let xValues = vec4<f32>(
                               getX(batch, d1, xF, xR, xC),
                               getX(batch, d1 + 1, xF, xR, xC),
                               getX(batch, d1 + 2, xF, xR, xC),
                               getX(batch, d1 + 3, xF, xR, xC));
                            `}
                            let wValues = vec4<f32>(
                              getW(d2, d1, wF, wR, wC),
                              getW(d2, d1 + 1, wF, wR, wC),
                              getW(d2, d1 + 2, wF, wR, wC),
                              getW(d2, d1 + 3, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                    if (inputDepthVec4Remainder == 1) {
                        ${i?`value += getX(batch, xF, xR, xC, inputDepthNearestVec4)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`:`value += getX(batch, inputDepthNearestVec4, xF, xR, xC)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`}
                    } else if (inputDepthVec4Remainder == 2) {
                      ${i?`let xValues = vec2<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1));
                      `:`let xValues = vec2<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC));
                    `}
                    let wValues = vec2<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC));
                      value += dot(xValues, wValues);
                    } else if (inputDepthVec4Remainder == 3) {
                      ${i?`let xValues = vec3<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2));
                      `:`let xValues = vec3<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 2, xF, xR, xC));
                    `}
                    let wValues = vec3<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 2, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                  }
                }
              }
              ${f?"value = value + getBiasByOutputCoords(coords)":""};
              ${z}
              result[global_idx] = f32(value);
          }`};return{name:"Conv3DNaive",shaderCache:{hint:`${r.cacheKey};${i};${p};${f}`,inputDependencies:_},getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:u[0],y:u[1],z:u[2]},programUniforms:d}),getShaderSource:T}}}),fy,_y,lx=je(()=>{ft(),xt(),Tt(),On(),fy=(e,r,t,s)=>{let o=e.length>2,n=o?"value += b[output_channel];":"",i=e[0].dims,a=e[1].dims,l=r.format==="NHWC",u=l?t[3]:t[1],p=u/r.group,c=l&&p>=4?nr(u):1,d=be.size(t)/c,_=[{type:12,data:d},{type:12,data:r.dilations},{type:12,data:[r.strides[0],r.strides[1]]},{type:12,data:[r.pads[0],r.pads[1]]},{type:12,data:p}];kn(r,_),_.push(...ut(i,[a[0],a[1],a[2],a[3]/c]));let f=o?["rank","rank","rank"]:["rank","rank"];_.push(...ut([t[0],t[1],t[2],t[3]/c]));let T=I=>{let g=tt("output",e[0].dataType,t.length,c),w=$r(g.type.tensor),S=In(r,g.type.value,w),E=Ce("x",e[0].dataType,i.length),v=Ce("w",e[1].dataType,a.length,c),M=[E,v];o&&M.push(Ce("b",e[2].dataType,e[2].dims,c));let y=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:r.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];An(r,y);let C=l?`
      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[0]; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

        if (xHeight < 0u || xHeight >= uniforms.x_shape[1]) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[1]; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
          if (xWidth < 0u || xWidth >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[2]; wInChannel++) {
            let input_channel = in_channel_offset + wInChannel;
            let xVal = ${E.get("batch","xHeight","xWidth","input_channel")};
            let wVal = ${v.get("wHeight","wWidth","wInChannel","output_channel")};
            value += xVal * wVal;
          }
        }
      }
      `:`
      for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {
        let input_channel = in_channel_offset + wInChannel;
        for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {
          let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

          if (xHeight < 0u || xHeight >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {
            let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
            if (xWidth < 0u || xWidth >= uniforms.x_shape[3]) {
              continue;
            }

            let xVal = ${E.get("batch","input_channel","xHeight","xWidth")};
            let wVal = ${v.get("output_channel","wInChannel","wHeight","wWidth")};
            value += xVal * wVal;
          }
        }
      }
      `;return`
  ${I.registerUniforms(y).declareVariables(...M,g)}

  ${I.mainStart()}
    ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let outputIndices = ${g.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${l?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${l?1:2}], outputIndices[${l?2:3}]) * uniforms.strides - uniforms.pads;
    let group_id: u32 = output_channel * ${c} / uniforms.output_channels_per_group;
    var in_channel_offset = group_id * uniforms.w_shape[${l?2:1}];

    var value: ${g.type.value} = ${g.type.value}(0);
    ${C}
    ${n}
    ${S}
    ${g.setByOffset("global_idx","value")}
  }`};return{name:"GroupedConv",shaderCache:{hint:`${r.cacheKey}_${c}`,inputDependencies:f},getRunData:()=>({outputs:[{dims:s?s(t):t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:_}),getShaderSource:T}},_y=(e,r,t,s)=>{let o=e.length>2,n=nr(t[3]),i=nr(t[2]),a=be.size(t)/n/i,l=[e[0].dims[0],e[0].dims[1],e[0].dims[2],e[0].dims[3]/n],u=[e[1].dims[0],e[1].dims[1],e[1].dims[2],e[1].dims[3]/n],p=[t[0],t[1],t[2],t[3]/n],c=[{type:12,data:a},{type:6,data:[r.strides[0],r.strides[1]]},{type:6,data:[r.pads[0],r.pads[1]]}];kn(r,c),c.push(...ut(l,u,p));let d=(i-1)*r.strides[1]+u[1],_=f=>{let T=tt("output",e[0].dataType,p.length,n),I=$r(T.type.tensor),g=In(r,T.type.value,I),w=Ce("x",e[0].dataType,l.length,n),S=Ce("w",e[1].dataType,u.length,n),E=[w,S];o&&E.push(Ce("b",e[2].dataType,e[2].dims,n));let v=o?"value += b[output_channel];":"",M=[{name:"output_size",type:"u32"},{name:"strides",type:"i32",length:2},{name:"pads",type:"i32",length:2}];return An(r,M),`
  ${f.registerUniforms(M).declareVariables(...E,T)}
  ${f.mainStart()}
    ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let width0 = uniforms.output_shape[3];
    let output_channel = global_idx % width0;
    var index1 = global_idx / width0;
    let width1 = uniforms.output_shape[2] / ${i}u;
    let col = (index1 % width1) * ${i}u;
    index1 = index1 / width1;
    let row = index1 % uniforms.output_shape[1];
    let batch = index1 / uniforms.output_shape[1];

    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;

    var x_vals: array<${w.type.value}, ${d}>;
    var values: array<${T.type.value}, ${i}>;
    let input_channel = output_channel;
    // Use constant instead of uniform can give better performance for w's height/width.
    for (var w_height: u32 = 0u; w_height < ${u[0]}; w_height++) {
      let x_height = x_corner.x + i32(w_height);
      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {
        for (var i = 0; i < ${d}; i++) {
          let x_width = x_corner.y + i;
          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {
            x_vals[i] = ${w.get("batch","u32(x_height)","u32(x_width)","input_channel")};
          } else {
            x_vals[i] = ${w.type.value}(0);
          }
        }
        for (var w_width: u32 = 0u; w_width < ${u[1]}; w_width++) {
          let w_val = ${S.get("w_height","w_width","0","output_channel")};
          for (var i = 0u; i < ${i}u; i++) {
            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);
          }
        }
      }
    }

    for (var i = 0u; i < ${i}u; i++) {
      var value = values[i];
      ${v}
      ${g}
      ${T.set("batch","row","col + i","output_channel","value")};
    }
  }`};return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${r.cacheKey};${n};${i};${d};${u[0]};${u[1]}`,inputDependencies:o?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:s?s(t):t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:c}),getShaderSource:_}}}),Z_,Yi,eg,Zi,Nu,tu,tg,rg,Vu,ux=je(()=>{xt(),ix(),ax(),mc(),lx(),On(),hc(),Zs(),Z_=(e,r,t,s,o,n)=>{let i=e[0],a=e.slice(n?1:2,n?3:4),l=a.length,u=r[0],p=r.slice(2).map((d,_)=>d+(d-1)*(t[_]-1)),c=a.map((d,_)=>d+s[_]+s[_+l]).map((d,_)=>Math.floor((d-p[_]+o[_])/o[_]));return c.splice(0,0,i),c.splice(n?3:1,0,u),c},Yi=[2,3,1,0],eg=(e,r)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length>5)throw new Error("greater than 5D is not supported");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let t=e[0].dims[r.format==="NHWC"?e[0].dims.length-1:1],s=e[1].dims[1]*r.group;if(t!==s)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let o=e[0].dims.length-2;if(r.dilations.length!==o)throw new Error(`dilations should be ${o}D`);if(r.strides.length!==o)throw new Error(`strides should be ${o}D`);if(r.pads.length!==o*2)throw new Error(`pads should be ${o*2}D`);if(r.kernelShape.length!==0&&r.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},Zi=(e,r)=>{let t=e.kernelShape.slice();t.length<r[1].dims.length-2&&t.push(...Array(r[1].dims.length-2-t.length).fill(0));for(let n=2;n<r[1].dims.length;++n)t[n-2]===0&&(t[n-2]=r[1].dims[n]);let s=e.pads.slice();ca.adjustPadsBasedOnAutoPad(r[0].dims,e.strides,e.dilations,t,s,e.format==="NHWC",e.autoPad);let o=Object.assign({},e);return Object.assign(o,{kernelShape:t,pads:s}),o},Nu=e=>{let r=cc(e),t=e.format,s=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],o=e.dilations,n=e.group,i=e.kernel_shape,a=e.pads,l=e.strides,u=e.w_is_const();return{autoPad:s,format:t,dilations:o,group:n,kernelShape:i,pads:a,strides:l,wIsConst:u,...r,cacheKey:`${e.format};${r.activation};`}},tu=(e,r,t,s)=>{let o=t.format==="NHWC",n=Z_(r[0].dims,r[1].dims,t.dilations,t.pads,t.strides,o);if(t.group!==1){let M=[r[0]];if(o){let y=e.kernelCustomData.wT??e.compute(Jr(r[1],Yi),{inputs:[1],outputs:[t.wIsConst?-2:-1]})[0];t.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=y),M.push(y)}else M.push(r[1]);r.length===3&&M.push(r[2]),!e.adapterInfo.isArchitecture("ampere")&&o&&r[1].dims[0]===t.group&&r[1].dims[1]===1&&t.dilations[0]===1&&t.dilations[1]===1?e.compute(_y(M,t,n,s),{inputs:M}):e.compute(fy(M,t,n,s),{inputs:M});return}let i=r.length===3,a=r[0].dims[o?1:2],l=r[0].dims[o?2:3],u=r[0].dims[o?3:1],p=r[1].dims[2],c=r[1].dims[3],d=n[o?1:2],_=n[o?2:3],f=n[o?3:1],T=o&&p===a&&c===l&&t.pads[0]===0&&t.pads[1]===0;if(T||p===1&&c===1&&t.dilations[0]===1&&t.dilations[1]===1&&t.strides[0]===1&&t.strides[1]===1&&t.pads[0]===0&&t.pads[1]===0){let M=n[0],y,C,F,z=[];if(o){let R=e.kernelCustomData.wT??e.compute(Jr(r[1],Yi),{inputs:[1],outputs:[t.wIsConst?-2:-1]})[0];if(t.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=R),T){let Z=a*l*u;y=r[0].reshape([1,M,Z]),C=R.reshape([1,Z,f]),F=[1,M,f]}else y=r[0].reshape([M,a*l,u]),C=R.reshape([1,u,f]),F=[M,d*_,f];z.push(y),z.push(C)}else y=r[0].reshape([M,u,a*l]),C=r[1].reshape([1,f,u]),F=[M,f,d*_],z.push(C),z.push(y);i&&z.push(r[2]);let K=F[2],q=z[0].dims[z[0].dims.length-1];K<8&&q<8?e.compute(pc(z,t,n,F,o,s),{inputs:z}):e.compute(pa(z,t,n,F,o,s),{inputs:z});return}let I=!0,g=e.kernelCustomData.wT??e.compute(Jr(r[1],Yi),{inputs:[1],outputs:[t.wIsConst?-2:-1]})[0];t.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=g);let w=[r[0],g];i&&w.push(r[2]);let S=o?d*_:f,E=o?f:d*_,v=p*c*u;e.compute(py(w,t,n,S,E,v,i,I,s),{inputs:w})},tg=(e,r)=>{let t=r.format==="NHWC",s=[e.inputs[0].reshape(t?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&s.push(e.inputs[2]);let o=[0,r.pads[0],0,r.pads[1]],n=[1].concat(r.strides),i=[1].concat(r.dilations),a=[1].concat(r.kernelShape),l=Zi({...r,pads:o,strides:n,dilations:i,kernelShape:a},s);tu(e,s,l,u=>t?[u[0],u[2],u[3]]:[u[0],u[1],u[3]])},rg=(e,r,t)=>{let s=t.format==="NHWC"?"channelsLast":"channelsFirst",o=Zi(t,r),n=t.autoPad==="NOTSET"?t.pads:t.autoPad,i=hy(r[0].dims,r[1].dims,t.strides,t.dilations,n,!1,s);e.compute(my(r,o,i.outShape,[i.filterDepth,i.filterHeight,i.filterWidth],[i.padInfo.front,i.padInfo.top,i.padInfo.left],s))},Vu=(e,r)=>{if(eg(e.inputs,r),e.inputs[0].dims.length===3)tg(e,r);else if(e.inputs[0].dims.length===5)rg(e,e.inputs,r);else{let t=Zi(r,e.inputs);tu(e,e.inputs,t)}}}),gy,cx=je(()=>{ft(),Rs(),xt(),Tt(),gy=(e,r,t)=>{let s=e.length>2,o=r.outputShape,n=r.format==="NHWC",i=r.group,a=e[1].dims,l=a[2]/i,u=a[3],p=n?nr(l):1,c=n&&u===1&&l>=4,d=c?Math.floor(l/4)*4:Math.floor(l/p)*p,_=l-d,f=n?nr(u):1,T=n?u===1?p:f:1,I=be.size(o)/f,g=[Math.ceil(I/64),1,1];kt("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${g}`);let w=["rank","rank"],S=[r.strides[0],r.strides[1]],E=[r.kernelShape[n?1:2],r.kernelShape[n?2:3]],v=[r.dilations[0],r.dilations[1]],M=[E[0]+(r.dilations[0]<=1?0:(r.kernelShape[n?1:2]-1)*(r.dilations[0]-1)),E[1]+(r.dilations[1]<=1?0:(r.kernelShape[n?2:3]-1)*(r.dilations[1]-1))],y=[M[0]-1-Math.floor((r.pads[0]+r.pads[2])/2),M[1]-1-Math.floor((r.pads[1]+r.pads[3])/2)],C=[{type:12,data:I},{type:12,data:S},{type:12,data:E},{type:12,data:v},{type:12,data:M},{type:6,data:y},{type:12,data:d},{type:12,data:l},{type:12,data:u},...ut(e[0].dims,e[1].dims)];s&&(C.push(...ut(e[2].dims)),w.push("rank")),C.push(...ut(o));let F=z=>{let K=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:S.length},{name:"filter_dims",type:"u32",length:E.length},{name:"dilations",type:"u32",length:E.length},{name:"effective_filter_dims",type:"u32",length:M.length},{name:"pads",type:"i32",length:y.length},{name:"input_channels_per_group_int",type:"u32"},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],q=$r(e[0].dataType),R=n?1:2,Z=n?2:3,H=n?3:1,J=Ce("W",e[1].dataType,e[1].dims.length,T),Q=Ce("Dy",e[0].dataType,e[0].dims.length,p),se=[Q,J];s&&se.push(Ce("bias",e[2].dataType,[o[H]].length,f));let fe=tt("result",e[0].dataType,o.length,f),ae=()=>{let U="";if(c)p===4?U+=`
        let xValue = ${Q.getByOffset("x_offset")};
        let wValue = ${J.getByOffset("w_offset")};
        dotProd = dotProd + dot(xValue, wValue);
        x_offset += 1u;
        w_offset += 1u;`:p===2?U+=`
          dotProd = dotProd + dot(vec4<${q}>(${Q.getByOffset("x_offset")}, ${Q.getByOffset("x_offset + 1u")}), vec4<${q}>(${J.getByOffset("w_offset")}, ${J.getByOffset("w_offset + 1u")}));
          x_offset += 2u;
          w_offset += 2u;`:p===1&&(U+=`
          dotProd = dotProd + dot(vec4<${q}>(${Q.getByOffset("x_offset")}, ${Q.getByOffset("x_offset + 1u")}, ${Q.getByOffset("x_offset + 2u")}, ${Q.getByOffset("x_offset + 3u")}), vec4<${q}>(${J.getByOffset("w_offset")}, ${J.getByOffset("w_offset + 1u")}, ${J.getByOffset("w_offset + 2u")}, ${J.getByOffset("w_offset + 3u")}));
          x_offset += 4u;
          w_offset += 4u;`);else if(U+=`
                  let xValue = ${n?Q.getByOffset(`${Q.indicesToOffset(`${Q.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${p}`):Q.get("batch","inputChannel","idyR","idyC")};
        `,p===1)U+=`
          let w_offset = ${J.indicesToOffset(`${J.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel, wOutChannel)`)};
          let wValue = ${J.getByOffset(`w_offset / ${T}`)};
          dotProd = dotProd + xValue * wValue;`;else for(let ee=0;ee<p;ee++)U+=`
            let wValue${ee} = ${J.getByOffset(`${J.indicesToOffset(`${J.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel + ${ee}, wOutChannel)`)} / ${T}`)};
            dotProd = dotProd + xValue[${ee}] * wValue${ee};`;return U},V=()=>{if(_===0)return"";if(!c)throw new Error(`packInputAs4 ${c} is not true.`);let U="";if(p===1){U+="dotProd = dotProd";for(let ee=0;ee<_;ee++)U+=`
            + ${Q.getByOffset(`x_offset + ${ee}`)} * ${J.getByOffset(`w_offset + ${ee}`)}`;U+=";"}else if(p===2){if(_!==2)throw new Error(`Invalid inputChannelsRemainder ${_}.`);U+=`
          let xValue = ${Q.getByOffset("x_offset")};
          let wValue = ${J.getByOffset("w_offset")};
          dotProd = dotProd + dot(xValue, wValue);`}return U},A=`
            let outputIndices = ${fe.offsetToIndices(`global_idx * ${f}`)};
            let batch = ${fe.indicesGet("outputIndices",0)};
            let d1 = ${fe.indicesGet("outputIndices",H)};
            let r = ${fe.indicesGet("outputIndices",R)};
            let c = ${fe.indicesGet("outputIndices",Z)};
            let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;
            let dyRCorner = dyCorner.x;
            let dyCCorner = dyCorner.y;
            let groupId = d1 / uniforms.output_channels_per_group;
            let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;
            // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
            // ? = to be determined. : = across all values in that axis.
            var dotProd = ${fe.type.value}(0.0);
            var wR: u32 = 0;
            if (uniforms.dilations.x == 1) {
              // Minimum wR >= 0 that satisfies (dyRCorner + wR) % (uniforms.strides.x) == 0
              wR = u32(((dyRCorner + i32(uniforms.strides.x) - 1) / i32(uniforms.strides.x)) * i32(uniforms.strides.x) - dyRCorner);
            }
            for (; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {
              if (wR % uniforms.dilations.x != 0) {
                continue;
              }
              let dyR = (${q}(dyRCorner) + ${q}(wR)) / ${q}(uniforms.strides[0]);
              let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;
              if (dyR < 0.0 || dyR >= ${q}(uniforms.Dy_shape[${R}]) || fract(dyR) > 0.0 ||
                  wRPerm < 0) {
                continue;
              }
              let idyR: u32 = u32(dyR);
              var wC: u32 = 0;
              if (uniforms.dilations.y == 1) {
                // Minimum wC >= 0 that satisfies (dyCCorner + wC) % (uniforms.strides.y) == 0
                wC = u32(((dyCCorner + i32(uniforms.strides.y) - 1) / i32(uniforms.strides.y)) * i32(uniforms.strides.y) - dyCCorner);
              }
              for (; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {
                if (wC % uniforms.dilations.y != 0) {
                  continue;
                }
                let dyC = (${q}(dyCCorner) + ${q}(wC)) / ${q}(uniforms.strides.y);
                let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;
                if (dyC < 0.0 || dyC >= ${q}(uniforms.Dy_shape[${Z}]) ||
                    fract(dyC) > 0.0 || wCPerm < 0) {
                  continue;
                }
                let idyC: u32 = u32(dyC);
                var inputChannel = groupId * uniforms.input_channels_per_group;
                ${c?`
                var x_offset = ${Q.indicesToOffset(`${Q.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${p};
                var w_offset = ${J.indicesToOffset(`${J.type.indices}(wRPerm, wCPerm, inputChannel, wOutChannel)`)} / ${T};
                  `:""}
                for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group_int; d2 = d2 + ${c?4:p}) {
                  ${ae()}
                  inputChannel = inputChannel + ${c?4:p};
                }
                ${V()}
                wC = wC + uniforms.strides.y - 1;
              }
              wR = wR + uniforms.strides[0] - 1;
            }
            let value = dotProd${s?` + bias[d1 / ${f}]`:""};
            ${fe.setByOffset("global_idx","value")};
          `;return`
    ${z.registerUniforms(K).declareVariables(...se,fe)}
      ${z.mainStart()}
      ${z.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};
    ${A}}`};return{name:"ConvTranspose2D",shaderCache:{hint:`${r.cacheKey};${p}${T}${f}${c}${_}`,inputDependencies:w},getRunData:()=>({dispatchGroup:{x:g[0],y:g[1],z:g[2]},outputs:[{dims:t?t(o):o,dataType:e[0].dataType}],programUniforms:C}),getShaderSource:F}}}),sg,ng,og,ru,wy,ig,su,ag,My,dx=je(()=>{cx(),On(),Zs(),sg=(e,r,t,s,o,n)=>(e-1)*r+t+(s-1)*o+1-n,ng=(e,r,t,s,o)=>{let n=Math.floor(e/2);r==="SAME_UPPER"?(t[s]=n,t[o]=e-n):r==="SAME_LOWER"&&(t[s]=e-n,t[o]=n)},og=(e,r,t,s,o,n,i,a,l,u)=>{let p=e.length-2,c=u.length===0;l.length<p&&l.push(...Array(p-l.length).fill(0));let d=e[0],_=r[a?3:1]*o;for(let f=0,T=e.length-p-(a?1:0);f<p;++f,++T){let I=e[T],g=c?I*i[f]:u[f],w=sg(I,i[f],n[f],r[T],t[f],g);ng(w,s,n,f,f+p),c&&u.push(i[f]*(I-1)+l[f]+(r[T]-1)*t[f]+1-n[f]-n[f+p])}u.splice(0,0,d),u.splice(a?3:1,0,_)},ru=(e,r)=>{let t=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((c,d)=>c*d,1)===0){t.length=0;for(let c=2;c<r[1].dims.length;++c)t.push(r[1].dims[c])}let s=e.format==="NHWC";t.splice(0,0,r[1].dims[0]),t.splice(s?3:1,0,r[1].dims[1]);let o=e.pads.slice(),n=e.outputShape.slice(),i=e.outputPadding.slice(),a=r[0].dims,l=e.dilations.slice();if(l.reduce((c,d)=>c+d,0)===0){let c=r[0].dims.length-2;l=new Array(c).fill(1)}let u=e.strides.slice();if(u.reduce((c,d)=>c+d,0)===0){let c=r[0].dims.length-2;u=new Array(c).fill(1)}og(a,t,l,e.autoPad,e.group,o,u,s,i,n);let p=Object.assign({},e);return Object.assign(p,{kernelShape:t,pads:o,outputPadding:i,outputShape:n,dilations:l,strides:u}),p},wy=e=>{let r=cc(e),t=e.format,s=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],o=e.dilations,n=e.group,i=e.kernelShape,a=e.pads,l=e.strides,u=e.wIsConst(),p=e.outputPadding,c=e.outputShape;return{autoPad:s,format:t,dilations:o,group:n,kernelShape:i,outputPadding:p,outputShape:c,pads:a,strides:l,wIsConst:u,...r,cacheKey:`${e.format};${r.activation};`}},ig=(e,r)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let t=e[0].dims[r.format==="NHWC"?e[0].dims.length-1:1],s=e[1].dims[0];if(t!==s)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let o=e[1].dims[1]*r.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==o))throw new Error("invalid bias");let n=e[0].dims.length-2;if(r.dilations.reduce((i,a)=>i+a,0)>0&&r.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(r.strides.reduce((i,a)=>i+a,0)>0&&r.strides.length!==n)throw new Error(`strides should be ${n}D`);if(r.pads.reduce((i,a)=>i+a,0)>0&&r.pads.length!==n*2)throw new Error(`pads should be ${n*2}D`);if(r.outputPadding.length!==n&&r.outputPadding.length!==0)throw new Error(`output_padding should be ${n}D`);if(r.kernelShape.reduce((i,a)=>i+a,0)>0&&r.kernelShape.length!==0&&r.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(r.outputShape.length!==0&&r.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},su=(e,r,t,s)=>{let o=e.kernelCustomData.wT??e.compute(Jr(r[1],[2,3,0,1]),{inputs:[1],outputs:[t.wIsConst?-2:-1]})[0];t.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=o);let n=[r[0],o];r.length===3&&n.push(r[2]),e.compute(gy(n,t,s),{inputs:n})},ag=(e,r)=>{let t=r.format==="NHWC",s=[e.inputs[0].reshape(t?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&s.push(e.inputs[2]);let o=r.kernelShape;(o.length===0||o[0]===0)&&(o=[e.inputs[1].dims[2]]);let n=r.dilations;(n.length===0||n[0]===0)&&(n=[1]);let i=r.strides;(i.length===0||i[0]===0)&&(i=[1]);let a=r.pads;a.length===0&&(a=[0,0]),a=[0,a[0],0,a[1]],i=[1].concat(i),n=[1].concat(n),o=[1].concat(o);let l=r.outputPadding;l=[0].concat(l);let u=ru({...r,pads:a,strides:i,dilations:n,kernelShape:o,outputPadding:l},s);su(e,s,u,p=>t?[p[0],p[2],p[3]]:[p[0],p[1],p[3]])},My=(e,r)=>{if(ig(e.inputs,r),e.inputs[0].dims.length===3)ag(e,r);else{let t=ru(r,e.inputs);su(e,e.inputs,t)}}}),lg,by,yy,px=je(()=>{ft(),xt(),lr(),Tt(),lg=(e,r,t,s)=>{let o=be.size(r),n=r.length,i=Ce("input",e,n),a=tt("output",e,n),l=t.dataType===6?t.getInt32Array()[0]:Number(t.getBigInt64Array()[0]),u=be.normalizeAxis(l,n),p=c=>{let d=` i32(${i.indicesGet("inputIndices","uniforms.axis")}) `,_=ot("uniforms.input_shape","uniforms.axis",n),f=s.reverse?d+(s.exclusive?" + 1":""):"0",T=s.reverse?_:d+(s.exclusive?"":" + 1");return`
                ${c.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(i,a)}
                ${c.mainStart()}
                  ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${a.offsetToIndices("global_idx")};
                  var sum = ${a.type.value}(0);
                  let first : i32 = ${f};
                  let last : i32 = ${T};
                  for (var i : i32 = first; i < last; i++) {
                    ${i.indicesSet("inputIndices","uniforms.axis","u32(i)")};
                    sum = sum + ${i.getByIndices("inputIndices")};
                  }
                  ${a.setByOffset("global_idx","sum")};
                }`};return{name:"CumSum",shaderCache:{hint:s.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:[{type:12,data:o},{type:12,data:u},...ut(r,r)]}),getShaderSource:p}},by=(e,r)=>{let t=e.inputs[0].dims,s=e.inputs[0].dataType,o=e.inputs[1];e.compute(lg(s,t,o,r),{inputs:[0]})},yy=e=>{let r=e.exclusive===1,t=e.reverse===1;return Nt({exclusive:r,reverse:t})}}),ug,cg,dg,vy,xy,hx=je(()=>{ft(),xt(),lr(),Tt(),ug=e=>{if(!e||e.length!==1)throw new Error("DepthToSpace requires 1 input.");if(e[0].dims.length!==4)throw new Error("DepthToSpace requires 4D input.")},cg=(e,r,t,s)=>{let o=[];o.push(`fn perm(i: ${s.type.indices}) -> ${t.type.indices} {
    var a: ${t.type.indices};`);for(let n=0;n<r;++n)o.push(t.indicesSet("a",e[n],`i[${n}]`));return o.push("return a;}"),o.join(`
`)},dg=(e,r)=>{let t,s,o,n,i,a,l=r.format==="NHWC",u=r.blocksize,p=r.mode==="DCR";l?([t,s,o,n]=e.dims,i=p?[t,s,o,u,u,n/u**2]:[t,s,o,n/u**2,u,u],a=p?[0,1,3,2,4,5]:[0,1,4,2,5,3]):([t,s,o,n]=[e.dims[0],e.dims[2],e.dims[3],e.dims[1]],i=p?[t,u,u,n/u**2,s,o]:[t,n/u**2,u,u,s,o],a=p?[0,3,4,1,5,2]:[0,1,4,2,5,3]);let c=e.reshape(i),d=c.dims.length,_=e.dataType,f=Ce("a",_,d),T=tt("output",_,d),I=g=>`
  ${g.registerUniform("output_size","u32").declareVariables(f,T)}

  ${cg(a,d,f,T)}

  ${g.mainStart()}
    ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${T.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${T.setByOffset("global_idx",f.getByIndices("aIndices"))}
  }`;return{name:"DepthToSpace",shaderCache:{hint:`${e.dims};${r.blocksize};${r.mode}`,inputDependencies:["rank"]},getRunData:g=>{let w=l?[t,s*u,o*u,n/u**2]:[t,n/u**2,s*u,o*u],S=be.size(w),E=c.dims,v=be.sortBasedOnPerm(E,a);return{outputs:[{dims:w,dataType:g[0].dataType}],dispatchGroup:{x:Math.ceil(S/64)},programUniforms:[{type:12,data:S},...ut(E,v)]}},getShaderSource:I}},vy=(e,r)=>{ug(e.inputs),e.compute(dg(e.inputs[0],r))},xy=e=>Nt({blocksize:e.blocksize,mode:e.mode,format:e.format})}),ea,Ro,nu,pg,hg,mg,fg,ou,_g,Ty,Ey,mx=je(()=>{ft(),xt(),lr(),Tt(),ea="[a-zA-Z]|\\.\\.\\.",Ro="("+ea+")+",nu="^"+Ro+"$",pg="("+Ro+",)*"+Ro,hg="^"+pg+"$",mg=class{constructor(e=-1){this.symbolToIndices=new Map,this.inputIndex=e}addSymbol(e,r){let t=this.symbolToIndices.get(e);t===void 0?t=[r]:t.push(r),this.symbolToIndices.set(e,t)}},fg=class{constructor(e,r){var o;this.equation=r,this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[t,s]=r.includes("->")?r.split("->",2):[r,""];if(!t.match(RegExp(hg)))throw new Error("Invalid LHS term");if(t.split(",").forEach((n,i)=>{let a=e[i].dims.slice();if(!n.match(RegExp(nu)))throw new Error("Invalid LHS term");let l=this.processTerm(n,!0,a,i);this.lhs.push(l)}),s==="")s+=[...this.symbolToInfo.entries()].filter(([n,i])=>i.count===1||n==="...").map(([n])=>n).join("");else if(!s.match(RegExp(Ro)))throw new Error("Invalid RHS");(o=s.match(RegExp(ea,"g")))==null||o.forEach(n=>{if(n==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let i=this.symbolToInfo.get(n);if(i===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(i.dimValue)}}),this.rhs=this.processTerm(s,!1,this.outputDims)}addSymbol(e,r,t){let s=this.symbolToInfo.get(e);if(s!==void 0){if(s.dimValue!==r&&s.count!==1)throw new Error("Dimension mismatch");s.count++,s.inputIndices.push(t)}else s={count:1,dimValue:r,inputIndices:[t]};this.symbolToInfo.set(e,s)}processTerm(e,r,t,s=-1){let o=t.length,n=!1,i=[],a=0;if(!e.match(RegExp(nu))&&!r&&e!=="")throw new Error("Invalid LHS term");let l=e.match(RegExp(ea,"g")),u=new mg(s);return l==null||l.forEach((p,c)=>{if(p==="..."){if(n)throw new Error("Only one ellipsis is allowed per input term");n=!0;let d=o-l.length+1;if(d<0)throw new Error("Ellipsis out of bounds");if(i=t.slice(a,a+d),this.hasEllipsis){if(this.ellipsisDims.length!==i.length||this.ellipsisDims.toString()!==i.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=i;else throw new Error("Ellipsis must be specified in the LHS");for(let _=0;_<i.length;_++){let f=String.fromCharCode(48+_);u.addSymbol(f,c+_),this.addSymbol(f,t[a++],s)}}else u.addSymbol(p,c+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(p,t[a++],s)}),u}},ou=e=>e+"_max",_g=(e,r,t,s)=>{let o=e.map(u=>u.length).map((u,p)=>Ce(`input${p}`,r,u)),n=be.size(s),i=tt("output",r,s.length),a=[...t.symbolToInfo.keys()].filter(u=>!t.rhs.symbolToIndices.has(u)),l=u=>{let p=[],c="var prod = 1.0;",d="var sum = 0.0;",_="sum += prod;",f=[],T=[],I=[],g=[],w=t.symbolToInfo.size===t.rhs.symbolToIndices.size;t.symbolToInfo.forEach((E,v)=>{var M;if(t.rhs.symbolToIndices.has(v)){let y=(M=t.rhs.symbolToIndices.get(v))==null?void 0:M[0];y!==void 0&&t.lhs.forEach((C,F)=>{if(E.inputIndices.includes(F)){let z=C.symbolToIndices.get(v);if(z===void 0)throw new Error("Invalid symbol error");z.forEach(K=>{p.push(`${o[F].indicesSet(`input${F}Indices`,K,i.indicesGet("outputIndices",y))}`)})}})}else t.lhs.forEach((y,C)=>{if(E.inputIndices.includes(C)){let F=y.symbolToIndices.get(v);if(F===void 0)throw new Error("Invalid symbol error");F.forEach(z=>{f.push(`${o[C].indicesSet(`input${C}Indices`,z,`${v}`)}`)}),g.push(`prod *= ${o[C].getByIndices(`input${C}Indices`)};`)}}),T.push(`for(var ${v}: u32 = 0; ${v} < uniforms.${ou(v)}; ${v}++) {`),I.push("}")});let S=w?[...p,`let sum = ${o.map((E,v)=>E.getByIndices(`input${v}Indices`)).join(" * ")};`]:[...p,d,...T,...f,c,...g,_,...I];return`
            ${u.registerUniforms(a.map(E=>({name:`${ou(E)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...o,i)}

            ${u.mainStart()}
            ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${i.offsetToIndices("global_idx")};
            ${o.map((E,v)=>`var input${v}Indices: ${o[v].type.indices};`).join(`
`)}
            ${S.join(`
`)};
            ${i.setByOffset("global_idx","sum")};
          }`};return{name:"Einsum",shaderCache:{hint:t.equation,inputDependencies:e.map(()=>"rank")},getRunData:()=>{let u=a.filter(c=>t.symbolToInfo.has(c)).map(c=>{var d;return{type:12,data:((d=t.symbolToInfo.get(c))==null?void 0:d.dimValue)||0}});u.push({type:12,data:n});let p=e.map((c,d)=>[...ut(c)]).reduce((c,d)=>c.concat(d),u);return p.push(...ut(s)),{outputs:[{dims:s,dataType:r}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:p}},getShaderSource:l}},Ty=(e,r)=>{let t=new fg(e.inputs,r.equation),s=t.outputDims,o=e.inputs.map((n,i)=>n.dims);e.compute(_g(o,e.inputs[0].dataType,t,s))},Ey=e=>{let r=e.equation.replace(/\s+/g,"");return Nt({equation:r})}}),gg,iu,wg,Mg,Py,fx=je(()=>{ft(),xt(),Tt(),gg=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let r=e[0].dims,t=Array.from(e[1].getBigInt64Array(),Number),s=t.length<r.length?0:t.length-r.length,o=r.length<t.length?0:r.length-t.length;for(;s<t.length&&o<r.length;++s,++o)if(t[s]!==r[o]&&t[s]!==1&&r[o]!==1)throw new Error("Expand requires shape to be broadcastable to input")},iu=(e,r)=>{let t=e.length-r.length,s=[];for(let o=0;o<t;++o)s.push(e[o]);for(let o=0;o<r.length;++o)s.push(r[o]===1?e[o+t]:r[o]);return s},wg=(e,r)=>e.length>r.length?iu(e,r):iu(r,e),Mg=e=>{let r=e[0].dims,t=Array.from(e[1].getBigInt64Array(),Number),s=wg(r,t),o=e[0].dataType,n=o===9||be.size(r)===1,i=o===9||r.length>0&&r[r.length-1]%4===0?4:1,a=n||s.length>0&&s[s.length-1]%4===0?4:1,l=Math.ceil(be.size(s)/a),u=c=>{let d=Ce("input",o,r.length,i),_=tt("output",o,s.length,a),f;if(o===9){let T=(I,g,w="")=>`
          let outputIndices${g} = ${_.offsetToIndices(`outputOffset + ${g}u`)};
          let offset${g} = ${d.broadcastedIndicesToOffset(`outputIndices${g}`,_)};
          let index${g} = offset${g} / 4u;
          let component${g} = offset${g} % 4u;
          ${I}[${g}] = ${w}(${d.getByOffset(`index${g}`)}[component${g}]);
        `;f=`
        let outputOffset = global_idx * ${a};
        var data = vec4<u32>(0);
        ${T("data",0,"u32")}
        ${T("data",1,"u32")}
        ${T("data",2,"u32")}
        ${T("data",3,"u32")}
        ${_.setByOffset("global_idx","data")}
      }`}else f=`
        let outputIndices = ${_.offsetToIndices(`global_idx * ${a}`)};
        let inputOffset = ${d.broadcastedIndicesToOffset("outputIndices",_)};
        let data = ${_.type.value}(${d.getByOffset(`inputOffset / ${i}`)});
        ${_.setByOffset("global_idx","data")}
      }`;return`
    ${c.registerUniform("vec_size","u32").declareVariables(d,_)}
    ${c.mainStart()}
    ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${f}`},p=[{type:12,data:l},...ut(r,s)];return{name:"Expand",shaderCache:{hint:`${s.length};${i}${a}`,inputDependencies:["rank"]},getShaderSource:u,getRunData:()=>({outputs:[{dims:s,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:p})}},Py=e=>{gg(e.inputs),e.compute(Mg(e.inputs),{inputs:[0]})}}),bg,Cy,_x=je(()=>{ft(),xt(),Tt(),uc(),bg=e=>{let r=e[0].dataType,t=be.size(e[0].dims),s=be.size(e[1].dims),o=s%4===0,n=i=>{let a=Ce("x",r,[1],4),l=Ce("bias",r,[1],4),u=tt("y",r,[1],4),p=[{name:"output_vec_size",type:"u32"},{name:"bias_size",type:"u32"}],c=_=>`
      let bias${_}_offset: u32 = (global_idx * 4 + ${_}) % uniforms.bias_size;
      let bias${_} = ${l.getByOffset(`bias${_}_offset / 4`)}[bias${_}_offset % 4];`,d=o?`
      let bias = ${l.getByOffset("global_idx % (uniforms.bias_size / 4)")};`:`${c(0)}${c(1)}${c(2)}${c(3)}
      let bias = ${a.type.value}(bias0, bias1, bias2, bias3);`;return`${i.registerUniforms(p).declareVariables(a,l,u)}

    ${zu(Rr(r))}

    ${i.mainStart(to)}
      ${i.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}

      let x = ${a.getByOffset("global_idx")};
      ${d}
      let x_in = x + bias;
      ${u.setByOffset("global_idx",Bu("x_in"))}
    }`};return{name:"FastGeluWithBias",shaderCache:{hint:`${o}`,inputDependencies:["type","type"]},getShaderSource:n,getRunData:i=>({outputs:[{dims:i[0].dims,dataType:i[0].dataType}],programUniforms:[{type:12,data:Math.ceil(t/4)},{type:12,data:s}],dispatchGroup:{x:Math.ceil(t/to/4)}})}},Cy=e=>{e.inputs.length<2||be.size(e.inputs[1].dims)===0?Hb(e):e.compute(bg(e.inputs))}}),yg,vg,Sy,$y,gx=je(()=>{ft(),xt(),lr(),Tt(),yg=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},vg=(e,r)=>{let t=e[0].dims,s=e[1].dims,o=t.length,n=be.normalizeAxis(r.axis,o),i=t.slice(0);i.splice(n,1,...s);let a=t[n],l=e[0].dataType===9?4:1,u=Math.ceil(be.size(i)/l),p=[{type:12,data:u},{type:6,data:a},{type:12,data:n},...ut(e[0].dims,e[1].dims,i)],c=d=>{let _=Ce("data",e[0].dataType,e[0].dims.length,l),f=Ce("inputIndices",e[1].dataType,e[1].dims.length),T=tt("output",e[0].dataType,i.length,l),I=w=>{let S=s.length,E=`var indicesIndices${w}  = ${f.type.indices}(0);`;for(let v=0;v<S;v++)E+=`${S>1?`indicesIndices${w}[${v}]`:`indicesIndices${w}`} = ${i.length>1?`outputIndices${w}[uniforms.axis + ${v}]`:`outputIndices${w}`};`;E+=`
          var idx${w} = ${f.getByIndices(`indicesIndices${w}`)};
          if (idx${w} < 0) {
            idx${w} = idx${w} + uniforms.axisDimLimit;
          }
          var dataIndices${w} : ${_.type.indices};
        `;for(let v=0,M=0;v<o;v++)v===n?(E+=`${o>1?`dataIndices${w}[${v}]`:`dataIndices${w}`} = u32(idx${w});`,M+=S):(E+=`${o>1?`dataIndices${w}[${v}]`:`dataIndices${w}`} = ${i.length>1?`outputIndices${w}[${M}]`:`outputIndices${w}`};`,M++);return E},g;if(e[0].dataType===9){let w=(S,E,v="")=>`
          let outputIndices${E} = ${T.offsetToIndices(`outputOffset + ${E}u`)};
          ${I(E)};
          let offset${E} = ${_.indicesToOffset(`dataIndices${E}`)};
          let index${E} = offset${E} / 4u;
          let component${E} = offset${E} % 4u;
          ${S}[${E}] = ${v}(${_.getByOffset(`index${E}`)}[component${E}]);
        `;g=`
        let outputOffset = global_idx * ${l};
        var value = vec4<u32>(0);
        ${w("value",0,"u32")}
        ${w("value",1,"u32")}
        ${w("value",2,"u32")}
        ${w("value",3,"u32")}
        ${T.setByOffset("global_idx","value")}
      `}else g=`
      let outputIndices = ${T.offsetToIndices("global_idx")};
      ${I("")};
      let value = ${_.getByIndices("dataIndices")};
      ${T.setByOffset("global_idx","value")};
      `;return`
      ${d.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(_,f,T)}
      ${d.mainStart()}
        ${d.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${g}
      }`};return{name:"Gather",shaderCache:{hint:r.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:i,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:p}),getShaderSource:c}},Sy=e=>Nt({axis:e.axis}),$y=(e,r)=>{let t=e.inputs;yg(t),e.compute(vg(e.inputs,r))}}),xg,Iy,ky,wx=je(()=>{ft(),xt(),Tt(),xg=(e,r,t,s,o,n,i,a,l)=>{let u=[{type:12,data:n},{type:12,data:s},{type:12,data:o},{type:12,data:t},{type:12,data:i},{type:12,data:a},{type:12,data:l}],p=[n];u.push(...ut(r.dims,p));let c=d=>{let _=Ce("indices_data",r.dataType,r.dims.length),f=tt("input_slice_offsets_data",12,1,1),T=[_,f],I=[{name:"output_size",type:"u32"},{name:"batch_dims",type:"u32"},{name:"input_dims",type:"u32",length:o.length},{name:"sizes_from_slice_dims_data",type:"u32",length:t.length},{name:"num_slices_per_batch",type:"u32"},{name:"input_batch_stride",type:"u32"},{name:"num_slice_dims",type:"u32"}];return`
  ${d.registerUniforms(I).declareVariables(...T)}
  ${d.mainStart()}
    ${d.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let batch_idx = global_idx / uniforms.num_slices_per_batch;
    let base_offset = batch_idx * uniforms.input_batch_stride;

    let slice_indices_base_offset = global_idx * uniforms.num_slice_dims;
    var relative_slice_offset = 0;
    for (var dim_idx = 0u; dim_idx < uniforms.num_slice_dims; dim_idx ++) {
      var index = i32(indices_data[dim_idx + slice_indices_base_offset].x);
      let input_dim_idx = uniforms.batch_dims + dim_idx;
      if (index < 0) {
        ${o.length===1?"index += i32(uniforms.input_dims);":"index += i32(uniforms.input_dims[input_dim_idx]);"}
      }
      ${t.length===1?"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data);":"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data[dim_idx]);"}
    }

    input_slice_offsets_data[global_idx] =  base_offset + u32(relative_slice_offset);
  }`};return e.compute({name:"computeSliceOffsets",shaderCache:{hint:`${o.length}_${t.length}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:p,dataType:e.inputs[1].dataType}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:u}),getShaderSource:c},{inputs:[r],outputs:[-1]})[0]},Iy=(e,r)=>{let t=e.inputs,s=t[0].dims,o=t[0].dataType,n=t[1].dims,i=n[n.length-1],a=be.sizeToDimension(n,n.length-1),l=be.sizeFromDimension(s,r.batchDims+i),u=be.sizeToDimension(s,r.batchDims),p=be.sizeFromDimension(s,r.batchDims),c=a/u,d=new Array(i),_=l;for(let E=0;E<i;++E)d[i-1-E]=_,_*=s[r.batchDims+i-1-E];let f=xg(e,t[1],d,r.batchDims,s,a,c,p,i),T=r.batchDims+i;if(T>s.length)throw new Error("last dimension of indices must not be larger than rank of input tensor");let I=n.slice(0,-1).concat(s.slice(T)),g=be.size(I),w=[{type:12,data:g},{type:12,data:l},...ut(t[0].dims,f.dims,I)],S=E=>{let v=Ce("data",t[0].dataType,t[0].dims.length),M=Ce("slice_offsets",12,f.dims.length),y=tt("output",t[0].dataType,I.length);return`
          ${E.registerUniform("output_size","u32").registerUniform("slice_size","u32").declareVariables(v,M,y)}
            ${E.mainStart()}
            ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let slice_offset = slice_offsets[global_idx / uniforms.slice_size];
          output[global_idx] = data[u32(slice_offset) + global_idx % uniforms.slice_size];
        }`};e.compute({name:"GatherND",shaderCache:{hint:r.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:I,dataType:o}],dispatchGroup:{x:Math.ceil(g/64)},programUniforms:w}),getShaderSource:S},{inputs:[t[0],f]})},ky=e=>({batchDims:e.batch_dims,cacheKey:""})}),Tg,Eg,Ay,Fy,Mx=je(()=>{ft(),xt(),lr(),Tt(),Tg=(e,r)=>{if(e.length<3||e.length>4)throw new Error("GatherBlockQuantized requires 3 or 4 inputs.");let t=be.normalizeAxis(r.quantizeAxis,e[0].dims.length),s=r.blockSize,o=e[0],n=e[2],i=e.length===4?e[3]:void 0;if(n.dims.length!==o.dims.length||!o.dims.map((a,l)=>l===t?Math.ceil(a/s)===n.dims[l]:a===n.dims[l]).reduce((a,l)=>a&&l,!0))throw new Error("Scales must have the same rank as the input tensor and the dims should match except on gatherAxis.");if(i){if(i.dataType!==o.dataType)throw new Error("Zero point must have the same data type as the input tensor.");if(i.dims.length!==n.dims.length||!i.dims.map((a,l)=>a===n.dims[l]).reduce((a,l)=>a&&l,!0))throw new Error("Zero point must have the same rank as the input tensor and the dims should match except on quantizeAxis.")}},Eg=(e,r)=>{let t=e[0].dims,s=e[1].dims,o=t.length,n=be.normalizeAxis(r.gatherAxis,o),i=be.normalizeAxis(r.quantizeAxis,o),a=t.slice(0);a.splice(n,1,...s);let l=be.size(a),u=e[2].dataType,p=e[0].dataType===22,c=[{type:12,data:l},{type:12,data:i},{type:12,data:n},{type:12,data:r.blockSize},...ut(...e.map((_,f)=>_.dims),a)],d=_=>{let f=Ce("data",e[0].dataType,e[0].dims.length),T=Ce("inputIndices",e[1].dataType,e[1].dims.length),I=Ce("scales",e[2].dataType,e[2].dims.length),g=e.length>3?Ce("zeroPoint",e[3].dataType,e[3].dims.length):void 0,w=tt("output",u,a.length),S=[f,T,I];g&&S.push(g);let E=[{name:"output_size",type:"u32"},{name:"quantize_axis",type:"u32"},{name:"gather_axis",type:"u32"},{name:"block_size",type:"u32"}];return`
        ${_.registerUniforms(E).declareVariables(...S,w)}
        ${_.mainStart()}
        let output_indices = ${w.offsetToIndices("global_idx")};
        var indices_indices = ${T.type.indices}(0);
        ${s.length>1?`
          for (var i: u32 = 0; i < ${s.length}; i++) {
            let index = ${w.indicesGet("output_indices","uniforms.gather_axis + i")};
            ${T.indicesSet("indices_indices","i","index")};
          }`:`indices_indices = ${w.indicesGet("output_indices","uniforms.gather_axis")};`};
        var data_indices = ${f.type.indices}(0);
        for (var i: u32 = 0; i < uniforms.gather_axis; i++) {
          let index = ${w.indicesGet("output_indices","i")};
          ${f.indicesSet("data_indices","i","index")};
        }
        var index_from_indices = ${T.getByIndices("indices_indices")};
        if (index_from_indices < 0) {
          index_from_indices += ${t[n]};
        }
        ${f.indicesSet("data_indices","uniforms.gather_axis","u32(index_from_indices)")};
        for (var i = uniforms.gather_axis + 1; i < ${a.length}; i++) {
          let index = ${w.indicesGet("output_indices",`i + ${s.length} - 1`)};
          ${f.indicesSet("data_indices","i","index")};
        }
        let data_offset = ${f.indicesToOffset("data_indices")};
        let data_index = data_offset % 8;
        // Convert 4-bit packed data to 8-bit packed data.
        let packed_4bit_quantized_data = ${f.getByOffset("data_offset / 8")};
        let packed_8bit_quantized_data = (packed_4bit_quantized_data >> (4 * (data_index % 2))) & 0x0f0f0f0f;
        let quantized_data_vec = ${p?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_quantized_data));
        let quantized_data = quantized_data_vec[data_index / 2];
        var scale_indices = data_indices;
        let quantize_axis_index = ${I.indicesGet("data_indices","uniforms.quantize_axis")} / uniforms.block_size;
        ${I.indicesSet("scale_indices","uniforms.quantize_axis","quantize_axis_index")};
        var scale = ${I.getByIndices("scale_indices")};
        ${g?`
              let zero_point_indices = scale_indices;
              let zero_point_offset = ${g.indicesToOffset("zero_point_indices")};
              let zero_point_index = zero_point_offset % 8;
              let packed_4bit_zero_points = ${g.getByOffset("zero_point_offset / 8")};
              let packed_8bit_zero_points = (packed_4bit_zero_points >> (4 * (zero_point_index % 2))) & 0x0f0f0f0f;
              let zero_point_vec = ${p?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_zero_points));
              let zero_point = zero_point_vec[zero_point_index / 2];`:"var zero_point = 0"};
        let dequantized_data = ${Rr(u)}(quantized_data - zero_point) * scale;
        ${w.setByOffset("global_idx","dequantized_data")};
    }`};return{name:"GatherBlockQuantized",shaderCache:{hint:`${r.cacheKey};${e.filter((_,f)=>f!==1).map(_=>_.dims.join("_")).join(";")}`,inputDependencies:Array.from({length:e.length},(_,f)=>"rank")},getRunData:()=>({outputs:[{dims:a,dataType:u}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:c}),getShaderSource:d}},Ay=(e,r)=>{let t=e.inputs;Tg(t,r),e.compute(Eg(e.inputs,r))},Fy=e=>Nt({blockSize:e.blockSize,gatherAxis:e.gatherAxis,quantizeAxis:e.quantizeAxis})}),Pg,Cg,Oy,Dy,bx=je(()=>{ft(),xt(),lr(),Tt(),Pg=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},Cg=(e,r)=>{let t=e[0].dims,s=e[0].dataType,o=t.length,n=e[1].dims,i=e[1].dataType,a=be.normalizeAxis(r.axis,o),l=t[a],u=n.slice(0),p=be.size(u),c=Ce("input",s,o),d=Ce("indicesInput",i,n.length),_=tt("output",s,u.length),f=[{type:12,data:p},{type:6,data:l},{type:12,data:a}];return f.push(...ut(t,n,u)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:u,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:f}),getShaderSource:T=>`
      ${T.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(c,d,_)}
      ${T.mainStart()}
      ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${_.offsetToIndices("global_idx")};

      var idx = ${d.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${c.type.indices}(outputIndices);
      ${c.indicesSet("inputIndices","uniforms.axis","u32(idx)")};
      let value = ${c.getByIndices("inputIndices")};

      ${_.setByOffset("global_idx","value")};
  }`}},Oy=e=>Nt({axis:e.axis}),Dy=(e,r)=>{let t=e.inputs;Pg(t),e.compute(Cg(e.inputs,r))}}),Sg,$g,Ly,zy,yx=je(()=>{ft(),xt(),Tt(),Sg=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},$g=(e,r)=>{let t=e[0].dims.slice(),s=e[1].dims.slice(),[o,n,i]=OM.getShapeOfGemmResult(t,r.transA,s,r.transB,e.length===3?e[2].dims:void 0),a=[o,n];if(!a)throw new Error("Can't use gemm on the given tensors");let l=16,u=Math.ceil(n/l),p=Math.ceil(o/l),c=!0,d=be.size(a),_=[{type:12,data:c?u:d},{type:12,data:o},{type:12,data:n},{type:12,data:i},{type:1,data:r.alpha},{type:1,data:r.beta}],f=["type","type"];e.length===3&&(_.push(...ut(e[2].dims)),f.push("rank")),_.push(...ut(a));let T=g=>{let w="";r.transA&&r.transB?w="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":r.transA&&!r.transB?w="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!r.transA&&r.transB?w="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!r.transA&&!r.transB&&(w="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let S=r.alpha===1?"":"value *= uniforms.alpha;",E=Ce("a",e[0].dataType,e[0].dims),v=Ce("b",e[1].dataType,e[1].dims),M=E.type.value,y=null,C=[E,v];e.length===3&&(y=Ce("c",e[2].dataType,e[2].dims.length),C.push(y));let F=tt("output",e[0].dataType,a.length);C.push(F);let z=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`
  ${g.registerUniforms(z).declareVariables(...C)}

  ${g.mainStart()}
    ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let m = global_idx / uniforms.N;
    let n = global_idx % uniforms.N;

    var value = ${M}(0);
    for (var k: u32 = 0u; k < uniforms.K; k++) {
      ${w}
    }

    ${S}
    ${y!=null?`let cOffset = ${y.broadcastedIndicesToOffset("vec2(m, n)",F)}; value += ${M}(uniforms.beta) * ${y.getByOffset("cOffset")};`:""}
    output[global_idx] = value;
  }`},I=g=>{let w=Ce("a",e[0].dataType,e[0].dims),S=Ce("b",e[1].dataType,e[1].dims),E=null,v=[w,S];e.length===3&&(E=Ce("c",e[2].dataType,e[2].dims.length),v.push(E));let M=tt("output",e[0].dataType,a.length);v.push(M);let y=[{name:"num_tile_n",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}],C="",F="";r.transA&&r.transB?(F=`
      var col = tile_row_start + local_id.x;
      var row = k_start + local_id.y;
      if (col < uniforms.M && row < uniforms.K) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${w.type.value}(0);
      }

      col = k_start + local_id.x;
      row = tile_col_start + local_id.y;
      if (col < uniforms.K && row < uniforms.N) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${S.type.value}(0);
      }
      `,C="value += tile_a[k][local_id.y] * tile_b[local_id.x][k];"):r.transA&&!r.transB?(F=`
      var col = tile_row_start + local_id.x;
      var row = k_start + local_id.y;
      if (col < uniforms.M && row < uniforms.K) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${w.type.value}(0);
      }

      col = tile_col_start + local_id.x;
      row = k_start + local_id.y;
      if (col < uniforms.N && row < uniforms.K) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${S.type.value}(0);
      }
      `,C="value += tile_a[k][local_id.y] * tile_b[k][local_id.x];"):!r.transA&&r.transB?(F=`
      var col = k_start + local_id.x;
      var row = tile_row_start + local_id.y;
      if (col < uniforms.K && row < uniforms.M) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${w.type.value}(0);
      }

      col = k_start + local_id.x;
      row = tile_col_start + local_id.y;
      if (col < uniforms.K && row < uniforms.N) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${S.type.value}(0);
      }
      `,C="value += tile_a[local_id.y][k] * tile_b[local_id.x][k];"):!r.transA&&!r.transB&&(F=`
      var col = k_start + local_id.x;
      var row = tile_row_start + local_id.y;
      if (col < uniforms.K && row < uniforms.M) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${w.type.value}(0);
      }

      col = tile_col_start + local_id.x;
      row = k_start + local_id.y;
      if (col < uniforms.N && row < uniforms.K) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${S.type.value}(0);
      }
      `,C="value += tile_a[local_id.y][k] * tile_b[k][local_id.x];");let z=r.alpha===1?"":"value *= uniforms.alpha;";return`
  ${g.registerUniforms(y).declareVariables(...v)}
  var<workgroup> tile_a: array<array<${w.type.storage}, ${l}>, ${l}>;
  var<workgroup> tile_b: array<array<${S.type.storage}, ${l}>, ${l}>;
  ${g.mainStart([l,l,1])}
    let tile_col_start = (workgroup_index % uniforms.num_tile_n) * ${l};
    let tile_row_start = (workgroup_index / uniforms.num_tile_n) * ${l};
    let num_tiles = (uniforms.K - 1) / ${l} + 1;
    var k_start = 0u;
    var value = ${M.type.value}(0);
    for (var t: u32 = 0u; t < num_tiles; t++) {
      ${F}
      k_start = k_start + ${l};
      workgroupBarrier();

      for (var k: u32 = 0u; k < ${l}; k++) {
        ${C}
      }
      workgroupBarrier();
    }

    ${z}
    let m = tile_row_start + local_id.y;
    let n = tile_col_start + local_id.x;
    ${E!=null?`let cOffset = ${E.broadcastedIndicesToOffset("vec2(m, n)",M)}; value += ${M.type.value}(uniforms.beta) * ${E.getByOffset("cOffset")};`:""}
    if (m < uniforms.M && n < uniforms.N) {
      output[m * uniforms.N + n] = value;
    }
  }`};return c?{name:"GemmShared",shaderCache:{hint:`${r.cacheKey}`,inputDependencies:f},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:u*p},programUniforms:_}),getShaderSource:I}:{name:"Gemm",shaderCache:{hint:`${r.cacheKey}`,inputDependencies:f},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:_}),getShaderSource:T}},Ly=e=>{let r=e.transA,t=e.transB,s=e.alpha,o=e.beta;return{transA:r,transB:t,alpha:s,beta:o,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},zy=(e,r)=>{Sg(e.inputs),e.compute($g(e.inputs,r))}}),Os,Ls,vn,xn,Ig,kg,Ag,Fg,Og,Dg,Lg,zg,By,Ry,vx=je(()=>{ft(),xt(),lr(),Tt(),[Os,Ls,vn,xn]=[0,1,2,3],Ig=e=>{if(e[0].dims.length!==4)throw new Error("only 4-D tensor is supported.");if(e[0].dims.length!==e[1].dims.length)throw new Error("input dimensions must be equal to grid dimensions");if(e[0].dims.length-2!==e[1].dims[e[1].dims.length-1])throw new Error(`last dimension of grid must be equal to ${e[0].dims.length-2}`);if(e[0].dims[0]!==e[1].dims[0])throw new Error("grid batch size must match input batch size")},kg=`
  fn gs_get_cubic_coeffs(x: f32) -> vec4<f32> {
    let cubic_alpha = -0.75f;
    let x_abs = abs(x);
    var coeffs: vec4<f32>;
    coeffs[0] = (((cubic_alpha * (x_abs + 1) - 5 * cubic_alpha) * (x_abs + 1) + 8 * cubic_alpha) * (x_abs + 1) - 4 * cubic_alpha);
    coeffs[1] = (((cubic_alpha + 2) * x_abs - (cubic_alpha + 3)) * x_abs * x_abs + 1);
    coeffs[2] = (((cubic_alpha + 2) * (1 - x_abs) - (cubic_alpha + 3)) * (1 - x_abs) * (1 - x_abs) + 1);
    coeffs[3] = (((cubic_alpha * (2 - x_abs) - 5 * cubic_alpha) * (2 - x_abs) + 8 * cubic_alpha) * (2 - x_abs) - 4 * cubic_alpha);
    return coeffs;
  }
`,Ag=e=>`
  fn gs_bicubic_interpolate(p: mat4x4<${e}>, x: f32, y: f32) -> ${e} {
    var v: vec4<f32>;
    var coeffs = gs_get_cubic_coeffs(x);
    for (var i = 0; i < 4; i++) {
      v[i] = coeffs[0] * p[i][0] + coeffs[1] * p[i][1] + coeffs[2] * p[i][2] + coeffs[3] * p[i][3];
    }
    coeffs = gs_get_cubic_coeffs(y);
    let pixel = ${e}(coeffs[0] * v[0] + coeffs[1] * v[1] + coeffs[2] * v[2] + coeffs[3] * v[3]);
    return pixel;
  }
`,Fg=e=>`
  fn gs_denormalize(n: f32, length: i32) -> f32 {
    ${e.alignCorners===0?`
    // alignCorners: false => [-1, 1] to [-0.5, length - 0.5]
    return ((n + 1.0) * f32(length) - 1.0) / 2.0;
    `:`
    // alignCorners: true => [-1, 1] to [0, length - 1]
    return (n + 1.0) / 2.0 * (f32(length - 1));
    `}
  }
`,Og=e=>`
  ${e.paddingMode==="reflection"?`
      fn gs_reflect(x: i32, x_min: f32, x_max: f32) -> u32 {
        var dx = 0.0;
        var fx = f32(x);
        let range = x_max - x_min;
        if (fx < x_min) {
          dx = x_min - fx;
          let n = u32(dx / range);
          let r = dx - f32(n) * range;
          if (n % 2 == 0) {
            fx = x_min + r;
          } else {
            fx = x_max - r;
          }
        } else if (fx > x_max) {
          dx = fx - x_max;
          let n = u32(dx / range);
          let r = dx - f32(n) * range;
          if (n % 2 == 0) {
            fx = x_max - r;
          } else {
            fx = x_min + r;
          }
        }
        return u32(fx);
      }`:""}
`,Dg=(e,r,t)=>`
  fn pixel_at_grid(r: i32, c: i32, H: i32, W: i32, batch: u32, channel: u32, border: vec4<f32>) -> ${r} {
     var pixel = ${r}(0);
     var indices = vec4<u32>(0);
     indices[${Os}] = batch;
     indices[${Ls}] = channel;`+(()=>{switch(t.paddingMode){case"zeros":return`
          if (r >= 0 && r < H && c >=0 && c < W) {
            indices[${vn}] = u32(r);
            indices[${xn}] = u32(c);
          } else {
            return ${r}(0);
          }
        `;case"border":return`
          indices[${vn}] = u32(clamp(r, 0, H - 1));
          indices[${xn}] = u32(clamp(c, 0, W - 1));
        `;case"reflection":return`
          indices[${vn}] = gs_reflect(r, border[1], border[3]);
          indices[${xn}] = gs_reflect(c, border[0], border[2]);
        `;default:throw new Error(`padding mode ${t.paddingMode} is not supported`)}})()+`
    return ${e.getByIndices("indices")};
  }
`,Lg=(e,r,t)=>(()=>{switch(t.mode){case"nearest":return`
          let result = pixel_at_grid(i32(round(y)), i32(round(x)), H_in, W_in, indices[${Os}], indices[${Ls}], border);
        `;case"bilinear":return`
          let x1 = i32(floor(x));
          let y1 = i32(floor(y));
          let x2 = x1 + 1;
          let y2 = y1 + 1;

          let p11 = pixel_at_grid(y1, x1, H_in, W_in, indices[${Os}], indices[${Ls}], border);
          let p12 = pixel_at_grid(y1, x2, H_in, W_in, indices[${Os}], indices[${Ls}], border);
          let p21 = pixel_at_grid(y2, x1, H_in, W_in, indices[${Os}], indices[${Ls}], border);
          let p22 = pixel_at_grid(y2, x2, H_in, W_in, indices[${Os}], indices[${Ls}], border);

          let dx2 = ${r}(f32(x2) - x);
          let dx1 = ${r}(x - f32(x1));
          let dy2 = ${r}(f32(y2) - y);
          let dy1 = ${r}(y - f32(y1));
          let result = dy2 * (dx2 * p11 + dx1 * p12) + dy1 * (dx2 * p21 + dx1 * p22);
        `;case"bicubic":return`
          let x0 = i32(floor(x)) - 1;
          let y0 = i32(floor(y)) - 1;
          var p: mat4x4<${r}>;
          for (var h = 0; h < 4; h++) {
            for (var w = 0; w < 4; w++) {
              p[h][w] = pixel_at_grid(h + y0, w + x0, H_in, W_in, indices[${Os}], indices[${Ls}], border);
            }
          }

          let dx = x - f32(x0 + 1);
          let dy = y - f32(y0 + 1);
          let result = gs_bicubic_interpolate(p, dx, dy);
        `;default:throw new Error(`mode ${t.mode} is not supported`)}})()+`${e.setByOffset("global_idx","result")}`,zg=(e,r)=>{let t=Ce("x",e[0].dataType,e[0].dims.length),s=[e[1].dims[0],e[1].dims[1],e[1].dims[2]],o=Ce("grid",e[1].dataType,s.length,2),n=[e[0].dims[0],e[0].dims[1],e[1].dims[1],e[1].dims[2]];r.format==="NHWC"&&(n=[e[0].dims[0],e[1].dims[1],e[1].dims[2],e[0].dims[3]],[Os,Ls,vn,xn]=[0,3,1,2]);let i=tt("output",e[0].dataType,n.length),a=t.type.value,l=be.size(n),u=[{type:12,data:l},...ut(e[0].dims,s,n)],p=c=>`
  ${c.registerUniform("output_size","u32").declareVariables(t,o,i)}
  ${kg}
  ${Ag(a)}
  ${Fg(r)}
  ${Og(r)}
  ${Dg(t,a,r)}

  ${c.mainStart()}
    ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let H_in = i32(uniforms.x_shape[${vn}]);
      let W_in = i32(uniforms.x_shape[${xn}]);

      ${r.alignCorners===0?`
      let x_min = -0.5;
      let x_max = f32(W_in) - 0.5;
      let y_min = -0.5;
      let y_max = f32(H_in) - 0.5;
      `:`
      let x_min = 0.0;
      let x_max = f32(W_in) - 1.0;
      let y_min = 0.0;
      let y_max = f32(H_in) - 1.0;
      `};
      let border = vec4<f32>(x_min, y_min, x_max, y_max);

      let indices = ${i.offsetToIndices("global_idx")};
      var grid_indices = vec3<u32>(indices[${Os}], indices[${vn}], indices[${xn}]);
      let nxy = ${o.getByIndices("grid_indices")};
      var x = gs_denormalize(f32(nxy[0]), W_in);
      var y = gs_denormalize(f32(nxy[1]), H_in);

      ${Lg(i,a,r)}
  }`;return{name:"GridSample",shaderCache:{hint:`${r.cacheKey}`,inputDependencies:["type","type"]},getRunData:c=>{let d=be.size(n);return{outputs:[{dims:n,dataType:c[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:u}},getShaderSource:p}},By=(e,r)=>{Ig(e.inputs),e.compute(zg(e.inputs,r))},Ry=e=>Nt({alignCorners:e.align_corners,mode:e.mode,paddingMode:e.padding_mode,format:e.format})}),Vr,Bg,jy,au,Rg,Ho,Ny,Vy=je(()=>{ft(),xt(),lr(),oc(),lc(),Tt(),Zs(),Vr=(e,r)=>e.length>r&&e[r].dims.length>0?e[r]:void 0,Bg=(e,r)=>{let t=e[0],s=Vr(e,1),o=Vr(e,2),n=Vr(e,3),i=Vr(e,4),a=Vr(e,5),l=Vr(e,6),u=Vr(e,7);if(t.dims.length!==3&&t.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let p=t.dims[0],c=t.dims[1],d=t.dims.length===3?t.dims[2]:r.numHeads*t.dims[4],_=c,f=0,T=0,I=Math.floor(d/r.numHeads);if(l&&u&&be.size(l.dims)&&be.size(u.dims)){if(l.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(l.dims[0]!==p||l.dims[1]!==r.numHeads||l.dims[3]!==I)throw new Error('Input "past_key" shape (batch_size, num_heads, past_sequence_length, head_size)');if(u.dims[0]!==p||u.dims[1]!==r.numHeads||u.dims[3]!==I)throw new Error('Input "past_value" shape (batch_size, num_heads, past_sequence_length, head_size)');if(l.dims[2]!==u.dims[2])throw new Error('Input "past_key" and "past_value" shall have same dim 2 (past_sequence_length)');if(u.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');f=l.dims[2],T=l.dims[2]}else if(l&&be.size(l.dims)||u&&be.size(u.dims))throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let g;if(s&&be.size(s.dims)>0){if(t.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(s.dims.length<3||s.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(t.dims[0]!==s.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(s.dims.length===3){if(s.dims[2]!==t.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');g=2,_=s.dims[1]}else if(s.dims.length===5){if(s.dims[2]!==r.numHeads||s.dims[3]!==2||s.dims[4]!==I)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(o)throw new Error('Expect "value" be none when "key" has packed kv format.');g=5,_=s.dims[1]}else{if(s.dims[1]!==r.numHeads||s.dims[3]!==I)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');g=0,_=s.dims[2]}}else{if(t.dims.length!==5)throw new Error('Input "query" is expected to have 5 dimensions when key is empty');if(t.dims[2]!==r.numHeads||t.dims[3]!==3)throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');g=3}if(n&&be.size(n.dims)>0){if(n.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(s&&s.dims.length===5&&s.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let w=f+_,S=0;if(i&&be.size(i.dims)>0){S=8;let y=i.dims;throw y.length===1?y[0]===p?S=1:y[0]===3*p+2&&(S=3):y.length===2&&y[0]===p&&y[1]===w&&(S=5),S===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, total_sequence_length)'):new Error("Mask not supported")}let E=!1,v=d;if(o&&be.size(o.dims)>0){if(o.dims.length!==3&&o.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(t.dims[0]!==o.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(o.dims.length===3){if(_!==o.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');v=o.dims[2]}else{if(_!==o.dims[2])throw new Error('Input "key" and "value" shall have the same dim 2 (kv_sequence_length)');v=o.dims[1]*o.dims[3],E=!0}}let M=!1;if(i&&be.size(i.dims)>0)throw new Error("Key padding mask is not supported");if(a&&be.size(a.dims)>0){if(a.dims.length!==4)throw new Error('Input "attention_bias" is expected to have 4 dimensions');if(a.dims[0]!==p||a.dims[1]!==r.numHeads||a.dims[2]!==c||a.dims[3]!==w)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:p,sequenceLength:c,pastSequenceLength:f,kvSequenceLength:_,totalSequenceLength:w,maxSequenceLength:T,inputHiddenSize:0,hiddenSize:d,vHiddenSize:v,headSize:I,vHeadSize:Math.floor(v/r.numHeads),numHeads:r.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:r.maskFilterValue,maskType:S,scale:r.scale,broadcastResPosBias:M,passPastInKv:E,qkvFormat:g}},jy=e=>Nt({...e}),au=Nt({perm:[0,2,1,3]}),Rg=(e,r,t,s,o,n,i)=>{let a=[s,o,n],l=be.size(a),u=[{type:12,data:l},{type:12,data:i},{type:12,data:n}],p=c=>{let d=tt("qkv_with_bias",r.dataType,a),_=Ce("qkv",r.dataType,a),f=Ce("bias",t.dataType,a),T=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`
  ${c.registerUniforms(T).declareVariables(_,f,d)}
  ${c.mainStart()}
    ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];
  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:a,dataType:r.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:u}),getShaderSource:p},{inputs:[r,t],outputs:[-1]})[0]},Ho=(e,r,t,s,o,n,i,a)=>{let l=n;if(i&&be.size(i.dims)>0){if(s===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return l=Rg(e,n,i,r,s,t*o,a),l=l.reshape([r,s,t,o]),t===1||s===1?l:e.compute(Jr(l,au.perm),{inputs:[l],outputs:[-1]})[0]}else return n.dims.length===3&&(l=n.reshape([r,s,t,o])),t===1||s===1?l:e.compute(Jr(l,au.perm),{inputs:[l],outputs:[-1]})[0]},Ny=(e,r)=>{let t=Bg(e.inputs,r),s=e.inputs[0],o=Vr(e.inputs,1),n=Vr(e.inputs,2),i=Vr(e.inputs,3),a=Vr(e.inputs,4),l=Vr(e.inputs,5),u=Vr(e.inputs,6),p=Vr(e.inputs,7);if(s.dims.length===5)throw new Error("Packed QKV is not implemented");if((o==null?void 0:o.dims.length)===5)throw new Error("Packed KV is not implemented");let c=o&&n&&o.dims.length===4&&n.dims.length===4,d=Ho(e,t.batchSize,t.numHeads,t.sequenceLength,t.headSize,s,i,0);if(c)return Jo(e,d,o,n,a,void 0,u,p,l,t);if(!o||!n)throw new Error("key and value must be provided");let _=Ho(e,t.batchSize,t.numHeads,t.kvSequenceLength,t.headSize,o,i,t.hiddenSize),f=Ho(e,t.batchSize,t.numHeads,t.kvSequenceLength,t.vHeadSize,n,i,2*t.hiddenSize);Jo(e,d,_,f,a,void 0,u,p,l,t)}}),jg,Ng,Vg,Ug,Uu,Uy,Wy,Gy=je(()=>{ft(),xt(),lr(),Tt(),jg=e=>{if(!e||e.length<1)throw new Error("too few inputs")},Ng=(e,r)=>{let t=[],s=r.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(o=>t.push(Number(o))),s=t.length),Nt({numOutputs:s,axis:r.axis,splitSizes:t})},Vg=e=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {
    if (index < ${ot("uniforms.size_in_split_axis","i",e)}) {
        return i;
    }
    }
    return ${e}u;
}`,Ug=e=>{let r=e.length,t=[];for(let s=0;s<r;++s){let o=e[s].setByIndices("indices","input[global_idx]");r===1?t.push(o):s===0?t.push(`if (output_number == ${s}u) { ${o} }`):s===r-1?t.push(`else { ${o} }`):t.push(`else if (output_number == ${s}) { ${o} }`)}return`
      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {
        ${t.join(`
`)}
      }`},Uu=(e,r)=>{let t=e[0].dims,s=be.size(t),o=e[0].dataType,n=be.normalizeAxis(r.axis,t.length),i=new Array(r.numOutputs),a=Ce("input",o,t.length),l=new Array(r.numOutputs),u=[],p=[],c=0,d=[{type:12,data:s}];for(let f=0;f<r.numOutputs;f++){c+=r.splitSizes[f],l[f]=c;let T=t.slice();T[n]=r.splitSizes[f],p.push(T),i[f]=tt(`output${f}`,o,T.length),u.push({dims:p[f],dataType:e[0].dataType})}d.push({type:12,data:l},...ut(t,...p));let _=f=>`
  ${f.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",l.length).declareVariables(a,...i)}
  ${Vg(l.length)}
  ${Ug(i)}

  ${f.mainStart()}
    ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}

    var indices = ${a.offsetToIndices("global_idx")};
    var index = ${a.indicesGet("indices",n)};
    let output_number = calculateOutputIndex(index);
    if (output_number != 0) {
      index -= ${ot("uniforms.size_in_split_axis","output_number - 1u",l.length)};
      ${a.indicesSet("indices",n,"index")};
    }
    writeBufferData(output_number, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:r.cacheKey,inputDependencies:["rank"]},getShaderSource:_,getRunData:()=>({outputs:u,dispatchGroup:{x:Math.ceil(s/64)},programUniforms:d})}},Uy=(e,r)=>{jg(e.inputs);let t=e.inputs.length===1?r:Ng(e.inputs,r);e.compute(Uu(e.inputs,t),{inputs:[0]})},Wy=e=>{let r=e.axis,t=e.splitSizes,s=e.numOutputs<0?t.length:e.numOutputs;if(s!==t.length)throw new Error("numOutputs and splitSizes lengh must be equal");return Nt({axis:r,numOutputs:s,splitSizes:t})}}),Wg,ha,Ky,Hy=je(()=>{ft(),xt(),lr(),Tt(),Wg=(e,r)=>{let[t,s,o,n]=e,{numHeads:i,rotaryEmbeddingDim:a}=r;if(t.dims.length!==3&&t.dims.length!==4)throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${t.dims.length}`);if(!be.areEqual(s.dims,[])&&!be.areEqual(s.dims,[1])&&s.dims.length!==2)throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${s.dims.length}`);if(o.dims.length!==2)throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${o.dims.length}`);if(n.dims.length!==2)throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${n.dims.length}`);if(!be.areEqual(o.dims,n.dims))throw new Error("Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape");if(a>0&&i===0)throw new Error("num_heads must be provided if rotary_embedding_dim is specified");let l=t.dims[0],u=t.dims[t.dims.length-2],p=o.dims[0],c=be.sizeFromDimension(t.dims,1)/u,d=a===0?o.dims[1]*2:c/i;if(a>d)throw new Error("rotary_embedding_dim must be less than or equal to head_size");if(s.dims.length===2){if(l!==s.dims[0])throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${s.dims[0]}`);if(u!==s.dims[1])throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${s.dims[1]}`)}if(d/2!==o.dims[1]&&a/2!==o.dims[1])throw new Error(`Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${o.dims[1]}`);if(u>p)throw new Error("Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported")},ha=(e,r)=>{let{interleaved:t,numHeads:s,rotaryEmbeddingDim:o,scale:n}=r,i=e[0].dims[0],a=be.sizeFromDimension(e[0].dims,1),l=e[0].dims[e[0].dims.length-2],u=a/l,p=e[2].dims[1],c=o===0?p*2:u/s,d=new Array(i,l,u/c,c-p),_=be.computeStrides(d),f=[{type:1,data:n},{type:12,data:d},{type:12,data:_},...e[0].dims.length===3?new Array({type:12,data:[a,u,c,1]}):[],...e[0].dims.length===4?new Array({type:12,data:[a,c,l*c,1]}):[],...ut(e[0].dims,e[1].dims,e[2].dims,e[3].dims,e[0].dims)],T=I=>{let g=Ce("input",e[0].dataType,e[0].dims.length),w=Ce("position_ids",e[1].dataType,e[1].dims.length),S=Ce("cos_cache",e[2].dataType,e[2].dims.length),E=Ce("sin_cache",e[3].dataType,e[3].dims.length),v=tt("output",e[0].dataType,e[0].dims.length);return I.registerUniforms([{name:"scale",type:"f32"},{name:"global_shape",type:"u32",length:d.length},{name:"global_strides",type:"u32",length:_.length},{name:"input_output_strides",type:"u32",length:_.length}]),`
        ${I.declareVariables(g,w,S,E,v)}

        ${I.mainStart(to)}
          let half_rotary_emb_dim = uniforms.${S.name}_shape[1];
          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;
          let size = uniforms.global_shape[0] * uniforms.global_strides[0];
          ${I.guardAgainstOutOfBoundsWorkgroupSizes("size")}

          if (bsnh[3] < half_rotary_emb_dim) {
            let position_ids_idx =
                ${w.broadcastedIndicesToOffset("bsnh.xy",tt("",w.type.tensor,2))};
            let position_id =
                u32(${w.getByOffset("position_ids_idx")}) + select(0, bsnh[1], position_ids_idx == 0);
            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${t});
            let j = i + select(half_rotary_emb_dim, 1, ${t});
            let re = ${g.getByOffset("i")} * ${S.get("position_id","bsnh[3]")} -
                ${g.getByOffset("j")} * ${E.get("position_id","bsnh[3]")};
            ${v.setByOffset("i","re")}
            let im = ${g.getByOffset("i")} * ${E.get("position_id","bsnh[3]")} +
                ${g.getByOffset("j")} * ${S.get("position_id","bsnh[3]")};
            ${v.setByOffset("j","im")}
          } else {
            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;
            ${v.setByOffset("k",g.getByOffset("k"))}
          }
        }`};return{name:"RotaryEmbedding",shaderCache:{hint:Nt({interleaved:t}).cacheKey,inputDependencies:["rank","rank","rank","rank"]},getShaderSource:T,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(be.size(d)/to)},programUniforms:f})}},Ky=(e,r)=>{Wg(e.inputs,r),e.compute(ha(e.inputs,r))}}),Gg,Kg,lu,Hg,qy,xx=je(()=>{lr(),ft(),lc(),Vy(),Gy(),Zs(),Hy(),Tt(),Gg=(e,r)=>{if(r.doRotary&&e.length<=7)throw new Error("cos_cache and sin_cache inputs are required if do_rotary is specified");let t=e[0],s=e[1],o=e[2],n=e[3],i=e[4];if(r.doRotary!==0&&e.length<=7)throw new Error("cos_cast and sin_cache are expected if do_rotary attribute is non-zero");if(r.localWindowSize!==-1)throw new Error("Local attention is not supported");if(r.softcap!==0)throw new Error("Softcap is not supported");if(r.rotaryInterleaved!==0)throw new Error("Rotary interleaved is not supported");if(r.smoothSoftmax)throw new Error("Smooth softmax is not supported");if(t.dims.length!==3&&t.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let a=!1,l=t.dims[0],u=t.dims[1],p=t.dims.length===3?a?t.dims[2]/3:t.dims[2]:r.numHeads*t.dims[4],c=u,d=0,_=!s||s.dims.length===0,f=Math.floor(_?p/(r.numHeads+2*r.kvNumHeads):p/r.numHeads);_&&(p=f*r.numHeads);let T=n&&n.dims.length!==0,I=i&&i.dims.length!==0;if(T&&n.dims.length===4&&n.dims[0]===l&&n.dims[1]!==r.kvNumHeads&&n.dims[2]===r.kvNumHeads&&n.dims[3]===f)throw new Error("BSNH pastKey/pastValue is not supported");if(T&&I){if(n.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(i.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');d=n.dims[2]}else if(T||I)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let g=1;if(s&&s.dims.length>0){if(t.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(s.dims.length<3||s.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(t.dims[0]!==s.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(s.dims.length===3){if(t.dims[2]%s.dims[2]!==0)throw new Error('Dimension 2 of "query" should be a multiple of "key"');c=s.dims[1]}else if(s.dims.length===5){if(s.dims[2]!==r.numHeads||s.dims[3]!==2||s.dims[4]!==f)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(o)throw new Error('Expect "value" be none when "key" has packed kv format.');c=s.dims[1]}else{if(s.dims[1]!==r.numHeads||s.dims[3]!==f)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');c=s.dims[2]}}else{if(t.dims.length!==3&&t.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(t.dims.length===5&&(t.dims[2]!==r.numHeads||t.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');g=3}let w=0,S=!1,E=r.kvNumHeads?f*r.kvNumHeads:p;if(o&&o.dims.length>0){if(o.dims.length!==3&&o.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(t.dims[0]!==o.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(o.dims.length===3){if(c!==o.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');E=o.dims[2]}else{if(c!==o.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');E=o.dims[1]*o.dims[3],S=!0}}let v=e.length>4?e[5]:void 0;if(v&&v.dims.length!==1&&v.dims[0]!==l)throw new Error('Input "seqlens" is expected to have 1 dimension and the same dim 0 as batch_size');return{batchSize:l,sequenceLength:u,pastSequenceLength:d,kvSequenceLength:c,totalSequenceLength:-1,maxSequenceLength:-1,inputHiddenSize:0,hiddenSize:p,vHiddenSize:E,headSize:f,vHeadSize:Math.floor(E/r.kvNumHeads),numHeads:r.numHeads,kvNumHeads:r.kvNumHeads,nReps:r.numHeads/r.kvNumHeads,pastPresentShareBuffer:!1,maskType:w,scale:r.scale,broadcastResPosBias:!1,passPastInKv:S,qkvFormat:g}},Kg=Nt({perm:[0,2,1,3]}),lu=(e,r,t)=>{let s=r,o=t.kvNumHeads;return r.dims.length===3&&t.kvSequenceLength!==0&&(s=r.reshape([t.batchSize,t.kvSequenceLength,o,t.headSize]),s=e.compute(Jr(s,Kg.perm),{inputs:[s],outputs:[-1]})[0]),s},Hg=(e,r,t,s)=>{let o=7,n=["type","type"],i=[e*r],a=e*r,l=[{type:12,data:a},{type:12,data:r},{type:12,data:e}],u=p=>{let c=Ce("seq_lens",t.dataType,t.dims),d=Ce("total_seq_lens",s.dataType,s.dims),_=tt("pos_ids",o,i),f=[{name:"output_size",type:"u32"},{name:"sequence_length",type:"u32"},{name:"batch_size",type:"u32"}];return`
  ${p.registerUniforms(f).declareVariables(c,d,_)}
  ${p.mainStart()}
    ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let total_sequence_length = u32(${d.getByOffset("0")});
    let is_subsequent_prompt = uniforms.sequence_length > 1 && uniforms.sequence_length != total_sequence_length;
    let is_first_prompt = !is_subsequent_prompt && uniforms.sequence_length == total_sequence_length;
    let batch_idx = global_idx / uniforms.sequence_length;
    let sequence_idx = i32(global_idx % uniforms.sequence_length);
    var pos_id: i32 = 0;
    let seqlen = ${c.getByOffset("batch_idx")};
    let total_seqlen = seqlen + 1;
    if (is_first_prompt) {
      if (sequence_idx < total_seqlen) {
        pos_id = sequence_idx;
      } else {
        pos_id = 1;
      }
      ${_.setByOffset("global_idx","pos_id")}
    } else if (is_subsequent_prompt) {
      let past_seqlen = total_seqlen - i32(uniforms.sequence_length);
      if (past_seqlen + sequence_idx < total_seqlen) {
        pos_id = past_seqlen + sequence_idx;
      } else {
        pos_id = 1;
      }
      ${_.setByOffset("global_idx","pos_id")}
    } else if (global_idx < uniforms.batch_size) {
      ${_.setByOffset("global_idx","seqlen")}
    };
  }
  `};return{name:"GeneratePositionIds",shaderCache:{hint:`${e};${r}`,inputDependencies:n},getRunData:()=>({outputs:[{dims:i,dataType:o}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:l}),getShaderSource:u}},qy=(e,r)=>{var E;let t=Gg(e.inputs,r);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(((E=e.inputs[1])==null?void 0:E.dims.length)===5)throw new Error("Packed KV is not implemented");let s=e.inputs[0],o=e.inputs[1]&&e.inputs[1].dims.length>0?e.inputs[1]:void 0,n=e.inputs[2]&&e.inputs[2].dims.length>0?e.inputs[2]:void 0,i=e.inputs[3]&&e.inputs[3].dims.length!==0?e.inputs[3]:void 0,a=e.inputs[4]&&e.inputs[4].dims.length!==0?e.inputs[4]:void 0,l=e.inputs.length>4?e.inputs[5]:void 0,u=e.inputs.length>5?e.inputs[6]:void 0,p=t.kvNumHeads?t.kvNumHeads:t.numHeads,c=Nt({axis:2,numOutputs:3,splitSizes:[t.numHeads*t.headSize,p*t.headSize,p*t.headSize]}),[d,_,f]=!o&&!n?e.compute(Uu([s],c),{inputs:[s],outputs:[-1,-1,-1]}):[s,o,n],T,I;if(r.doRotary){let v=e.compute(Hg(t.batchSize,t.sequenceLength,l,u),{inputs:[l,u],outputs:[-1]})[0],M=e.inputs[7],y=e.inputs[8],C=Nt({interleaved:r.rotaryInterleaved!==0,numHeads:t.numHeads,rotaryEmbeddingDim:0,scale:r.scale}),F=[d,v,M,y],z=[-1];T=e.compute(ha(F,C),{inputs:F,outputs:z})[0],F.splice(0,1,_);let K=Nt({interleaved:r.rotaryInterleaved!==0,numHeads:t.kvNumHeads,rotaryEmbeddingDim:0,scale:r.scale});I=e.compute(ha(F,K),{inputs:F,outputs:z})[0]}let g=Ho(e,t.batchSize,t.numHeads,t.sequenceLength,t.headSize,r.doRotary?T:d,void 0,0),w=lu(e,r.doRotary?I:_,t),S=lu(e,f,t);Jo(e,g,w,S,void 0,void 0,i,a,void 0,t,l,u)}}),uu,qg,Qg,Qy,Tx=je(()=>{ft(),xt(),Zs(),Tt(),uu=(e,r,t,s,o,n,i,a)=>{let l=nr(n),u=l===1?"f32":`vec${l}f`,p=l===1?"vec2f":`mat2x${l}f`,c=o*i,d=64;c===1&&(d=256);let _=[o,i,n/l],f=[o,i,2],T=["rank","type","type"],I=[];I.push(...ut(_,f));let g=w=>{let S=Ce("x",r.dataType,3,l),E=Ce("scale",t.dataType,t.dims),v=Ce("bias",s.dataType,s.dims),M=tt("output",1,3,2),y=[S,E,v,M];return`
  var<workgroup> workgroup_shared : array<${p}, ${d}>;
  const workgroup_size = ${d}u;
  ${w.declareVariables(...y)}
  ${w.mainStart(d)}
    let batch = workgroup_index / uniforms.x_shape[1];
    let channel = workgroup_index % uniforms.x_shape[1];
    let hight = uniforms.x_shape[2];
    // initialize workgroup memory
    var sum = ${u}(0);
    var squared_sum = ${u}(0);
    for (var h = local_idx; h < hight; h += workgroup_size) {
      let value = ${u}(${S.get("batch","channel","h")});
      sum += value;
      squared_sum += value * value;
    }
    workgroup_shared[local_idx] = ${p}(sum, squared_sum);
    workgroupBarrier();

    for (var currSize = workgroup_size >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (local_idx < currSize) {
        workgroup_shared[local_idx] = workgroup_shared[local_idx] + workgroup_shared[local_idx + currSize];
      }
      workgroupBarrier();
    }
    if (local_idx == 0) {
      let sum_final = ${Ys("workgroup_shared[0][0]",l)} / f32(hight * ${l});
      let squared_sum_final = ${Ys("workgroup_shared[0][1]",l)} / f32(hight * ${l});

      let inv_std_dev = inverseSqrt(squared_sum_final - sum_final * sum_final + f32(${a}));
      let channel_scale = inv_std_dev * f32(scale[channel]);
      let channel_shift = f32(bias[channel]) - sum_final * channel_scale;
      output[workgroup_index] = vec2f(channel_scale, channel_shift);
    }
  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${l};${a};${d}`,inputDependencies:T},getRunData:()=>({outputs:[{dims:f,dataType:1}],dispatchGroup:{x:c},programUniforms:I}),getShaderSource:g},{inputs:[r,t,s],outputs:[-1]})[0]},qg=(e,r,t)=>{let s=r[0].dims,o=s,n=2,i=s[0],a=s[1],l=be.sizeFromDimension(s,n),u=nr(l),p=be.size(o)/u,c=uu(e,r[0],r[1],r[2],i,l,a,t.epsilon),d=[i,a,l/u],_=[i,a],f=["type","none"],T=I=>{let g=Ce("x",r[0].dataType,d.length,u),w=Ce("scale_shift",1,_.length,2),S=tt("output",r[0].dataType,d.length,u),E=[g,w,S];return`
  ${I.registerUniform("output_size","u32").declareVariables(...E)}
  ${I.mainStart()}
  ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let outputIndices = ${S.offsetToIndices("global_idx")};
      let batch = outputIndices[0];
      let channel = outputIndices[1];
      let scale_shift = ${w.getByIndices("vec2<u32>(batch, channel)")};
      let value = ${g.getByOffset("global_idx")} * ${S.type.value}(scale_shift.x) + ${S.type.value}(scale_shift.y);
      ${S.setByOffset("global_idx","value")};
  }`};e.compute({name:"InstanceNormalization",shaderCache:{hint:`${u}`,inputDependencies:f},getRunData:()=>({outputs:[{dims:o,dataType:r[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:[{type:12,data:p},...ut(d,_,d)]}),getShaderSource:T},{inputs:[r[0],c]})},Qg=(e,r,t)=>{let s=r[0].dims,o=s,n=s[0],i=s[s.length-1],a=be.sizeFromDimension(s,1)/i,l=nr(i),u=be.size(o)/l,p=[{type:12,data:a},{type:12,data:Math.floor(i/l)}],c=["type","type"],d=!1,_=[0,s.length-1];for(let g=0;g<s.length-2;g++)d=d||s[g+1]!==1,_.push(g+1);d=d&&s[s.length-1]!==1;let f=d?e.compute(Jr(e.inputs[0],_),{inputs:[e.inputs[0]],outputs:[-1]})[0]:e.inputs[0].reshape(Array.from({length:s.length},(g,w)=>s[_[w]])),T=uu(e,f,r[1],r[2],n,a,i,t.epsilon),I=g=>{let w=$r(r[0].dataType),S=l===1?"vec2f":`mat${l}x2f`,E=y=>{let C=y===0?"x":"y",F=l===1?"f32":`vec${l}f`;switch(l){case 1:return`${w}(${F}(scale.${C}))`;case 2:return`vec2<${w}>(${F}(scale[0].${C}, scale[1].${C}))`;case 4:return`vec4<${w}>(${F}(scale[0].${C}, scale[1].${C}, scale[2].${C}, scale[3].${C}))`;default:throw new Error(`Not supported compoents ${l}`)}},v=Ce("input",r[0].dataType,r[0].dims,l),M=tt("output",r[0].dataType,o,l);return`
  @group(0) @binding(0) var<storage, read> input : array<${v.type.storage}>;
  @group(0) @binding(1) var<storage, read> scale_input : array<${S}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${M.type.storage}>;
  struct Uniforms {H: u32, C : u32};
  @group(0) @binding(3) var<uniform> uniforms: Uniforms;

  ${g.mainStart()}
    let current_image_number = global_idx / (uniforms.C * uniforms.H);
    let current_channel_number = global_idx % uniforms.C;

    let scale_offset = current_image_number * uniforms.C + current_channel_number;
    let scale = scale_input[scale_offset];
    output[global_idx] = fma(input[global_idx], ${E(0)}, ${E(1)});
  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${l}`,inputDependencies:c},getRunData:()=>({outputs:[{dims:o,dataType:r[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:p}),getShaderSource:I},{inputs:[r[0],T]})},Qy=(e,r)=>{r.format==="NHWC"?Qg(e,e.inputs,r):qg(e,e.inputs,r)}}),Xg,Jg,Xy,Ex=je(()=>{ft(),xt(),Tt(),Xg=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Jg=(e,r,t)=>{let s=r.simplified,o=e[0].dims,n=e[1],i=!s&&e[2],a=o,l=be.normalizeAxis(r.axis,o.length),u=be.sizeToDimension(o,l),p=be.sizeFromDimension(o,l),c=be.size(n.dims),d=i?be.size(i.dims):0;if(c!==p||i&&d!==p)throw new Error(`Size of X.shape()[axis:] == ${p}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${c} and bias size of ${d}`);let _=[];for(let v=0;v<o.length;++v)v<l?_.push(o[v]):_.push(1);let f=nr(p),T=["type","type"],I=[{type:12,data:u},{type:1,data:p},{type:12,data:Math.floor(p/f)},{type:1,data:r.epsilon}];i&&T.push("type");let g=t>1,w=t>2,S=v=>{let M=$r(e[0].dataType),y=[Ce("x",e[0].dataType,e[0].dims,f),Ce("scale",n.dataType,n.dims,f)];i&&y.push(Ce("bias",i.dataType,i.dims,f)),y.push(tt("output",e[0].dataType,a,f)),g&&y.push(tt("mean_data_output",1,_)),w&&y.push(tt("inv_std_output",1,_));let C=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`
  ${v.registerUniforms(C).declareVariables(...y)}
  ${v.mainStart()}
    ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}
    let offset = global_idx * uniforms.norm_size_vectorized;
    var mean_vector = ${Ou("f32",f)};
    var mean_square_vector = ${Ou("f32",f)};

    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {
      let value = ${Zn(M,f,"x[h + offset]")};
      mean_vector += value;
      mean_square_vector += value * value;
    }
    let mean = ${Ys("mean_vector",f)} / uniforms.norm_size;
    let inv_std_dev = inverseSqrt(${Ys("mean_square_vector",f)} / uniforms.norm_size ${s?"":"- mean * mean"} + uniforms.epsilon);

    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {
      let f32input = ${Zn(M,f,"x[j + offset]")};
      let f32scale = ${Zn(M,f,"scale[j]")};
      output[j + offset] = ${y[0].type.value}((f32input ${s?"":"- mean"}) * inv_std_dev * f32scale
        ${i?`+ ${Zn(M,f,"bias[j]")}`:""}
      );
    }

    ${g?"mean_data_output[global_idx] = mean":""};
    ${w?"inv_std_output[global_idx] = inv_std_dev":""};
  }`},E=[{dims:a,dataType:e[0].dataType}];return g&&E.push({dims:_,dataType:1}),w&&E.push({dims:_,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${f};${t};${s}`,inputDependencies:T},getRunData:()=>({outputs:E,dispatchGroup:{x:Math.ceil(u/64)},programUniforms:I}),getShaderSource:S}},Xy=(e,r)=>{Xg(e.inputs),e.compute(Jg(e.inputs,r,e.outputCount))}}),Yg,Jy,Px=je(()=>{xt(),hc(),mc(),Yg=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},Jy=e=>{Yg(e.inputs);let r=eo.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!r)throw new Error("Can't use matmul on the given tensors");let t=r[r.length-1],s=e.inputs[0].dims[e.inputs[0].dims.length-1];if(t<8&&s<8)e.compute(pc(e.inputs,{activation:""},r));else{let o=r[r.length-2],n=be.size(e.inputs[0].dims.slice(0,-2)),i=be.size(e.inputs[1].dims.slice(0,-2));if(n!==1&&o===1&&i===1){let a=e.inputs[0].reshape([1,n,s]),l=e.inputs[1].reshape([1,s,t]),u=[1,n,t],p=[a,l];e.compute(pa(p,{activation:""},r,u),{inputs:p})}else e.compute(pa(e.inputs,{activation:""},r))}}}),Zg,ew,tw,Yy,Zy,Cx=je(()=>{ft(),xt(),lr(),Tt(),Zg=(e,r)=>{if(e.length<3||e.length>4)throw new Error("MatMulNBits requires 3 or 4 inputs");let t=e[0],s=t.dims.length;if(t.dims[s-1]!==r.k)throw new Error("The last dim of input shape does not match the k value");let o=Math.floor((r.k+r.blockSize-1)/r.blockSize),n=r.blockSize/8*r.bits,i=e[1];if(!be.areEqual(i.dims,[r.n,o,n]))throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");let a=e[2].dims;if(be.size(a)!==r.n*o)throw new Error("scales input size error.");if(e.length===4){let l=e[3].dims,u=r.bits>4?r.n*o:r.n*Math.floor((o+1)/2);if(be.size(l)!==u)throw new Error("zeroPoints input size error.")}},ew=(e,r)=>{let t=e[0].dims,s=t.length,o=t[s-2],n=r.k,i=r.n,a=t.slice(0,s-2),l=be.size(a),u=e[1].dims[2]/4,p=e[0].dataType,c=nr(r.k),d=nr(u),_=nr(i),f=a.concat([o,i]),T=o>1&&i/_%2===0?2:1,I=be.size(f)/_/T,g=64,w=[],S=[l,o,n/c],E=be.convertShape(e[1].dims).slice();E.splice(-1,1,u/d),w.push(...ut(S)),w.push(...ut(E)),w.push(...ut(e[2].dims)),e.length===4&&w.push(...ut(be.convertShape(e[3].dims)));let v=[l,o,i/_];w.push(...ut(v));let M=y=>{let C=S.length,F=Ce("a",e[0].dataType,C,c),z=Ce("b",12,E.length,d),K=Ce("scales",e[2].dataType,e[2].dims.length),q=[F,z,K],R=e.length===4?Ce("zero_points",12,e[3].dims.length):void 0;R&&q.push(R);let Z=v.length,H=tt("output",e[0].dataType,Z,_),J=$r(e[0].dataType),Q=(()=>{switch(c){case 1:return`array<${J}, 8>`;case 2:return`mat4x2<${J}>`;case 4:return`mat2x4<${J}>`;default:throw new Error(`${c}-component is not supported.`)}})(),se=()=>{let V=`
          // reuse a data
            var input_offset = ${F.indicesToOffset(`${F.type.indices}(batch, row, word_offset)`)};
            var a_data: ${Q};
            for (var j: u32 = 0; j < ${8/c}; j++) {
              a_data[j] = ${F.getByOffset("input_offset")};
              input_offset++;
            }
          `;for(let A=0;A<_*T;A++)V+=`
            b_value = ${d===1?`b${A}_data`:`b${A}_data[i]`};
            b_value_lower = unpack4xU8(b_value & b_mask);
            b_value_upper = unpack4xU8((b_value >> 4) & b_mask);
            b_quantized_values = ${Q}(${Array.from({length:4},(U,ee)=>`${J}(b_value_lower[${ee}]), ${J}(b_value_upper[${ee}])`).join(", ")});
            b_dequantized_values = ${c===1?`${Q}(${Array.from({length:8},(U,ee)=>`(b_quantized_values[${ee}] - ${R?`zero_point${A}`:"zero_point"}) * scale${A}`).join(", ")});`:`(b_quantized_values - ${Q}(${Array(8).fill(`${R?`zero_point${A}`:"zero_point"}`).join(",")})) * scale${A};`};
            workgroup_shared[local_id.x * ${T} + ${Math.floor(A/_)}]${_>1?`[${A%_}]`:""} += ${Array.from({length:8/c},(U,ee)=>`${c===1?`a_data[${ee}] * b_dequantized_values[${ee}]`:`dot(a_data[${ee}], b_dequantized_values[${ee}])`}`).join(" + ")};
          `;return V},fe=()=>{let V=`
            var col_index = col * ${_};
            ${R?`
            let zero_point_bytes_per_col = (nBlocksPerCol + 1) / 2;
            var zero_point_byte_count: u32;
            var zero_point_word_index: u32;
            var zero_point_byte_offset: u32;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            var zero_point_bits_offset: u32;
            var zero_point_word: u32;`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${J}(8);`}
            `;for(let A=0;A<_*T;A++)V+=`
            let scale${A} = ${K.getByOffset("col_index * nBlocksPerCol + block")};
            ${R?`
            zero_point_byte_count = col_index * zero_point_bytes_per_col + (block >> 0x1u);
            zero_point_word_index = zero_point_byte_count >> 0x2u;
            zero_point_byte_offset = zero_point_byte_count & 0x3u;
            zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            zero_point_word = ${R.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point${A} = ${J}((zero_point_word) & 0xFu);`:""}
            col_index += 1;`;return V},ae=()=>{let V=`col_index = col * ${_};`;for(let A=0;A<_*T;A++)V+=`
            let b${A}_data = ${z.getByIndices(`${z.type.indices}(col_index, block, word)`)};
            col_index += 1;`;return V+=`
            var b_value: u32;
            let b_mask: u32 = 0x0F0F0F0Fu;
            var b_value_lower: vec4<u32>;
            var b_value_upper: vec4<u32>;
            var b_quantized_values: ${Q};
            var b_dequantized_values: ${Q};`,V};return`
        var<workgroup> workgroup_shared: array<${H.type.value}, ${T*g}>;
        ${y.declareVariables(...q,H)}
        ${y.mainStart([g,1,1])}
          let output_indices = ${H.offsetToIndices(`(global_idx / ${g}) * ${T}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let nBlocksPerCol = uniforms.b_shape[1];

          for (var block = local_id.x; block < nBlocksPerCol; block += ${g}) {
            //process one block
            var word_offset: u32 = block * ${r.blockSize/c};
            ${fe()}
            for (var word: u32 = 0; word < ${u}; word += ${d}) {
              ${ae()}
              for (var i: u32 = 0; i < ${d}; i++) {
                ${se()}
                word_offset += ${8/c};
              }
            }
          }
          workgroupBarrier();

          if (local_id.x < ${T}) {
            var output_value: ${H.type.value} = ${H.type.value}(0);
            var workgroup_shared_offset: u32 = local_id.x;
            for (var b: u32 = 0u; b < ${g}u; b++) {
              output_value += workgroup_shared[workgroup_shared_offset];
              workgroup_shared_offset += ${T};
            }
            ${H.setByIndices(`${H.type.indices}(batch, row, col + local_id.x)`,"output_value")};
          }
        }`};return{name:"MatMulNBits",shaderCache:{hint:`${r.blockSize};${r.bits};${c};${d};${_};${T};${g}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:f,dataType:p}],dispatchGroup:{x:I},programUniforms:w}),getShaderSource:M}},tw=(e,r)=>{let t=e[0].dims,s=t.length,o=t[s-2],n=r.k,i=r.n,a=t.slice(0,s-2),l=be.size(a),u=e[1].dims[2]/4,p=e[0].dataType,c=nr(r.k),d=nr(u),_=a.concat([o,i]),f=128,T=i%8===0?8:i%4===0?4:1,I=f/T,g=I*d*8,w=g/c,S=g/r.blockSize,E=be.size(_)/T,v=[],M=[l,o,n/c],y=be.convertShape(e[1].dims).slice();y.splice(-1,1,u/d),v.push(...ut(M)),v.push(...ut(y)),v.push(...ut(e[2].dims)),e.length===4&&v.push(...ut(be.convertShape(e[3].dims)));let C=[l,o,i];v.push(...ut(C));let F=z=>{let K=M.length,q=Ce("a",e[0].dataType,K,c),R=Ce("b",12,y.length,d),Z=Ce("scales",e[2].dataType,e[2].dims.length),H=[q,R,Z],J=e.length===4?Ce("zero_points",12,e[3].dims.length):void 0;J&&H.push(J);let Q=C.length,se=tt("output",e[0].dataType,Q),fe=$r(e[0].dataType),ae=()=>{switch(c){case 1:return`
          let a_data0 = vec4<${fe}>(sub_a[word_offset], sub_a[word_offset + 1], sub_a[word_offset + 2], sub_a[word_offset + 3]);
          let a_data1 = vec4<${fe}>(sub_a[word_offset + 4], sub_a[word_offset + 5], sub_a[word_offset + 6], sub_a[word_offset + 7]);`;case 2:return`
          let a_data0 = vec4<${fe}>(sub_a[word_offset], sub_a[word_offset + 1]);
          let a_data1 = vec4<${fe}>(sub_a[word_offset + 2], sub_a[word_offset + 3]);`;case 4:return`
          let a_data0 = sub_a[word_offset];
          let a_data1 = sub_a[word_offset + 1];`;default:throw new Error(`${c}-component is not supported.`)}};return`
        var<workgroup> sub_a: array<${q.type.value}, ${w}>;
        var<workgroup> inter_results: array<array<${se.type.value}, ${I}>, ${T}>;
        ${z.declareVariables(...H,se)}
        ${z.mainStart([I,T,1])}
          let output_indices = ${se.offsetToIndices(`workgroup_index * ${T}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let n_blocks_per_col = uniforms.b_shape[1];
          let num_tiles =  (n_blocks_per_col - 1) / ${S} + 1;

          // Loop over shared dimension.
          for (var tile: u32 = 0; tile < num_tiles; tile += 1) {
            let a_col_start = tile * ${w};
            // load one tile A data into shared memory.
            for (var a_offset = local_idx; a_offset < ${w}; a_offset += ${f})
            {
              let a_col = a_col_start + a_offset;
              if (a_col < uniforms.a_shape[2])
              {
                sub_a[a_offset] = ${q.getByIndices(`${q.type.indices}(batch, row, a_col)`)};
              } else {
                sub_a[a_offset] = ${q.type.value}(0);
              }
            }
            workgroupBarrier();

            // each thread process one block
            let b_row = col + local_id.y;
            let block = tile * ${S} + local_id.x;
            ${J?`
            let zero_point_bytes_per_col = (n_blocks_per_col + 1) / 2;
            let zero_point_byte_count = b_row * zero_point_bytes_per_col + (block >> 0x1u);
            let zero_point_word_index = zero_point_byte_count >> 0x2u;
            let zero_point_byte_offset = zero_point_byte_count & 0x3u;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            let zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            let zero_point_word = ${J.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point = ${fe}((zero_point_word) & 0xFu);`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${fe}(8);`}
            let scale = ${Z.getByOffset("b_row * n_blocks_per_col + block")};
            let b_data = ${R.getByIndices(`${R.type.indices}(b_row, block, 0)`)};
            var word_offset = local_id.x * ${r.blockSize/c};
            for (var i: u32 = 0; i < ${d}; i++) {
              ${ae()}
              let b_value = ${d===1?"b_data":"b_data[i]"};
              let b_value_lower = unpack4xU8(b_value & 0x0F0F0F0Fu);
              let b_value_upper = unpack4xU8((b_value >> 4) & 0x0F0F0F0Fu);
              let b_quantized_values = mat2x4<${fe}>(${Array.from({length:4},(V,A)=>`${fe}(b_value_lower[${A}]), ${fe}(b_value_upper[${A}])`).join(", ")});
              let b_dequantized_values = (b_quantized_values - mat2x4<${fe}>(${Array(8).fill("zero_point").join(",")})) * scale;
              inter_results[local_id.y][local_id.x] += ${Array.from({length:2},(V,A)=>`${`dot(a_data${A}, b_dequantized_values[${A}])`}`).join(" + ")};
              word_offset += ${8/c};
            }
            workgroupBarrier();
          }

          if (local_idx < ${T}) {
            var output_value: ${se.type.value} = ${se.type.value}(0);
            for (var b = 0u; b < ${I}; b++) {
              output_value += inter_results[local_idx][b];
            }
            if (col + local_idx < uniforms.output_shape[2])
            {
              ${se.setByIndices(`${se.type.indices}(batch, row, col + local_idx)`,"output_value")}
            }
          }
        }`};return{name:"BlockwiseMatMulNBits32",shaderCache:{hint:`${r.blockSize};${c};${d};${I};${T}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:_,dataType:p}],dispatchGroup:{x:E},programUniforms:v}),getShaderSource:F}},Yy=(e,r)=>{Zg(e.inputs,r),r.blockSize===32&&e.adapterInfo.isVendor("intel")&&e.adapterInfo.isArchitecture("gen-12lp")?e.compute(tw(e.inputs,r)):e.compute(ew(e.inputs,r))},Zy=e=>Nt(e)}),rw,sw,nw,ow,iw,aw,lw,uw,e0,Sx=je(()=>{ft(),xt(),Tt(),rw=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1&&e[0].dataType!==10)throw new Error("Input type must be float or float16.");if(e.length>=2){let r=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(r=e[3].dims[0]*2===e[1].dims[0]),!r)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},sw=(e,r,t)=>{let s="";for(let o=r-1;o>=0;--o)s+=`
            k = i32(${e.indicesGet("indices",o)}) - ${ot("uniforms.pads",o,t)};
            if (k < 0) {
              break;
            }
            if (k >= i32(${ot("uniforms.x_shape",o,r)})) {
              break;
            }
            offset += k * i32(${ot("uniforms.x_strides",o,r)});
        `;return`
          value = ${e.type.value}(uniforms.constant_value);
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${s}
            value = x[offset];
          }
      `},nw=(e,r,t)=>{let s="";for(let o=r-1;o>=0;--o)s+=`
                k = i32(${e.indicesGet("indices",o)}) - ${ot("uniforms.pads",o,t)};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = 2 * (i32(${ot("uniforms.x_shape",o,r)}) - 1);
                  k = k % _2n_1;
                  if(k >= i32(${ot("uniforms.x_shape",o,r)})) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * i32(${ot("uniforms.x_strides",o,r)});
            `;return`
              var offset = 0;
              var k = 0;
              ${s}
              value = x[offset];
          `},ow=(e,r,t)=>{let s="";for(let o=r-1;o>=0;--o)s+=`
                k = i32(${e.indicesGet("indices",o)}) - ${ot("uniforms.pads",o,t)};
                if (k < 0) {
                  k = 0;
                }
                if (k >= i32(${ot("uniforms.x_shape",o,r)})) {
                  k = i32(${ot("uniforms.x_shape",o,r)}) - 1;
                }
                offset += k * i32(${ot("uniforms.x_strides",o,r)});
            `;return`
              var offset = 0;
              var k = 0;
              ${s}
              value = x[offset];
          `},iw=(e,r,t)=>{let s="";for(let o=r-1;o>=0;--o)s+=`
                k = i32(${e.indicesGet("indices",o)}) - ${ot("uniforms.pads",o,t)};
                if (k < 0)  {
                  k += i32(${ot("uniforms.x_shape",o,r)}]);
                }
                if (k >= i32(${ot("uniforms.x_shape",o,r)})) {
                  k -= i32(${ot("uniforms.x_shape",o,r)});
                }
                offset += k * i32(${ot("uniforms.x_strides",o,r)});
            `;return`
              var offset = 0;
              var k = 0;
              ${s}
              value = x[offset];
          `},aw=(e,r,t)=>{switch(t.mode){case 0:return sw(e,r,t.pads.length);case 1:return nw(e,r,t.pads.length);case 2:return ow(e,r,t.pads.length);case 3:return iw(e,r,t.pads.length);default:throw new Error("Invalid mode")}},lw=(e,r)=>{let t=be.padShape(e[0].dims.slice(),r.pads),s=e[0].dims,o=be.size(t),n=[{type:12,data:o},{type:6,data:r.pads}],i=e.length>=3&&e[2].data;r.mode===0&&n.push({type:i?e[2].dataType:1,data:r.value}),n.push(...ut(e[0].dims,t));let a=["rank"],l=u=>{let p=tt("output",e[0].dataType,t.length),c=Ce("x",e[0].dataType,s.length),d=c.type.value,_=aw(p,s.length,r),f=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:r.pads.length}];return r.mode===0&&f.push({name:"constant_value",type:i?d:"f32"}),`
            ${u.registerUniforms(f).declareVariables(c,p)}
            ${u.mainStart()}
            ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

            let indices = ${p.offsetToIndices("global_idx")};

            var value = ${d}(0);
            ${_}
            output[global_idx] = value;
        }`};return{name:"Pad",shaderCache:{hint:`${r.mode}${i}`,inputDependencies:a},getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(be.size(t)/64)},programUniforms:n}),getShaderSource:l}},uw=(e,r)=>{if(e.length>1){let t=e[1].getBigInt64Array(),s=e.length>=3&&e[2].data?e[2].dataType===10?e[2].getUint16Array()[0]:e[2].getFloat32Array()[0]:0,o=e[0].dims.length,n=new Int32Array(2*o).fill(0);if(e.length>=4){let a=e[3].getBigInt64Array();for(let l=0;l<a.length;l++)n[Number(a[l])]=Number(t[l]),n[Number(a[l])+o]=Number(t[l+a.length])}else t.forEach((a,l)=>n[Number(l)]=Number(a));let i=[];return n.forEach(a=>i.push(a)),{mode:r.mode,value:s,pads:i}}else return r},e0=(e,r)=>{rw(e.inputs);let t=uw(e.inputs,r);e.compute(lw(e.inputs,t),{inputs:[0]})}}),jo,cu,du,pu,hu,cw,dw,mu,fu,t0,r0,_u,s0,n0,gu,o0,i0,a0,l0,$x=je(()=>{Es(),ft(),xt(),Tt(),jo=e=>{if(Yt.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},cu=(e,r,t)=>{let s=r.format==="NHWC",o=e.dims.slice();s&&o.splice(1,0,o.pop());let n=Object.hasOwnProperty.call(r,"dilations"),i=r.kernelShape.slice(),a=r.strides.slice(),l=n?r.dilations.slice():[],u=r.pads.slice();ca.adjustPoolAttributes(t,o,i,a,l,u);let p=ca.computePoolOutputShape(t,o,a,l,i,u,r.autoPad),c=Object.assign({},r);n?Object.assign(c,{kernelShape:i,strides:a,pads:u,dilations:l,cacheKey:r.cacheKey}):Object.assign(c,{kernelShape:i,strides:a,pads:u,cacheKey:r.cacheKey});let d=p.slice();return d.push(d.splice(1,1)[0]),[c,s?d:p]},du=(e,r)=>{let t=r.format==="NHWC",s=be.size(e),o=be.size(r.kernelShape),n=[{type:12,data:s},{type:12,data:o}],i=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(r.kernelShape.length<=2){let a=r.kernelShape[r.kernelShape.length-1],l=r.strides[r.strides.length-1],u=r.pads[r.pads.length/2-1],p=r.pads[r.pads.length-1],c=!!(u+p);n.push({type:12,data:a},{type:12,data:l},{type:12,data:u},{type:12,data:p}),i.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let d=!1;if(r.kernelShape.length===2){let _=r.kernelShape[r.kernelShape.length-2],f=r.strides[r.strides.length-2],T=r.pads[r.pads.length/2-2],I=r.pads[r.pads.length-2];d=!!(T+I),n.push({type:12,data:_},{type:12,data:f},{type:12,data:T},{type:12,data:I}),i.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[n,i,!0,c,d]}else{if(t)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let a=be.computeStrides(r.kernelShape);n.push({type:12,data:a},{type:12,data:r.pads},{type:12,data:r.strides}),i.push({name:"kernelStrides",type:"u32",length:a.length},{name:"pads",type:"u32",length:r.pads.length},{name:"strides",type:"u32",length:r.strides.length});let l=r.pads.reduce((u,p)=>u+p);return[n,i,!!l,!1,!1]}},pu=(e,r,t,s,o,n,i,a,l,u,p,c)=>{let d=o.format==="NHWC",_=r.type.value,f=tt("output",r.type.tensor,s);if(o.kernelShape.length<=2){let T="",I="",g="",w=t-(d?2:1);if(p?T=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${w}] = indices[${w}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${w}] < 0 || xIndices[${w}]
                      >= uniforms.x_shape[${w}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${r.indicesToOffset("xIndices")}];
                  ${n}
                }`:T=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${w}] = indices[${w}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${r.indicesToOffset("xIndices")}];
                  ${n}
                }`,o.kernelShape.length===2){let S=t-(d?3:2);c?I=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${S}] = indices[${S}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${S}] < 0 || xIndices[${S}] >= uniforms.x_shape[${S}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              `:I=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${S}] = indices[${S}] * uniforms.sh - uniforms.phStart + j;
                `,g=`
              }
            `}return`
            ${e.registerUniforms(l).declareVariables(r,f)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${f.offsetToIndices("global_idx")};
              var xIndices = ${f.offsetToIndices("global_idx")};

              var value = ${_}(${a});
              var pad = 0;
              ${I}
              ${T}
              ${g}
              ${i}

              output[global_idx] = value;
            }`}else{if(d)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let T=o.kernelShape.length,I=o.pads.length,g="";return u?g=`
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${r.indicesToOffset("xIndices")}];
                ${n}
              }`:g=`
              }
              let x_val = x[${r.indicesToOffset("xIndices")}];
              ${n}
            `,`
            ${e.registerUniforms(l).declareVariables(r,f)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${f.offsetToIndices("global_idx")};
              var xIndices = ${f.offsetToIndices("global_idx")};

              var offsets: array<u32, ${T}>;

              var value = ${_}(${a});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${T-1}u; j++) {
                  offsets[j] = offset / ${ot("uniforms.kernelStrides","j",T)};
                  offset -= offsets[j] * ${ot("uniforms.kernelStrides","j",T)};
                }
                offsets[${T-1}] = offset;

                isPad = false;
                for (var j = ${t-T}u; j < ${t}u; j++) {
                  xIndices[j] = indices[j] * ${ot("uniforms.strides",`j - ${t-T}u`,T)}
                    + offsets[j - ${t-T}u] - ${ot("uniforms.pads","j - 2u",I)};
                  ${g}
              }
              ${i}

              output[global_idx] = value;
            }`}},hu=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,cw=e=>`${hu(e)};${e.countIncludePad}`,dw=e=>`${hu(e)};${e.storageOrder};${e.dilations}`,mu=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),fu=(e,r,t,s)=>{let[o,n]=cu(r,s,t),i=Ce("x",r.dataType,r.dims.length),a=i.type.value,l="value += x_val;",u="";o.countIncludePad?u+=`value /= ${a}(uniforms.kernelSize);`:u+=`value /= ${a}(i32(uniforms.kernelSize) - pad);`;let[p,c,d,_,f]=du(n,o);p.push(...ut(r.dims,n));let T=["rank"];return{name:e,shaderCache:{hint:`${s.cacheKey};${d};${_};${f}`,inputDependencies:T},getRunData:()=>({outputs:[{dims:n,dataType:r.dataType}],dispatchGroup:{x:Math.ceil(be.size(n)/64)},programUniforms:p}),getShaderSource:I=>pu(I,i,r.dims.length,n.length,o,l,u,0,c,d,_,f)}},t0=e=>{let r=e.count_include_pad!==0,t=mu(e);if(t.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let s={countIncludePad:r,...t,cacheKey:""};return{...s,cacheKey:cw(s)}},r0=(e,r)=>{jo(e.inputs),e.compute(fu("AveragePool",e.inputs[0],!1,r))},_u={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},s0=e=>{let r=e.format;return{format:r,..._u,cacheKey:r}},n0=(e,r)=>{jo(e.inputs),e.compute(fu("GlobalAveragePool",e.inputs[0],!0,r))},gu=(e,r,t,s)=>{let[o,n]=cu(r,s,t),i=`
      value = max(x_val, value);
    `,a="",l=Ce("x",r.dataType,r.dims.length),u=["rank"],[p,c,d,_,f]=du(n,o);return p.push(...ut(r.dims,n)),{name:e,shaderCache:{hint:`${s.cacheKey};${d};${_};${f}`,inputDependencies:u},getRunData:()=>({outputs:[{dims:n,dataType:r.dataType}],dispatchGroup:{x:Math.ceil(be.size(n)/64)},programUniforms:p}),getShaderSource:T=>pu(T,l,r.dims.length,n.length,o,i,a,r.dataType===10?-65504:-1e5,c,d,_,f)}},o0=(e,r)=>{jo(e.inputs),e.compute(gu("MaxPool",e.inputs[0],!1,r))},i0=e=>{let r=e.storage_order,t=e.dilations,s=mu(e);if(r!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(s.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let o={storageOrder:r,dilations:t,...s,cacheKey:""};return{...o,cacheKey:dw(o)}},a0=e=>{let r=e.format;return{format:r,..._u,cacheKey:r}},l0=(e,r)=>{jo(e.inputs),e.compute(gu("GlobalMaxPool",e.inputs[0],!0,r))}}),pw,hw,u0,c0,Ix=je(()=>{ft(),xt(),lr(),Tt(),pw=(e,r)=>{if(e.length<2||e.length>3)throw new Error("DequantizeLinear requires 2 or 3 inputs.");if(e.length===3&&e[1].dims===e[2].dims)throw new Error("x-scale and x-zero-point must have the same shape.");if(e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(e[0].dataType===6&&e.length>2)throw new Error("In the case of dequantizing int32 there is no zero point.");if(e[1].dims.length!==0&&e[1].dims.length!==1&&e[1].dims.length!==e[0].dims.length)throw new Error("scale input must be a scalar, a 1D tensor, or have the same rank as the input tensor.");if(e.length>2){if(e[0].dataType!==e[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(e[1].dims.length!==e[2].dims.length)throw new Error("scale and zero-point inputs must have the same rank.");if(!e[1].dims.map((t,s)=>t===e[2].dims[s]).reduce((t,s)=>t&&s,!0))throw new Error("scale and zero-point inputs must have the same shape.")}if(r.blockSize>0){if(e[1].dims.length===0||e[1].dims.length===1&&e[1].dims[0]===1)throw new Error("blockSize must be set only for block quantization.");if(!e[1].dims.map((o,n)=>n===r.axis||o===e[0].dims[n]).reduce((o,n)=>o&&n,!0))throw new Error("For block qunatization, scale input shape to match the input shape except for the axis");if(e[1].dims.length!==e[0].dims.length)throw new Error("For block qunatization the scale input rank must be the same as the x rank.");let t=e[0].dims[r.axis],s=e[1].dims[r.axis];if(r.blockSize<Math.ceil(t/s)||r.blockSize>Math.ceil(t/(s-1)-1))throw new Error("blockSize must be with in the range [ceil(dI / Si), ceil(dI / (Si - 1) - 1)].")}},hw=(e,r)=>{let t=be.normalizeAxis(r.axis,e[0].dims.length),s=e[0].dataType,o=s===3,n=e[0].dims,i=e[1].dataType,a=be.size(n),l=s===3||s===2,u=l?[Math.ceil(be.size(e[0].dims)/4)]:e[0].dims,p=e[1].dims,c=e.length>2?e[2]:void 0,d=c?l?[Math.ceil(be.size(c.dims)/4)]:c.dims:void 0,_=p.length===0||p.length===1&&p[0]===1,f=_===!1&&p.length===1,T=nr(a),I=_&&(!l||T===4),g=I?T:1,w=I&&!l?T:1,S=Ce("input",l?12:s,u.length,w),E=Ce("scale",i,p.length),v=c?Ce("zero_point",l?12:s,d.length):void 0,M=tt("output",i,n.length,g),y=[S,E];v&&y.push(v);let C=[u,p];c&&C.push(d);let F=[{type:12,data:a/g},{type:12,data:t},{type:12,data:r.blockSize},...ut(...C,n)],z=K=>{let q=[{name:"output_size",type:"u32"},{name:"axis",type:"u32"},{name:"block_size",type:"u32"}];return`
      ${K.registerUniforms(q).declareVariables(...y,M)}
      ${K.mainStart()}
          ${K.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let output_indices = ${M.offsetToIndices("global_idx")};

          // Set input x
          ${l?`
            let input = ${S.getByOffset("global_idx / 4")};
            let x_vec = ${o?"unpack4xI8(input)":"unpack4xU8(input)"};
            let x_value = ${g===1?"x_vec[global_idx % 4]":"x_vec"};`:`let x_value = ${S.getByOffset("global_idx")};`};

          // Set scale input
          ${_?`let scale_value= ${E.getByOffset("0")}`:f?`
            let scale_index = ${M.indicesGet("output_indices","uniforms.axis")};
            let scale_value= ${E.getByOffset("scale_index")};`:`
            var scale_indices: ${E.type.indices} = output_indices;
            let index = ${E.indicesGet("scale_indices","uniforms.axis")} / uniforms.block_size;
            ${E.indicesSet("scale_indices","uniforms.axis","index")};
            let scale_value= ${E.getByIndices("scale_indices")};`};

          // Set zero-point input
          ${v?_?l?`
                let zero_point_input = ${v.getByOffset("0")};
                let zero_point_vec =  ${o?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value= zero_point_vec[0]`:`let zero_point_value = ${v.getByOffset("0")}`:f?l?`
                let zero_point_index = ${M.indicesGet("output_indices","uniforms.axis")};
                let zero_point_input = ${v.getByOffset("zero_point_index / 4")};
                let zero_point_vec =  ${o?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_index % 4]`:`
                let zero_point_index = ${M.indicesGet("output_indices","uniforms.axis")};
                let zero_point_value = ${v.getByOffset("zero_point_index")};`:l?`
                let zero_point_offset = ${E.indicesToOffset("scale_indices")};
                let zero_point_input = ${v.getByOffset("zero_point_offset / 4")};
                let zero_point_vec = ${o?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_offset % 4];`:`let zero_point_value = ${v.getByIndices("scale_indices")};`:`let zero_point_value = ${l?o?"i32":"u32":S.type.value}(0);`};
      // Compute and write output
      ${M.setByOffset("global_idx",`${M.type.value}(x_value - zero_point_value) * scale_value`)};
      }`};return{name:"DequantizeLinear",shaderCache:{hint:r.cacheKey,inputDependencies:v?["rank","rank","rank"]:["rank","rank"]},getShaderSource:z,getRunData:()=>({outputs:[{dims:n,dataType:i}],dispatchGroup:{x:Math.ceil(a/g/64),y:1,z:1},programUniforms:F})}},u0=(e,r)=>{pw(e.inputs,r),e.compute(hw(e.inputs,r))},c0=e=>Nt({axis:e.axis,blockSize:e.blockSize})}),mw,fw,d0,kx=je(()=>{Es(),ft(),Tt(),mw=(e,r,t)=>{let s=e===r,o=e<r&&t<0,n=e>r&&t>0;if(s||o||n)throw new Error("Range these inputs' contents are invalid.")},fw=(e,r,t,s)=>{let o=Math.abs(Math.ceil((r-e)/t)),n=[o],i=o,a=[{type:12,data:i},{type:s,data:e},{type:s,data:t},...ut(n)],l=u=>{let p=tt("output",s,n.length),c=p.type.value,d=[{name:"outputSize",type:"u32"},{name:"start",type:c},{name:"delta",type:c}];return`
        ${u.registerUniforms(d).declareVariables(p)}
        ${u.mainStart()}
        ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        output[global_idx] = uniforms.start + ${c}(global_idx) * uniforms.delta;
      }`};return{name:"Range",shaderCache:{hint:`${s}`},getShaderSource:l,getRunData:()=>({outputs:[{dims:n,dataType:s}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:a})}},d0=e=>{let r=0,t=0,s=0;e.inputs[0].dataType===6?(r=e.inputs[0].getInt32Array()[0],t=e.inputs[1].getInt32Array()[0],s=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(r=e.inputs[0].getFloat32Array()[0],t=e.inputs[1].getFloat32Array()[0],s=e.inputs[2].getFloat32Array()[0]),Yt.webgpu.validateInputContent&&mw(r,t,s),e.compute(fw(r,t,s,e.inputs[0].dataType),{inputs:[]})}}),_w,wu,Mu,gw,p0,h0,Ax=je(()=>{ft(),xt(),lr(),Tt(),_w=(e,r,t,s)=>{if(e!=="none"&&s!=="i32"&&s!=="u32"&&s!=="f32")throw new Error(`Input ${s} is not supported with reduction ${e}.`);let o=`{
                var oldValue = 0;
                loop {
                  let newValueF32 =`,n=`;
                  let newValue = bitcast<i32>(newValueF32);
                  let res = atomicCompareExchangeWeak(&${r}, oldValue, newValue);
                  if res.exchanged {
                    break;
                  }
                  oldValue = res.old_value;
                }
              }`;switch(e){case"none":return`${r}=${t};`;case"add":return s==="i32"||s==="u32"?`atomicAdd(&${r}, bitcast<${s}>(${t}));`:`
              ${o}bitcast<${s}>(oldValue) + (${t})${n}`;case"max":return s==="i32"||s==="u32"?`atomicMax(&${r}, bitcast<${s}>(${t}));`:`
                ${o}max(bitcast<f32>(oldValue), (${t}))${n}`;case"min":return s==="i32"||s==="u32"?`atomicMin(&${r}, bitcast<${s}>(${t}));`:`${o}min(bitcast<${s}>(oldValue), (${t}))${n}`;case"mul":return`${o}(bitcast<${s}>(oldValue) * (${t}))${n}`;default:throw new Error(`Reduction ${e} is not supported.`)}},wu=(e,r)=>`${e===1?`
    let element_count_dim = uniforms.output_strides;
    let dim_value = uniforms.output_shape;`:`
    let element_count_dim = uniforms.output_strides[${r?"i - indices_start":"i"}];
    let dim_value = uniforms.output_shape[${r?"i - indices_start":"i"} + uniforms.last_index_dimension];`}
    
    if (index >= 0) {
      if (index >= i32(dim_value)) {
        index = i32(dim_value - 1);
      }
    } else {
      if (index < -i32(dim_value)) {
        index = 0;
      } else {
        index += i32(dim_value);
      }
    }
    data_offset += u32((u32(index) * element_count_dim));`,Mu=(e,r,t)=>`for (var i = 0u; i < uniforms.num_updates_elements; i++) {
        let value = updates[uniforms.num_updates_elements * ${t?"global_idx":"idx"} + i];
        ${_w(e.reduction,"output[data_offset + i]","value",r)}
      }`,gw=(e,r)=>{let t=e[0].dims,s=e[1].dims,o=t,n=1,i=Math.ceil(be.size(s)/n),a=s[s.length-1],l=be.sizeFromDimension(t,a),u=be.sizeFromDimension(s,0)/a,p=[{type:12,data:i},{type:12,data:a},{type:12,data:l},...ut(e[1].dims,e[2].dims,o)],c=d=>{let _=Ce("indices",e[1].dataType,e[1].dims.length),f=Ce("updates",e[2].dataType,e[2].dims.length,n),T=r.reduction!=="none"&&r.reduction!==""?NM("output",e[0].dataType,o.length):tt("output",e[0].dataType,o.length,n);return`
      ${d.registerUniform("output_size","u32").registerUniform("last_index_dimension","u32").registerUniform("num_updates_elements","u32").declareVariables(_,f,T)}
      ${d.mainStart()}
        ${d.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
  var hasDuplicates = false;
  if (${r.reduction==="none"}) {
    for (var i = 0; i < ${u}; i = i + 1) {
      for (var j = i + 1; j < ${u}; j = j + 1) {
        var index_i = i32(indices[i].x);
        var index_j = i32(indices[j].x);
        if (index_i == index_j) {
          hasDuplicates = true;
          break;
        }
      }
      if (hasDuplicates) {
        break;
      }
    }
  }

  if (${r.reduction==="none"} && hasDuplicates) {
    if (global_idx != 0u) {
      return;
    }
    // Process each index-update pair individually when duplicates exist
    for (var idx = 0u; idx < ${u}u; idx++) {
      var data_offset = 0u;
      for (var i = 0u; i < uniforms.last_index_dimension; i++) {
        var index = i32(indices[idx * uniforms.last_index_dimension + i].x);
        ${wu(t.length,!1)}
      }
      ${Mu(r,T.type.value,!1)}
    }
    return;
  }

  var data_offset = 0u;
  var indices_start = uniforms.last_index_dimension * global_idx;
  var indices_end = indices_start + uniforms.last_index_dimension;
  for (var i = indices_start; i < indices_end; i++) {
    var index = i32(indices[i].x);
    ${wu(t.length,!0)}
  }
  ${Mu(r,T.type.value,!0)}
  }`};return{name:"ScatterND",shaderCache:{hint:`${r.cacheKey}_${r.reduction}`,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:p}),getShaderSource:c}},p0=e=>Nt({reduction:e.reduction}),h0=(e,r)=>{e.compute(gw(e.inputs,r),{inputs:[e.inputs[1],e.inputs[2]],outputs:[]})}}),ww,Mw,bw,bu,yw,vw,xw,Tw,Ew,Pw,Cw,Sw,yu,$w,Iw,kw,Aw,Fw,m0,f0,Fx=je(()=>{ft(),xt(),lr(),Tt(),ww=(e,r)=>{if(e.every(t=>t>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(r.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and
            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(r.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},Mw=(e,r,t)=>{r.every(o=>o>=0&&o<t||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let s=new Array(t).fill(1);return r.forEach((o,n)=>s[o]=e[n]),s},bw=(e,r,t,s,o,n)=>{let[i,a,l]=t>10?[1,2,3]:[-1,e.length>1?1:-1,-1],u=e[0].dims.length;if(i>0&&e.length>i&&e[i].dims.length>0)e[i].getFloat32Array().forEach(p=>n.push(p));else if(r.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(a>0&&e.length>a&&e[a].dims.length===1&&e[a].dims[0]>0){if(e[a].getFloat32Array().forEach(p=>s.push(p)),s.length!==0&&s.length!==u&&t>=18&&s.length!==r.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");ww(s,r),r.axes.length>0&&Mw(s,r.axes,u).forEach((p,c)=>s[c]=p)}if(l>0&&e.length>l&&e[l].dims.length===1&&e[l].dims[0]>0&&(e[l].getBigInt64Array().forEach(p=>o.push(Number(p))),o.length!==0&&o.length!==u&&t>=18&&o.length!==r.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(r.axes.length>0){if(s.length!==0&&s.length!==r.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(o.length!==0&&o.length!==r.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof s<"u"&&typeof o<"u"&&s.length>0&&o.length>u)throw new Error("Resize requires only of scales or sizes to be specified")},bu=(e,r,t,s)=>`
  // The whole part and the fractional part are calculated separately due to inaccuracy of floating
  // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an
  // offset-by-one error later in floor().
  let big = (${e}) * (${r});
  let whole = ${s}(big / (${t}));
  let fract = ${s}(big % (${t})) / ${s}(${t});
  return whole + fract;
`,yw=(e,r)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,
     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${r} { `+(()=>{switch(e){case"asymmetric":return`
          if (xScale < 1.0 || floor(xScale) != xScale) {
            return ${r}(xResized) / ${r}(xScale);
          } else {
            ${bu("xResized","lengthOriginal","lengthResized",r)}
          }
        `;case"pytorch_half_pixel":return`if (lengthResized > 1) {
                    return (${r}(xResized) + 0.5) / ${r}(xScale) - 0.5;
                  } else {
                    return 0.0;
                  }`;case"tf_half_pixel_for_nn":return`return (${r}(xResized) + 0.5) / ${r}(xScale);`;case"align_corners":return`if (lengthResized == 1) {
                    return 0.0;
                  } else {
                    ${bu("xResized","lengthOriginal - 1","lengthResized - 1",r)}
                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {
                    return ${r}(roiStart) * ${r}(lengthOriginal - 1) +
                        (${r}(xResized) * ${r}(roiEnd - roiStart) * ${r}(lengthOriginal - 1)) /
                        ${r}(lengthResized - 1);
                  } else {
                    return 0.5 * ${r}(roiStart + roiEnd) * ${r}(lengthOriginal - 1);
                  }`;case"half_pixel_symmetric":return`const outputWidth = ${r}xScale * ${r}(lengthResized);
                  const adjustment = ${r}(lengthResized) / outputWidth;
                  const center = ${r}(lengthOriginal) / 2;
                  const offset = center * (1 - adjustment);
                  return offset + ((${r}(xResized) + 0.5) / ${r}(xScale)) - 0.5;`;case"half_pixel":return`return ((${r}(xResized) + 0.5) / ${r}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",vw=(e,r,t)=>`fn getNearestPixelFromOriginal(xOriginal: ${t}, isDownSample: bool) -> ${t} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(r<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",xw=(e,r,t)=>{let s=new Array(t).fill(0).concat(new Array(t).fill(1)),o=e.length===0?s:e.slice();return r.length>0?(r.forEach((n,i)=>{s[n]=o[i],s[i+t]=o[r.length+i]}),s):o},Tw=(e,r,t,s)=>{let o=[];if(t.length>0)if(s.length>0){if(e.forEach(n=>o.push(n)),Math.max(...s)>e.length)throw new Error("axes is out of bound");s.forEach((n,i)=>o[n]=t[i])}else t.forEach(n=>o.push(n));else{if(r.length===0)throw new Error("Resize requires either scales or sizes.");o=e.map((n,i)=>Math.round(n*r[i]))}return o},Ew=(e,r,t)=>{let s=(()=>{switch(t.keepAspectRatioPolicy){case"not_larger":return t.axes.length>0?Math.min(...t.axes.map(n=>r[n]),Number.MAX_VALUE):Math.min(...r,Number.MAX_VALUE);case"not_smaller":return t.axes.length>0?Math.max(...t.axes.map(n=>r[n]),Number.MIN_VALUE):Math.max(...r,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${t.keepAspectRatioPolicy} is not supported`)}})();r.fill(1,0,r.length);let o=e.slice();return t.axes.length>0?(t.axes.forEach(n=>r[n]=s),t.axes.forEach(n=>o[n]=Math.round(e[n]*r[n]))):(r.fill(s,0,r.length),o.forEach((n,i)=>o[i]=Math.round(n*r[i]))),o},Pw=(e,r,t,s,o)=>`
    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${t.length}> {
      var original_indices: array<${e.type.value}, ${t.length}>;
      for (var i:u32 = 0; i < ${t.length}; i++) {
        var output_index = ${e.indicesGet("output_indices","i")};
        var scale = ${ot("uniforms.scales","i",s)};
        var roi_low = ${ot("uniforms.roi","i",o)};
        var roi_hi = ${ot("uniforms.roi",`i + ${r.length}`,o)};
        if (scale == 1.0) {
          original_indices[i] = ${e.type.value}(output_index);
        } else {
          var input_shape_i = ${ot("uniforms.input_shape","i",r.length)};
          var output_shape_i = ${ot("uniforms.output_shape","i",t.length)};
          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                           input_shape_i, roi_low, roi_hi);
        }
      }
      return original_indices;
    }`,Cw=(e,r,t,s,o,n,i)=>`
    fn calculateInputIndicesFromOutputIndices(output_indices: ${r.type.indices}) -> ${e.type.indices} {
      var input_indices: ${e.type.indices};
      for (var i:u32 = 0; i < ${s.length}; i++) {
        var output_index = ${r.indicesGet("output_indices","i")};
        var input_index: u32;
        var scale = ${ot("uniforms.scales","i",o)};
        if (scale == 1.0) {
          input_index = output_index;
        } else {
          var roi_low = ${ot("uniforms.roi","i",n)};
          var roi_hi = ${ot("uniforms.roi",`i + ${t.length}`,n)};
          var input_shape_i = ${ot("uniforms.input_shape","i",t.length)};
          var output_shape_i = ${ot("uniforms.output_shape","i",s.length)};
          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                        input_shape_i, roi_low, roi_hi);
          if (!${i} || (original_idx >= 0 && original_idx < ${r.type.value}(input_shape_i))) {
            if (original_idx < 0) {
              input_index = 0;
            } else if (original_idx > ${r.type.value}(input_shape_i - 1)) {
              input_index = input_shape_i - 1;
            } else {
              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));
            }
          } else {
            input_index = u32(original_idx);
          }
        }
        ${e.indicesSet("input_indices","i","input_index")}
      }
      return input_indices;
    }`,Sw=(e,r)=>`
    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {
      for (var i:u32 = 0; i < ${r.length}; i++) {
        var input_index = ${e.indicesGet("input_indices","i")};
        if (input_index < 0 || input_index >= ${ot("uniforms.input_shape","i",r.length)}) {
          return false;
        }
      }
      return true;
    }`,yu=(e,r,t,s)=>e.rank>s?`
    ${e.indicesSet("input_indices",r,"channel")};
    ${e.indicesSet("input_indices",t,"batch")};
`:"",$w=(e,r,t,s,o)=>{let[n,i,a,l]=t.length===2?[-1,0,1,-1]:[0,2,3,1],u=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${u} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",i,`max(0, min(row, ${t[i]} - 1))`)};
      ${e.indicesSet("input_indices",a,`max(0, min(col, ${t[a]} - 1))`)};
      ${yu(e,l,n,2)}
      return ${e.getByIndices("input_indices")};
    }

    fn bilinearInterpolation(output_indices: ${r.type.indices}) -> ${u} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var row:${u} = originalIndices[${i}];
      var col:${u} = originalIndices[${a}];
      ${s?`if (row < 0 || row > (${t[i]} - 1) || col < 0 || col > (${t[a]} - 1)) {
        return ${o};
      }`:""};
      row = max(0, min(row, ${t[i]} - 1));
      col = max(0, min(col, ${t[a]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = ${t.length>2?`u32(originalIndices[${l}])`:"0"};
      var batch: u32 =  ${t.length>2?`u32(originalIndices[${n}])`:"0"};
      var x11: ${u} = getInputValue(batch, channel, row1, col1);
      var x12: ${u} = getInputValue(batch, channel, row1, col2);
      var x21: ${u} = getInputValue(batch, channel, row2, col1);
      var x22: ${u} = getInputValue(batch, channel, row2, col2);
      var dx1: ${u} = abs(row - ${u}(row1));
      var dx2: ${u} = abs(${u}(row2) - row);
      var dy1: ${u} = abs(col - ${u}(col1));
      var dy2: ${u} = abs(${u}(col2) - col);
      if (row1 == row2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (col1 == col2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},Iw=(e,r,t,s,o,n,i,a,l,u)=>{let p=t.length===2,[c,d]=p?[0,1]:[2,3],_=e.type.value,f=T=>{let I=T===c?"row":"col";return`
      fn ${I}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${r.type.indices}) -> ${_} {
        var output_index = ${r.indicesGet("output_indices",T)};
        var originalIdx: ${_} = getOriginalCoordinateFromResizedCoordinate(output_index, ${o[T]},
        ${s[T]}, ${t[T]}, ${n[T]}, ${n[T]} + ${t.length});
        var fractOriginalIdx: ${_} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${a} && (originalIdx < 0 || originalIdx > (${t[T]} - 1))) {
          return ${l};
        }
        var data: array<${_}, 4> = array<${_}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${I}: ${_} = originalIdx + ${_}(i);
          if (${I} < 0 || ${I} >= ${t[T]}) {
            ${u?`coefs[i + 1] = 0.0;
                        continue;`:a?`return ${l};`:`${I} = max(0, min(${I}, ${t[T]} - 1));`};
          }
        var input_indices_copy: ${e.type.indices} = input_indices;
          ${e.indicesSet("input_indices_copy",T,`u32(${I})`)};
          data[i + 1] = ${T===c?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${f(c)};
    ${f(d)};
  fn getCubicInterpolationCoefs(s: ${_}) -> array<${_}, 4> {
    var absS = abs(s);
    var coeffs: array<${_}, 4> = array<${_}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${_} = 1.0 - absS;
    var twoMinusAbsS: ${_} = 2.0 - absS;
    var onePlusAbsS: ${_} = 1.0 + absS;
    coeffs[0] = ((${i} * onePlusAbsS - 5 * ${i}) * onePlusAbsS + 8 * ${i}) * onePlusAbsS - 4 * ${i};
    coeffs[1] = ((${i} + 2) * absS - (${i} + 3)) * absS * absS + 1;
    coeffs[2] = ((${i} + 2) * oneMinusAbsS - (${i} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${i} * twoMinusAbsS - 5 * ${i}) * twoMinusAbsS + 8 * ${i}) * twoMinusAbsS - 4 * ${i};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${_}, 4>, coefs: array<${_}, 4>) -> ${_} {
    var coefsSum: ${_} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(output_indices: ${r.type.indices}) -> ${_} {
    var input_indices: ${e.type.indices} = output_indices;
    return colCubicInterpolation(input_indices, output_indices);
  }
    `},kw=(e,r,t,s,o)=>{let[n,i,a,l,u]=t.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],p=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${p} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",i,`max(0, min(depth, ${t[i]} - 1))`)};
      ${e.indicesSet("input_indices",a,`max(0, min(height, ${t[a]} - 1))`)};
      ${e.indicesSet("input_indices",l,`max(0, min(width, ${t[l]} - 1))`)};
      ${yu(e,u,n,3)}
      return ${e.getByIndices("input_indices")};
    }

    fn trilinearInterpolation(output_indices: ${r.type.indices}) -> ${p} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var depth:${p} = originalIndices[${i}];
      var height:${p} = originalIndices[${a}];
      var width:${p} = originalIndices[${l}];
      ${s?`if (depth < 0 || depth > (${t[i]} - 1) || height < 0 || height > (${t[a]} - 1) || width < 0 || (width > ${t[l]} - 1)) {
      return ${o};
        }`:""};

    depth = max(0, min(depth, ${t[i]} - 1));
      height = max(0, min(height, ${t[a]} - 1));
      width = max(0, min(width, ${t[l]} - 1));
      var depth1: u32 = u32(depth);
      var height1: u32 = u32(height);
      var width1: u32 = u32(width);
      var depth2: u32 = u32(depth + 1);
      var height2: u32 = u32(height + 1);
      var width2: u32 = u32(width + 1);
      var channel: u32 = ${t.length>3?`u32(originalIndices[${u}])`:"0"};
      var batch: u32 =  ${t.length>3?`u32(originalIndices[${n}])`:"0"};

      var x111: ${p} = getInputValue(batch, channel, depth1, height1, width1);
      var x112: ${p} = getInputValue(batch, channel, depth1, height1, width2);
      var x121: ${p} = getInputValue(batch, channel, depth1, height2, width1);
      var x122: ${p} = getInputValue(batch, channel, depth1, height2, width2);
      var x211: ${p} = getInputValue(batch, channel, depth2, height1, width1);
      var x212: ${p} = getInputValue(batch, channel, depth2, height1, width2);
      var x221: ${p} = getInputValue(batch, channel, depth2, height2, width1);
      var x222: ${p} = getInputValue(batch, channel, depth2, height2, width2);
      var dx1: ${p} = abs(depth - ${p}(depth1));
      var dx2: ${p} = abs(${p}(depth2) - depth);
      var dy1: ${p} = abs(height - ${p}(height1));
      var dy2: ${p} = abs(${p}(height2) - height);
      var dz1: ${p} = abs(width - ${p}(width1));
      var dz2: ${p} = abs(${p}(width2) - width);
      if (depth1 == depth2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (height1 == height2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      if (width1 == width2) {
        dz1 = 0.5;
        dz2 = 0.5;
      }
      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +
              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);
    }`},Aw=(e,r,t,s,o,n)=>{let i=e.dims,a=xw(n,r.axes,i.length),l=Tw(i,s,o,r.axes),u=s.slice();s.length===0&&(u=i.map((w,S)=>w===0?1:l[S]/w),r.keepAspectRatioPolicy!=="stretch"&&(l=Ew(i,u,r)));let p=tt("output",e.dataType,l.length),c=Ce("input",e.dataType,i.length),d=be.size(l),_=i.length===l.length&&i.every((w,S)=>w===l[S]),f=r.coordinateTransformMode==="tf_crop_and_resize",T=r.extrapolationValue,I=c.type.value,g=w=>`
      ${_?"":`
      ${yw(r.coordinateTransformMode,I)};
      ${(()=>{switch(r.mode){case"nearest":return`
              ${Sw(c,i)};
              ${vw(r.nearestMode,t,I)};
              ${Cw(c,p,i,l,u.length,a.length,f)};
              `;case"linear":return`
              ${Pw(p,i,l,u.length,a.length)};
              ${(()=>{if(i.length===2||i.length===4)return`${$w(c,p,i,f,T)}`;if(i.length===3||i.length===5)return`${kw(c,p,i,f,T)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};
            `;case"cubic":return`
            ${(()=>{if(i.length===2||i.length===4)return`${Iw(c,p,i,l,u,a,r.cubicCoeffA,f,r.extrapolationValue,r.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${w.registerUniform("output_size","u32").registerUniform("scales","f32",u.length).registerUniform("roi","f32",a.length).declareVariables(c,p)}
      ${w.mainStart()}
        ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
        ${_?"output[global_idx] = input[global_idx];":`
        let output_indices = ${p.offsetToIndices("global_idx")};
        var input_indices: ${c.type.indices};
        ${(()=>{switch(r.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);
                if (checkInputIndices(input_indices)) {
                  output[global_idx] = ${c.getByIndices("input_indices")};
                } else {
                  output[global_idx] = ${r.extrapolationValue};
                }`;case"linear":return`output[global_idx] = ${i.length===2||i.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${r.mode}`)}})()};
`}
      }`;return{name:"Resize",shaderCache:{hint:`${r.cacheKey}|${t}|${u.length>0?r.mode==="cubic"?u:u.length:""}|${o.length>0?o:""}|${a.length>0?a:""}|${_}|${r.mode==="nearest"?i.length:i}`,inputDependencies:["rank"]},getShaderSource:g,getRunData:()=>({outputs:[{dims:l,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:[{type:12,data:d},{type:1,data:u},{type:1,data:a},...ut(i,l)]})}},Fw=e=>{let r=e.customDataBuffer;return new Uint32Array(r,r.byteOffset,1)[0]},m0=(e,r)=>{let t=[],s=[],o=[],n=Fw(e);if(r.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");bw(e.inputs,r,n,t,s,o),e.compute(Aw(e.inputs[0],r,n,t,s,o),{inputs:[0]})},f0=e=>{let r=e.antialias,t=e.axes,s=e.coordinateTransformMode,o=e.cubicCoeffA,n=e.excludeOutside!==0,i=e.extrapolationValue,a=e.keepAspectRatioPolicy,l=e.mode,u=e.nearestMode===""?"simple":e.nearestMode;return Nt({antialias:r,axes:t,coordinateTransformMode:s,cubicCoeffA:o,excludeOutside:n,extrapolationValue:i,keepAspectRatioPolicy:a,mode:l,nearestMode:u})}}),Ow,Dw,_0,Ox=je(()=>{ft(),xt(),Tt(),Ow=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let r=e[0],t=e[1],s=e[2];if(r.dataType!==t.dataType||r.dataType!==s.dataType)throw new Error("All inputs must have the same data type");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Input must be 2D or 3D");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Skip must be 2D or 3D");let o=r.dims[r.dims.length-1],n=r.dims[r.dims.length-2];if(t.dims[t.dims.length-1]!==o)throw new Error("Skip must have the same hidden size as input");if(t.dims[t.dims.length-2]!==n)throw new Error("Skip must have the same sequence length as input");if(s.dims.length!==1)throw new Error("Gamma must be 1D");if(s.dims[s.dims.length-1]!==o)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let i=e[3];if(i.dims.length!==1)throw new Error("Beta must be 1D");if(i.dims[i.dims.length-1]!==o)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let i=e[4];if(i.dims.length!==1)throw new Error("Bias must be 1D");if(i.dims[i.dims.length-1]!==o)throw new Error("Bias must have the same hidden size as input")}},Dw=(e,r,t,s)=>{let o=r.simplified,n=e[0].dims,i=be.size(n),a=n,l=i,u=n.slice(-1)[0],p=s?n.slice(0,-1).concat(1):[],c=!o&&e.length>3,d=e.length>4,_=s&&t>1,f=s&&t>2,T=t>3,I=64,g=nr(u),w=[{type:12,data:l},{type:12,data:g},{type:12,data:u},{type:1,data:r.epsilon}],S=v=>{let M=[{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}],y=[Ce("x",e[0].dataType,e[0].dims,g),Ce("skip",e[1].dataType,e[1].dims,g),Ce("gamma",e[2].dataType,e[2].dims,g)];c&&y.push(Ce("beta",e[3].dataType,e[3].dims,g)),d&&y.push(Ce("bias",e[4].dataType,e[4].dims,g)),y.push(tt("output",e[0].dataType,a,g)),_&&y.push(tt("mean_output",1,p)),f&&y.push(tt("inv_std_output",1,p)),T&&y.push(tt("input_skip_bias_sum",e[0].dataType,a,g));let C=$r(e[0].dataType),F=$r(1,g);return`

      ${v.registerUniforms(M).declareVariables(...y)}
      var<workgroup> sum_shared : array<${F}, ${I}>;
      var<workgroup> sum_squared_shared : array<${F}, ${I}>;

      ${v.mainStart([I,1,1])}
        let ix = local_id.x;
        let iy = global_id.x / ${I};

        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;
        var stride = hidden_size_vectorized / ${I};
        let offset = ix * stride + iy * hidden_size_vectorized;
        let offset1d = stride * ix;
        if (ix == ${I-1}) {
          stride = hidden_size_vectorized - stride * ix;
        }
        for (var i: u32 = 0; i < stride; i++) {
          let skip_value = skip[offset + i];
          let bias_value = ${d?"bias[offset1d + i]":C+"(0.0)"};
          let input_value = x[offset + i];
          let value = input_value + skip_value + bias_value;
          ${T?"input_skip_bias_sum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32_value = ${Zn(C,g,"value")};
          sum_shared[ix] += f32_value;
          sum_squared_shared[ix] += f32_value * f32_value;
        }
        workgroupBarrier();

        var reduce_size : u32 = ${I};
        for (var curr_size = reduce_size >> 1;  curr_size > 0; curr_size = reduce_size >> 1) {
          reduce_size = curr_size + (reduce_size & 1);
          if (ix < curr_size) {
            sum_shared[ix] += sum_shared[ix + reduce_size];
            sum_squared_shared[ix] += sum_squared_shared[ix + reduce_size];
          }
          workgroupBarrier();
        }

        let sum = sum_shared[0];
        let square_sum = sum_squared_shared[0];
        let mean = ${Ys("sum",g)} / f32(uniforms.hidden_size);
        let inv_std_dev = inverseSqrt(${Ys("square_sum",g)} / f32(uniforms.hidden_size) ${o?"":"- mean * mean"} + uniforms.epsilon);
        ${_?"mean_output[global_idx] = mean;":""}
        ${f?"inv_std_output[global_idx] = inv_std_dev;":""}

        for (var i: u32 = 0; i < stride; i++) {
          output[offset + i] = (output[offset + i] ${o?"":`- ${C}(mean)`}) *
            ${C}(inv_std_dev) * gamma[offset1d + i]
            ${c?"+ beta[offset1d + i]":""};
        }
      }`},E=[{dims:a,dataType:e[0].dataType}];return t>1&&E.push({dims:p,dataType:1}),t>2&&E.push({dims:p,dataType:1}),t>3&&E.push({dims:n,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${g};${_};${f};${T}`,inputDependencies:e.map((v,M)=>"type")},getShaderSource:S,getRunData:()=>({outputs:E,dispatchGroup:{x:Math.ceil(l/u)},programUniforms:w})}},_0=(e,r)=>{Ow(e.inputs);let t=[0];e.outputCount>1&&t.push(-3),e.outputCount>2&&t.push(-3),e.outputCount>3&&t.push(3),e.compute(Dw(e.inputs,r,e.outputCount,!1),{outputs:t})}}),Lw,No,zw,vu,Bw,Rw,g0,w0,Dx=je(()=>{ft(),xt(),lr(),Tt(),Lw=(e,r)=>{if(!e||e.length<1)throw new Error("too few inputs");if(r.axes.length!==0){if(r.axes.length!==r.starts.length||r.axes.length!==r.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(r.starts.length!==r.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((t,s)=>{if(e[s+1].dataType!==6&&e[s+1].dataType!==7)throw new Error(`Input ${s} must be an array of int32 or int64`)})},No=(e,r)=>{let t=[];if(e.length>r)if(e[r].dataType===7)e[r].getBigInt64Array().forEach(s=>t.push(Number(s)));else if(e[r].dataType===6)e[r].getInt32Array().forEach(s=>t.push(Number(s)));else throw new Error(`Input ${r} must be an array of int32 or int64`);return t},zw=(e,r)=>{if(e.length>1){let t=No(e,1),s=No(e,2),o=No(e,3);return o.length===0&&(o=[...Array(e[0].dims.length).keys()]),Nt({starts:t,ends:s,axes:o})}else return r},vu=(e,r,t,s,o)=>{let n=e;return e<0&&(n+=t[s[r]]),o[r]<0?Math.max(0,Math.min(n,t[s[r]]-1)):Math.max(0,Math.min(n,t[s[r]]))},Bw=(e,r,t)=>`fn calculateInputIndices(output_indices: ${r.type.indices}) -> ${e.type.indices} {
          var input_indices: ${e.type.indices};
          var carry = 0u;
          for (var i = ${t.length}; i >= 0; i--) {
            let input_shape_i = ${ot("uniforms.input_shape","i",t.length)};
            let steps_i = ${ot("uniforms.steps","i",t.length)};
            let signs_i = ${ot("uniforms.signs","i",t.length)};
            let starts_i = ${ot("uniforms.starts","i",t.length)};
            var output_index = ${r.indicesGet("output_indices","i")};
            var input_index = output_index * steps_i + starts_i + carry;
            carry = input_index / input_shape_i;
            input_index = input_index % input_shape_i;
            if (signs_i < 0) {
              input_index = input_shape_i - input_index - 1u + starts_i;
            }
            ${e.indicesSet("input_indices","i","input_index")};
          }
          return input_indices;
      }`,Rw=(e,r)=>{let t=e[0].dims,s=be.size(t),o=r.axes.length>0?be.normalizeAxes(r.axes,t.length):[...Array(t.length).keys()],n=No(e,4);n.forEach(g=>g!==0||(()=>{throw new Error("step cannot be 0")})),n.length===0&&(n=Array(o.length).fill(1));let i=r.starts.map((g,w)=>vu(g,w,t,o,n)),a=r.ends.map((g,w)=>vu(g,w,t,o,n));if(o.length!==i.length||o.length!==a.length)throw new Error("start, ends and axes should have the same number of elements");if(o.length!==t.length)for(let g=0;g<t.length;++g)o.includes(g)||(i.splice(g,0,0),a.splice(g,0,t[g]),n.splice(g,0,1));let l=n.map(g=>Math.sign(g));n.forEach((g,w,S)=>{if(g<0){let E=(a[w]-i[w])/g,v=i[w],M=v+E*n[w];i[w]=M,a[w]=v,S[w]=-g}});let u=t.slice(0);o.forEach((g,w)=>{u[g]=Math.ceil((a[g]-i[g])/n[g])});let p={dims:u,dataType:e[0].dataType},c=tt("output",e[0].dataType,u.length),d=Ce("input",e[0].dataType,e[0].dims.length),_=be.size(u),f=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:i.length},{name:"signs",type:"i32",length:l.length},{name:"steps",type:"u32",length:n.length}],T=[{type:12,data:_},{type:12,data:i},{type:6,data:l},{type:12,data:n},...ut(e[0].dims,u)],I=g=>`
      ${g.registerUniforms(f).declareVariables(d,c)}
        ${Bw(d,c,t)}
        ${g.mainStart()}
          ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let output_indices = ${c.offsetToIndices("global_idx")};
          let input_indices = calculateInputIndices(output_indices);
          ${c.setByOffset("global_idx",d.getByIndices("input_indices"))}
      }`;return{name:"Slice",shaderCache:{hint:`${l.length}_${i.length}_${n.length}`,inputDependencies:["rank"]},getShaderSource:I,getRunData:()=>({outputs:[p],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:T})}},g0=(e,r)=>{Lw(e.inputs,r);let t=zw(e.inputs,r);e.compute(Rw(e.inputs,t),{inputs:[0]})},w0=e=>{let r=e.starts,t=e.ends,s=e.axes;return Nt({starts:r,ends:t,axes:s})}}),jw,Nw,M0,b0,Lx=je(()=>{ft(),xt(),lr(),Zs(),Tt(),jw=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},Nw=(e,r)=>{let t=e.inputs[0],s=t.dims,o=be.size(s),n=s.length,i=be.normalizeAxis(r.axis,n),a=i<s.length-1,l,u=[];a?(u=Array.from({length:n},(y,C)=>C),u[i]=n-1,u[n-1]=i,l=e.compute(Jr(t,u),{inputs:[t],outputs:[-1]})[0]):l=t;let p=l.dims,c=p[n-1],d=o/c,_=nr(c),f=c/_,T=64;d===1&&(T=256);let I=(y,C)=>C===4?`max(max(${y}.x, ${y}.y), max(${y}.z, ${y}.w))`:C===2?`max(${y}.x, ${y}.y)`:C===3?`max(max(${y}.x, ${y}.y), ${y}.z)`:y,g=Ce("x",l.dataType,l.dims,_),w=tt("result",l.dataType,l.dims,_),S=g.type.value,E=$r(l.dataType)==="f32"?`var threadMax = ${S}(-3.402823e+38f);`:`var threadMax = ${S}(-65504.0h);`,v=y=>`
      var<workgroup> rowMaxShared : ${S};
      var<workgroup> rowSumShared : ${S};
      var<workgroup> threadShared : array<${S}, ${T}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${S} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${S}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${y.registerUniform("packedCols","i32").declareVariables(g,w)}
      ${y.mainStart(T)}
        let gindex = i32(global_idx);
        let lindex = i32(local_idx);
        const wg = ${T};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${E}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${S}(${I("threadShared[0]",_)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${S}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${S}(${Ys("threadShared[0]",_)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`,M=e.compute({name:"Softmax",shaderCache:{hint:`${_};${T}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:p,dataType:l.dataType}],dispatchGroup:{x:d},programUniforms:[{type:6,data:f}]}),getShaderSource:v},{inputs:[l],outputs:[a?-1:0]})[0];a&&e.compute(Jr(M,u),{inputs:[M]})},M0=(e,r)=>{jw(e.inputs),Nw(e,r)},b0=e=>Nt({axis:e.axis})}),xu,Vw,Uw,Ww,y0,zx=je(()=>{ft(),xt(),Tt(),xu=e=>Array.from(e.getBigInt64Array(),Number),Vw=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==10&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, float16, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(xu(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Uw=(e,r)=>{let t=[];for(let s=0;s<e.length;++s)t.push(e[s]*r[s]);return t},Ww=(e,r)=>{let t=e[0].dims,s=r??xu(e[1]),o=Uw(t,s),n=be.size(o),i=e[0].dataType,a=Ce("input",i,t.length),l=tt("output",i,o.length),u=p=>`
      const inputShape = ${a.indices(...t)};
      ${p.registerUniform("output_size","u32").declareVariables(a,l)}
      ${p.mainStart()}
      ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let output_indices = ${l.offsetToIndices("global_idx")};
      var input_indices: ${a.type.indices};
      for (var i = 0; i < ${t.length}; i++) {
        let input_dim_i = ${a.indicesGet("uniforms.input_shape","i")};
        let input_dim_value = ${l.indicesGet("output_indices","i")}  % input_dim_i;

        ${a.indicesSet("input_indices","i","input_dim_value")}
      }
      ${l.setByOffset("global_idx",a.getByIndices("input_indices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${s}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:12,data:n},...ut(e[0].dims,o)]}),getShaderSource:u}},y0=e=>{Vw(e.inputs),e.compute(Ww(e.inputs),{inputs:[0]})}}),Gw,Kw,v0,Bx=je(()=>{ft(),xt(),Tt(),Gw=(e,r,t,s,o)=>{let n=tt("output_data",o,t.length,4),i=Ce("a_data",r[1].dataType,r[1].dims.length,4),a=Ce("b_data",r[2].dataType,r[2].dims.length,4),l=Ce("c_data",r[0].dataType,r[0].dims.length,4),u,p=(c,d,_)=>`select(${d}, ${c}, ${_})`;if(!s)u=n.setByOffset("global_idx",p(i.getByOffset("global_idx"),a.getByOffset("global_idx"),l.getByOffset("global_idx")));else{let c=(d,_,f="")=>{let T=`a_data[index_a${_}][component_a${_}]`,I=`b_data[index_b${_}][component_b${_}]`,g=`bool(c_data[index_c${_}] & (0xffu << (component_c${_} * 8)))`;return`
            let output_indices${_} = ${n.offsetToIndices(`global_idx * 4u + ${_}u`)};
            let offset_a${_} = ${i.broadcastedIndicesToOffset(`output_indices${_}`,n)};
            let offset_b${_} = ${a.broadcastedIndicesToOffset(`output_indices${_}`,n)};
            let offset_c${_} = ${l.broadcastedIndicesToOffset(`output_indices${_}`,n)};
            let index_a${_} = offset_a${_} / 4u;
            let index_b${_} = offset_b${_} / 4u;
            let index_c${_} = offset_c${_} / 4u;
            let component_a${_} = offset_a${_} % 4u;
            let component_b${_} = offset_b${_} % 4u;
            let component_c${_} = offset_c${_} % 4u;
            ${d}[${_}] = ${f}(${p(T,I,g)});
          `};o===9?u=`
            var data = vec4<u32>(0);
            ${c("data",0,"u32")}
            ${c("data",1,"u32")}
            ${c("data",2,"u32")}
            ${c("data",3,"u32")}
            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:u=`
            ${c("output_data[global_idx]",0)}
            ${c("output_data[global_idx]",1)}
            ${c("output_data[global_idx]",2)}
            ${c("output_data[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(l,i,a,n)}
        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${u}
      }`},Kw=e=>{let r=e[1].dims,t=e[2].dims,s=e[0].dims,o=e[1].dataType,n=!(be.areEqual(r,t)&&be.areEqual(t,s)),i=r,a=be.size(r);if(n){let u=eo.calcShape(eo.calcShape(r,t,!1),s,!1);if(!u)throw new Error("Can't perform where op on the given tensors");i=u,a=be.size(i)}let l=Math.ceil(a/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:u=>Gw(u,e,i,n,o),getRunData:()=>({outputs:[{dims:i,dataType:o}],dispatchGroup:{x:Math.ceil(a/64/4)},programUniforms:[{type:12,data:l},...ut(s,r,t,i)]})}},v0=e=>{e.compute(Kw(e.inputs))}}),x0,Rx=je(()=>{Zv(),lc(),ex(),tx(),rx(),sx(),nx(),ux(),dx(),px(),hx(),mx(),fx(),_x(),gx(),wx(),Mx(),bx(),yx(),vx(),xx(),Tx(),Ex(),Px(),Cx(),Vy(),Sx(),$x(),Ix(),kx(),Ax(),ac(),Fx(),Hy(),Ox(),Dx(),Lx(),Gy(),zx(),Zs(),uc(),Bx(),x0=new Map([["Abs",[_b]],["Acos",[gb]],["Acosh",[wb]],["Add",[Yb]],["ArgMax",[pb,Lu]],["ArgMin",[db,Lu]],["Asin",[Mb]],["Asinh",[bb]],["Atan",[yb]],["Atanh",[vb]],["Attention",[hb]],["AveragePool",[r0,t0]],["BatchNormalization",[mb]],["BiasAdd",[fb]],["BiasSplitGelu",[Jb]],["Cast",[Tb,xb]],["Ceil",[Pb]],["Clip",[Eb]],["Concat",[ly,uy]],["Conv",[Vu,Nu]],["ConvTranspose",[My,wy]],["Cos",[Cb]],["Cosh",[Sb]],["CumSum",[by,yy]],["DepthToSpace",[vy,xy]],["DequantizeLinear",[u0,c0]],["Div",[Zb]],["Einsum",[Ty,Ey]],["Elu",[$b,Ko]],["Equal",[ey]],["Erf",[Ib]],["Exp",[kb]],["Expand",[Py]],["FastGelu",[Cy]],["Floor",[Ab]],["FusedConv",[Vu,Nu]],["Gather",[$y,Sy]],["GatherElements",[Dy,Oy]],["GatherBlockQuantized",[Ay,Fy]],["GatherND",[Iy,ky]],["Gelu",[Fb]],["Gemm",[zy,Ly]],["GlobalAveragePool",[n0,s0]],["GlobalMaxPool",[l0,a0]],["Greater",[ny]],["GreaterOrEqual",[iy]],["GridSample",[By,Ry]],["GroupQueryAttention",[qy]],["HardSigmoid",[Nb,jb]],["InstanceNormalization",[Qy]],["LayerNormalization",[Xy]],["LeakyRelu",[Ob,Ko]],["Less",[oy]],["LessOrEqual",[ay]],["Log",[Qb]],["MatMul",[Jy]],["MatMulNBits",[Yy,Zy]],["MaxPool",[o0,i0]],["Mul",[ty]],["MultiHeadAttention",[Ny,jy]],["Neg",[Lb]],["Not",[Db]],["Pad",[e0]],["Pow",[ry]],["QuickGelu",[Xb,Ko]],["Range",[d0]],["Reciprocal",[zb]],["ReduceMin",[ib]],["ReduceMean",[tb]],["ReduceMax",[ob]],["ReduceSum",[lb]],["ReduceProd",[ab]],["ReduceL1",[rb]],["ReduceL2",[sb]],["ReduceLogSum",[cb]],["ReduceLogSumExp",[nb]],["ReduceSumSquare",[ub]],["Relu",[Bb]],["Resize",[m0,f0]],["RotaryEmbedding",[Ky]],["ScatterND",[h0,p0]],["Sigmoid",[Rb]],["Sin",[Vb]],["Sinh",[Ub]],["Slice",[g0,w0]],["SkipLayerNormalization",[_0]],["Split",[Uy,Wy]],["Sqrt",[Wb]],["Softmax",[M0,b0]],["Sub",[sy]],["Tan",[Gb]],["Tanh",[Kb]],["ThresholdedRelu",[qb,Ko]],["Tile",[y0]],["Transpose",[UM,WM]],["Where",[v0]]])}),T0,jx=je(()=>{Es(),Rs(),Tt(),T0=class{constructor(e){this.backend=e,this.repo=new Map,this.attributesBound=!1}getArtifact(e){return this.repo.get(e)}setArtifact(e,r){this.repo.set(e,r)}run(e,r,t,s,o){Ts(e.programInfo.name);let n=this.backend.device,i=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2);let a=[];for(let u of r)a.push({binding:a.length,resource:{buffer:u.buffer}});for(let u of t)a.push({binding:a.length,resource:{buffer:u.buffer}});o&&a.push({binding:a.length,resource:o});let l=n.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:a,label:e.programInfo.name});if(this.backend.sessionStatus==="capturing"){let u={kernelId:this.backend.currentKernelId,computePipeline:e.computePipeline,bindGroup:l,dispatchGroup:s};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(u)}i.setPipeline(e.computePipeline),i.setBindGroup(0,l),i.dispatchWorkgroups(...s),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),us(e.programInfo.name)}dispose(){}build(e,r){Ts(e.name);let t=this.backend.device,s=[];[{feature:"shader-f16",extension:"f16"},{feature:"subgroups",extension:"subgroups"}].forEach(u=>{t.features.has(u.feature)&&s.push(`enable ${u.extension};`)});let o=VM(r,this.backend.device.limits),n=e.getShaderSource(o),i=`${s.join(`
`)}
${o.additionalImplementations}
${n}`,a=t.createShaderModule({code:i,label:e.name});kt("verbose",()=>`[WebGPU] ${e.name} shader code: ${i}`);let l=t.createComputePipeline({compute:{module:a,entryPoint:"main"},layout:"auto",label:e.name});return us(e.name),{programInfo:e,computePipeline:l,uniformVariablesInfo:o.variablesInfo}}normalizeDispatchGroupSize(e){let r=typeof e=="number"?e:e.x,t=typeof e=="number"?1:e.y||1,s=typeof e=="number"?1:e.z||1,o=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=o&&t<=o&&s<=o)return[r,t,s];let n=r*t*s,i=Math.ceil(Math.sqrt(n));if(i>o){if(i=Math.ceil(Math.cbrt(n)),i>o)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[i,i,i]}else return[i,i,1]}}}),E0={};ro(E0,{WebGpuBackend:()=>P0});var Hw,qw,Qw,P0,Nx=je(()=>{Es(),ft(),Rs(),zM(),Jv(),Rx(),jx(),Hw=(e,r)=>{if(r.length!==e.length)throw new Error(`inputDependencies length ${r.length} is not equal to inputTensors length ${e.length}.`);let t=[];for(let s=0;s<e.length;++s){let o=e[s].dataType;switch(r[s]){case"none":{t.push("");break}case"type":{t.push(`${o}`);break}case"rank":{let n=e[s].dims.length;t.push(`${o};${n}`);break}case"dims":{let n=e[s].dims.join(",");t.push(`${o};${n}`);break}default:throw new Error(`unsupported input dependency: ${r[s]}`)}}return t.join("|")},qw=(e,r,t)=>{var o,n;let s=e.name;return(o=e.shaderCache)!=null&&o.hint&&(s+="["+e.shaderCache.hint+"]"),s+=":"+t+`:${Hw(r,((n=e.shaderCache)==null?void 0:n.inputDependencies)??new Array(r.length).fill("dims"))}`,s},Qw=class{constructor(e){e&&(this.architecture=e.architecture,this.vendor=e.vendor)}isArchitecture(e){return this.architecture===e}isVendor(e){return this.vendor===e}},P0=class{constructor(){this.currentSessionId=null,this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.maxDispatchNumber=16,this.pendingDispatchNumber=0,this.pendingKernels=[],this.pendingQueries=new Map,this.sessionStatus="default",this.capturedCommandList=new Map,this.capturedPendingKernels=new Map,this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let e=this.kernelCustomData.get(this.currentKernelId);return e||(e={},this.kernelCustomData.set(this.currentKernelId,e)),e}async initialize(e,r){this.env=e;let t=[],s={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:t},o=n=>r.features.has(n)&&t.push(n)&&!0;o("chromium-experimental-timestamp-query-inside-passes")||o("timestamp-query"),o("shader-f16"),o("subgroups"),this.device=await r.requestDevice(s),this.adapterInfo=new Qw(r.info||await r.requestAdapterInfo()),this.gpuDataManager=jM(this),this.programManager=new T0(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,sc(e.logLevel,!!e.debug),this.device.onuncapturederror=n=>{n.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${n.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(this.env.webgpu,"adapter",{value:r,writable:!1,enumerable:!0,configurable:!1}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let e=this.getCommandEncoder(),r={};this.queryType==="at-passes"&&(r.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=e.beginComputePass(r)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;Ts(),this.endComputePass();let e;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),e=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(e,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,e,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&e.mapAsync(GPUMapMode.READ).then(()=>{var s;let r=new BigUint64Array(e.getMappedRange()),t=this.pendingQueries.get(e);for(let o=0;o<r.length/2;o++){let n=t[o],i=n.kernelId,a=this.kernels.get(i),l=a.kernelType,u=a.kernelName,p=n.programName,c=n.inputTensorViews,d=n.outputTensorViews,_=r[o*2],f=r[o*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=_);let T=Number(_-this.queryTimeBase),I=Number(f-this.queryTimeBase);if(!Number.isSafeInteger(T)||!Number.isSafeInteger(I))throw new RangeError("incorrect timestamp range");if((s=this.env.webgpu.profiling)!=null&&s.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:c.map(g=>({dims:g.dims,dataType:Bs(g.dataType)})),outputsMetadata:d.map(g=>({dims:g.dims,dataType:Bs(g.dataType)})),kernelId:i,kernelType:l,kernelName:u,programName:p,startTime:T,endTime:I});else{let g="";c.forEach((S,E)=>{g+=`input[${E}]: [${S.dims}] | ${Bs(S.dataType)}, `});let w="";d.forEach((S,E)=>{w+=`output[${E}]: [${S.dims}] | ${Bs(S.dataType)}, `}),console.log(`[profiling] kernel "${i}|${l}|${u}|${p}" ${g}${w}execution time: ${I-T} ns`)}Xo("GPU",`${p}::${_}::${f}`)}e.unmap(),this.pendingQueries.delete(e)}),us()}run(e,r,t,s,o,n){Ts(e.name);let i=[];for(let w=0;w<r.length;++w){let S=r[w].data;if(S===0)continue;let E=this.gpuDataManager.get(S);if(!E)throw new Error(`no GPU data for input: ${S}`);i.push(E)}let{outputs:a,dispatchGroup:l,programUniforms:u}=e.getRunData(r),p=t.length===0?a.map((w,S)=>S):t;if(p.length!==a.length)throw new Error(`Output size ${p.length} must be equal to ${a.length}.`);let c=[],d=[];for(let w=0;w<a.length;++w){if(!Number.isInteger(p[w])||p[w]<-3||p[w]>=n)throw new Error(`Invalid output index: ${p[w]}`);if(p[w]===-3)continue;let S=p[w]===-1,E=p[w]===-2,v=S||E?o(a[w].dataType,a[w].dims):s(p[w],a[w].dataType,a[w].dims);if(c.push(v),v.data===0)continue;let M=this.gpuDataManager.get(v.data);if(!M)throw new Error(`no GPU data for output: ${v.data}`);if(S&&this.temporaryData.push(M),E){let y=this.kernelPersistentData.get(this.currentKernelId);y||(y=[],this.kernelPersistentData.set(this.currentKernelId,y)),y.push(M)}d.push(M)}if(i.length!==r.length||d.length!==c.length){if(d.length===0)return us(e.name),c;throw new Error(`Program ${e.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`)}let _;if(u){let w=0,S=[];u.forEach(y=>{let C=typeof y.data=="number"?[y.data]:y.data;if(C.length===0)return;let F=y.type===10?2:4,z,K;y.type===10?(K=C.length>4?16:C.length>2?8:C.length*F,z=C.length>4?16:F*C.length):(K=C.length<=2?C.length*F:16,z=16),w=Math.ceil(w/K)*K,S.push(w);let q=y.type===10?8:4;w+=C.length>4?Math.ceil(C.length/q)*z:C.length*F});let E=16;w=Math.ceil(w/E)*E;let v=new ArrayBuffer(w);u.forEach((y,C)=>{let F=S[C],z=typeof y.data=="number"?[y.data]:y.data;if(y.type===6)new Int32Array(v,F,z.length).set(z);else if(y.type===12)new Uint32Array(v,F,z.length).set(z);else if(y.type===10)new Uint16Array(v,F,z.length).set(z);else if(y.type===1)new Float32Array(v,F,z.length).set(z);else throw new Error(`Unsupported uniform type: ${Bs(y.type)}`)});let M=this.gpuDataManager.create(w,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(M.buffer,0,v,0,w),this.gpuDataManager.release(M.id),_={offset:0,size:w,buffer:M.buffer}}let f=this.programManager.normalizeDispatchGroupSize(l),T=f[1]===1&&f[2]===1,I=qw(e,r,T),g=this.programManager.getArtifact(I);if(g||(g=this.programManager.build(e,f),this.programManager.setArtifact(I,g),kt("info",()=>`[artifact] key: ${I}, programName: ${e.name}`)),u&&g.uniformVariablesInfo){if(u.length!==g.uniformVariablesInfo.length)throw new Error(`Uniform variables count mismatch: expect ${g.uniformVariablesInfo.length}, got ${u.length} in program "${g.programInfo.name}".`);for(let w=0;w<u.length;w++){let S=u[w],E=S.type,v=typeof S.data=="number"?1:S.data.length,[M,y]=g.uniformVariablesInfo[w];if(E!==M||v!==y)throw new Error(`Uniform variable ${w} mismatch: expect type ${M} with size ${y}, got type ${E} with size ${v} in program "${g.programInfo.name}".`)}}if(kt("info",()=>`[ProgramManager] run "${e.name}" (key=${I}) with ${f[0]}x${f[1]}x${f[2]}`),this.queryType!=="none"||this.sessionStatus==="capturing"){let w={kernelId:this.currentKernelId,programName:g.programInfo.name,inputTensorViews:r,outputTensorViews:c};this.pendingKernels.push(w),this.sessionStatus==="capturing"&&this.capturedPendingKernels.get(this.currentSessionId).push(w)}return this.programManager.run(g,i,d,f,_),us(e.name),c}upload(e,r){this.gpuDataManager.upload(e,r)}memcpy(e,r){this.gpuDataManager.memcpy(e,r)}async download(e,r){await this.gpuDataManager.download(e,r)}alloc(e){return this.gpuDataManager.create(e).id}free(e){return this.gpuDataManager.release(e)}createKernel(e,r,t,s){let o=x0.get(e);if(!o)throw new Error(`kernel not implemented: ${e}`);let n={kernelType:e,kernelName:s,kernelEntry:o[0],attributes:[o[1],t]};this.kernels.set(r,n)}releaseKernel(e){let r=this.kernelPersistentData.get(e);if(r){for(let t of r)this.gpuDataManager.release(t.id);this.kernelPersistentData.delete(e)}this.kernelCustomData.delete(e),this.kernels.delete(e)}computeKernel(e,r,t){let s=this.kernels.get(e);if(!s)throw new Error(`kernel not created: ${e}`);let o=s.kernelType,n=s.kernelName,i=s.kernelEntry,a=s.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${o}] ${n}" is not allowed to be called recursively`);this.currentKernelId=e,a[0]&&(a[1]=a[0](a[1]),a[0]=void 0),kt("info",()=>`[WebGPU] Start to run kernel "[${o}] ${n}"...`);let l=this.env.debug;this.temporaryData=[];try{return l&&this.device.pushErrorScope("validation"),i(r,a[1]),0}catch(u){return t.push(Promise.resolve(`[WebGPU] Kernel "[${o}] ${n}" failed. ${u}`)),1}finally{l&&t.push(this.device.popErrorScope().then(u=>u?`GPU validation error for kernel "[${o}] ${n}": ${u.message}`:null));for(let u of this.temporaryData)this.gpuDataManager.release(u.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(e,r,t,s){let o=this.sessionExternalDataMapping.get(e);o||(o=new Map,this.sessionExternalDataMapping.set(e,o));let n=o.get(r),i=this.gpuDataManager.registerExternalBuffer(t,s,n);return o.set(r,[i,t]),i}unregisterBuffers(e){let r=this.sessionExternalDataMapping.get(e);r&&(r.forEach(t=>this.gpuDataManager.unregisterExternalBuffer(t[0])),this.sessionExternalDataMapping.delete(e))}getBuffer(e){let r=this.gpuDataManager.get(e);if(!r)throw new Error(`no GPU data for buffer: ${e}`);return r.buffer}createDownloader(e,r,t){return async()=>{let s=await Fu(this,e,r);return nc(s.buffer,t)}}writeTimestamp(e){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,e)}setQueryType(){var e;this.queryType="none",(((e=this.env.webgpu.profiling)==null?void 0:e.mode)==="default"||(typeof this.env.trace>"u"?this.env.wasm.trace:this.env.trace))&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){kt("info","captureBegin"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus="capturing"}captureEnd(){kt("info","captureEnd"),this.flush(),this.sessionStatus="default"}replay(){kt("info","replay"),this.sessionStatus="replaying";let e=this.capturedCommandList.get(this.currentSessionId),r=this.capturedPendingKernels.get(this.currentSessionId),t=e.length;this.pendingKernels=[];for(let s=0;s<t;s++){let o=this.getComputePassEncoder(),n=e[s];this.writeTimestamp(this.pendingDispatchNumber*2),o.setPipeline(n.computePipeline),o.setBindGroup(0,n.bindGroup),o.dispatchWorkgroups(...n.dispatchGroup),this.writeTimestamp(this.pendingDispatchNumber*2+1),this.pendingDispatchNumber++,this.queryType!=="none"&&this.pendingKernels.push(r[s]),(this.pendingDispatchNumber>=this.maxDispatchNumber||this.queryType==="at-passes")&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus="default"}onCreateSession(){this.gpuDataManager.onCreateSession()}onReleaseSession(e){this.unregisterBuffers(e),this.capturedCommandList.has(e)&&this.capturedCommandList.delete(e),this.capturedPendingKernels.has(e)&&this.capturedPendingKernels.delete(e),this.gpuDataManager.onReleaseSession(e)}onRunStart(e){this.currentSessionId=e,this.setQueryType()}}}),C0={};ro(C0,{init:()=>S0});var ta,Xw,S0,Vx=je(()=>{ft(),Rs(),xt(),Xv(),ta=class $0{constructor(r,t,s,o){this.module=r,this.dataType=t,this.data=s,this.dims=o}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let r=be.size(this.dims);return r===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,r)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let r=be.size(this.dims);return r===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,r)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let r=be.size(this.dims);return r===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,r)}getUint16Array(){if(this.dataType!==10&&this.dataType!==4)throw new Error("Invalid data type");let r=be.size(this.dims);return r===0?new Uint16Array:new Uint16Array(this.module.HEAP8.buffer,this.data,r)}reshape(r){if(be.size(r)!==be.size(this.dims))throw new Error("Invalid new shape");return new $0(this.module,this.dataType,this.data,r)}},Xw=class{constructor(e,r,t){this.module=e,this.backend=r,this.customDataOffset=0,this.customDataSize=0,this.adapterInfo=r.adapterInfo;let s=e.PTR_SIZE,o=t/e.PTR_SIZE,n=s===4?"i32":"i64";this.opKernelContext=Number(e.getValue(s*o++,n));let i=Number(e.getValue(s*o++,n));this.outputCount=Number(e.getValue(s*o++,n)),this.customDataOffset=Number(e.getValue(s*o++,"*")),this.customDataSize=Number(e.getValue(s*o++,n));let a=[];for(let l=0;l<i;l++){let u=Number(e.getValue(s*o++,n)),p=Number(e.getValue(s*o++,"*")),c=Number(e.getValue(s*o++,n)),d=[];for(let _=0;_<c;_++)d.push(Number(e.getValue(s*o++,n)));a.push(new ta(e,u,p,d))}this.inputs=a}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(e,r){var i;let t=((i=r==null?void 0:r.inputs)==null?void 0:i.map(a=>typeof a=="number"?this.inputs[a]:a))??this.inputs,s=(r==null?void 0:r.outputs)??[],o=(a,l,u)=>new ta(this.module,l,this.output(a,u),u),n=(a,l)=>{let u=Sn(a,l);if(!u)throw new Error(`Unsupported data type: ${a}`);let p=u>0?this.backend.gpuDataManager.create(u).id:0;return new ta(this.module,a,p,l)};return this.backend.run(e,t,s,o,n,this.outputCount)}output(e,r){let t=this.module.stackSave();try{let s=this.module.PTR_SIZE,o=s===4?"i32":"i64",n=this.module.stackAlloc((1+r.length)*s);this.module.setValue(n,r.length,o);for(let i=0;i<r.length;i++)this.module.setValue(n+s*(i+1),r[i],o);return this.module._JsepOutput(this.opKernelContext,e,n)}catch(s){throw new Error(`Failed to generate kernel's output[${e}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${s}`)}finally{this.module.stackRestore(t)}}},S0=async(e,r,t,s)=>{let o=r.jsepInit;if(!o)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");if(e==="webgpu"){let n=(Nx(),Qo(E0)).WebGpuBackend,i=new n;await i.initialize(t,s),o("webgpu",[i,a=>i.alloc(Number(a)),a=>i.free(a),(a,l,u,p=!1)=>{if(p)kt("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${Number(a)}, dst=${Number(l)}, size=${Number(u)}`),i.memcpy(Number(a),Number(l));else{kt("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${Number(a)}, gpuDataId=${Number(l)}, size=${Number(u)}`);let c=r.HEAPU8.subarray(Number(a>>>0),Number(a>>>0)+Number(u));i.upload(Number(l),c)}},async(a,l,u)=>{kt("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${a}, dataOffset=${l}, size=${u}`),await i.download(Number(a),()=>r.HEAPU8.subarray(Number(l)>>>0,Number(l+u)>>>0))},(a,l,u)=>i.createKernel(a,Number(l),u,r.UTF8ToString(r._JsepGetNodeName(Number(l)))),a=>i.releaseKernel(a),(a,l,u,p)=>{kt("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${u}, kernel=${a}, contextDataOffset=${l}`);let c=new Xw(r,i,Number(l));return i.computeKernel(Number(a),c,p)},()=>i.captureBegin(),()=>i.captureEnd(),()=>i.replay()])}else{let n=new RM(t);o("webnn",[n,()=>n.reserveTensorId(),i=>n.releaseTensorId(i),async(i,a,l,u,p)=>n.ensureTensor(i,a,l,u,p),(i,a)=>{n.uploadTensor(i,a)},async(i,a)=>n.downloadTensor(i,a)])}}}),Jw,fc,_c,Xs,Yw,Tu,ma,gc,wc,Eu,Mc,bc,yc,I0=je(()=>{Hv(),qv(),ft(),Fn(),Yu(),FM(),Jw=(e,r)=>{Qt()._OrtInit(e,r)!==0&&Gt("Can't initialize onnxruntime.")},fc=async e=>{Jw(e.wasm.numThreads,ua(e.logLevel))},_c=async(e,r)=>{var t,s;(s=(t=Qt()).asyncInit)==null||s.call(t);{let o=(Vx(),Qo(C0)).init;if(r==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let n=e.webgpu.adapter;if(n){if(typeof n.limits!="object"||typeof n.features!="object"||typeof n.requestDevice!="function")throw new Error("Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.")}else{let i=e.webgpu.powerPreference;if(i!==void 0&&i!=="low-power"&&i!=="high-performance")throw new Error(`Invalid powerPreference setting: "${i}"`);let a=e.webgpu.forceFallbackAdapter;if(a!==void 0&&typeof a!="boolean")throw new Error(`Invalid forceFallbackAdapter setting: "${a}"`);if(n=await navigator.gpu.requestAdapter({powerPreference:i,forceFallbackAdapter:a}),!n)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.')}await o("webgpu",Qt(),e,n)}if(r==="webnn"){if(typeof navigator>"u"||!navigator.ml)throw new Error("WebNN is not supported in current environment");await o("webnn",Qt(),e)}}},Xs=new Map,Yw=e=>{let r=Qt(),t=r.stackSave();try{let s=r.PTR_SIZE,o=r.stackAlloc(2*s);r._OrtGetInputOutputCount(e,o,o+s)!==0&&Gt("Can't get session input/output count.");let n=s===4?"i32":"i64";return[Number(r.getValue(o,n)),Number(r.getValue(o+s,n))]}finally{r.stackRestore(t)}},Tu=(e,r)=>{let t=Qt(),s=t.stackSave(),o=0;try{let n=t.PTR_SIZE,i=t.stackAlloc(2*n);t._OrtGetInputOutputMetadata(e,r,i,i+n)!==0&&Gt("Can't get session input/output metadata.");let a=Number(t.getValue(i,"*"));o=Number(t.getValue(i+n,"*"));let l=t.HEAP32[o/4];if(l===0)return[a,0];let u=t.HEAPU32[o/4+1],p=[];for(let c=0;c<u;c++){let d=Number(t.getValue(o+8+c*n,"*"));p.push(d!==0?t.UTF8ToString(d):Number(t.getValue(o+8+(c+u)*n,"*")))}return[a,l,p]}finally{t.stackRestore(s),o!==0&&t._OrtFree(o)}},ma=e=>{let r=Qt(),t=r._malloc(e.byteLength);if(t===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return r.HEAPU8.set(e,t),[t,e.byteLength]},gc=async(e,r)=>{var c,d,_,f;let t,s,o=Qt();Array.isArray(e)?[t,s]=e:e.buffer===o.HEAPU8.buffer?[t,s]=[e.byteOffset,e.byteLength]:[t,s]=ma(e);let n=0,i=0,a=0,l=[],u=[],p=[];try{if([i,l]=await AM(r),(r==null?void 0:r.externalData)&&o.mountExternalData){let C=[];for(let F of r.externalData){let z=typeof F=="string"?F:F.path;C.push(rc(typeof F=="string"?F:F.data).then(K=>{o.mountExternalData(z,K)}))}await Promise.all(C)}for(let C of(r==null?void 0:r.executionProviders)??[])if((typeof C=="string"?C:C.name)==="webnn"){if(o.shouldTransferToMLTensor=!1,typeof C!="string"){let F=C,z=F==null?void 0:F.context,K=F==null?void 0:F.gpuDevice,q=F==null?void 0:F.deviceType,R=F==null?void 0:F.powerPreference;z?o.currentContext=z:K?o.currentContext=await o.webnnCreateMLContext(K):o.currentContext=await o.webnnCreateMLContext({deviceType:q,powerPreference:R})}else o.currentContext=await o.webnnCreateMLContext();break}n=await o._OrtCreateSession(t,s,i),(c=o.webgpuOnCreateSession)==null||c.call(o,n),n===0&&Gt("Can't create a session."),(d=o.jsepOnCreateSession)==null||d.call(o),o.currentContext&&(o.webnnRegisterMLContext(n,o.currentContext),o.currentContext=void 0,o.shouldTransferToMLTensor=!0);let[T,I]=Yw(n),g=!!(r!=null&&r.enableGraphCapture),w=[],S=[],E=[],v=[],M=[];for(let C=0;C<T;C++){let[F,z,K]=Tu(n,C);F===0&&Gt("Can't get an input name."),u.push(F);let q=o.UTF8ToString(F);w.push(q),E.push(z===0?{name:q,isTensor:!1}:{name:q,isTensor:!0,type:Bs(z),shape:K})}for(let C=0;C<I;C++){let[F,z,K]=Tu(n,C+T);F===0&&Gt("Can't get an output name."),p.push(F);let q=o.UTF8ToString(F);S.push(q),v.push(z===0?{name:q,isTensor:!1}:{name:q,isTensor:!0,type:Bs(z),shape:K});{if(g&&(r==null?void 0:r.preferredOutputLocation)===void 0){M.push("gpu-buffer");continue}let R=typeof(r==null?void 0:r.preferredOutputLocation)=="string"?r.preferredOutputLocation:((_=r==null?void 0:r.preferredOutputLocation)==null?void 0:_[q])??"cpu";if(R!=="cpu"&&R!=="cpu-pinned"&&R!=="gpu-buffer"&&R!=="ml-tensor")throw new Error(`Not supported preferred output location: ${R}.`);if(g&&R!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${R}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);M.push(R)}}let y=null;return M.some(C=>C==="gpu-buffer"||C==="ml-tensor")&&(a=o._OrtCreateBinding(n),a===0&&Gt("Can't create IO binding."),y={handle:a,outputPreferredLocations:M,outputPreferredLocationsEncoded:M.map(C=>ku(C))}),Xs.set(n,[n,u,p,y,g,!1]),[n,w,S,E,v]}catch(T){throw u.forEach(I=>o._OrtFree(I)),p.forEach(I=>o._OrtFree(I)),a!==0&&o._OrtReleaseBinding(a)!==0&&Gt("Can't release IO binding."),n!==0&&o._OrtReleaseSession(n)!==0&&Gt("Can't release session."),T}finally{o._free(t),i!==0&&o._OrtReleaseSessionOptions(i)!==0&&Gt("Can't release session options."),l.forEach(T=>o._free(T)),(f=o.unmountExternalData)==null||f.call(o)}},wc=e=>{var l,u,p;let r=Qt(),t=Xs.get(e);if(!t)throw new Error(`cannot release session. invalid session id: ${e}`);let[s,o,n,i,a]=t;i&&(a&&r._OrtClearBoundOutputs(i.handle)!==0&&Gt("Can't clear bound outputs."),r._OrtReleaseBinding(i.handle)!==0&&Gt("Can't release IO binding.")),(l=r.jsepOnReleaseSession)==null||l.call(r,e),(u=r.webnnOnReleaseSession)==null||u.call(r,e),(p=r.webgpuOnReleaseSession)==null||p.call(r,e),o.forEach(c=>r._OrtFree(c)),n.forEach(c=>r._OrtFree(c)),r._OrtReleaseSession(s)!==0&&Gt("Can't release session."),Xs.delete(e)},Eu=async(e,r,t,s,o,n,i=!1)=>{if(!e){r.push(0);return}let a=Qt(),l=a.PTR_SIZE,u=e[0],p=e[1],c=e[3],d=c,_,f;if(u==="string"&&(c==="gpu-buffer"||c==="ml-tensor"))throw new Error("String tensor is not supported on GPU.");if(i&&c!=="gpu-buffer")throw new Error(`External buffer must be provided for input/output index ${n} when enableGraphCapture is true.`);if(c==="gpu-buffer"){let g=e[2].gpuBuffer;f=Sn(Jn(u),p);{let w=a.jsepRegisterBuffer;if(!w)throw new Error('Tensor location "gpu-buffer" is not supported without using WebGPU.');_=w(s,n,g,f)}}else if(c==="ml-tensor"){let g=e[2].mlTensor;f=Sn(Jn(u),p);let w=a.webnnRegisterMLTensor;if(!w)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');_=w(s,g,Jn(u),p)}else{let g=e[2];if(Array.isArray(g)){f=l*g.length,_=a._malloc(f),t.push(_);for(let w=0;w<g.length;w++){if(typeof g[w]!="string")throw new TypeError(`tensor data at index ${w} is not a string`);a.setValue(_+w*l,ys(g[w],t),"*")}}else{let w=a.webnnIsGraphInput;if(u!=="string"&&w){let S=a.UTF8ToString(o);if(w(s,S)){let E=Jn(u);f=Sn(E,p),d="ml-tensor";let v=a.webnnCreateTemporaryTensor,M=a.webnnUploadTensor;if(!v||!M)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');let y=await v(s,E,p);M(y,new Uint8Array(g.buffer,g.byteOffset,g.byteLength)),_=y}else f=g.byteLength,_=a._malloc(f),t.push(_),a.HEAPU8.set(new Uint8Array(g.buffer,g.byteOffset,f),_)}else f=g.byteLength,_=a._malloc(f),t.push(_),a.HEAPU8.set(new Uint8Array(g.buffer,g.byteOffset,f),_)}}let T=a.stackSave(),I=a.stackAlloc(4*p.length);try{p.forEach((w,S)=>a.setValue(I+S*l,w,l===4?"i32":"i64"));let g=a._OrtCreateTensor(Jn(u),_,f,I,p.length,ku(d));g===0&&Gt(`Can't create tensor for input/output. session=${s}, index=${n}.`),r.push(g)}finally{a.stackRestore(T)}},Mc=async(e,r,t,s,o,n)=>{var K,q,R,Z;let i=Qt(),a=i.PTR_SIZE,l=Xs.get(e);if(!l)throw new Error(`cannot run inference. invalid session id: ${e}`);let u=l[0],p=l[1],c=l[2],d=l[3],_=l[4],f=l[5],T=r.length,I=s.length,g=0,w=[],S=[],E=[],v=[],M=i.stackSave(),y=i.stackAlloc(T*a),C=i.stackAlloc(T*a),F=i.stackAlloc(I*a),z=i.stackAlloc(I*a);try{[g,w]=kM(n);for(let Q=0;Q<T;Q++)await Eu(t[Q],S,v,e,p[r[Q]],r[Q],_);for(let Q=0;Q<I;Q++)await Eu(o[Q],E,v,e,c[s[Q]],T+s[Q],_);for(let Q=0;Q<T;Q++)i.setValue(y+Q*a,S[Q],"*"),i.setValue(C+Q*a,p[r[Q]],"*");for(let Q=0;Q<I;Q++)i.setValue(F+Q*a,E[Q],"*"),i.setValue(z+Q*a,c[s[Q]],"*");if(d&&!f){let{handle:Q,outputPreferredLocations:se,outputPreferredLocationsEncoded:fe}=d;if(p.length!==T)throw new Error(`input count from feeds (${T}) is expected to be always equal to model's input count (${p.length}).`);for(let ae=0;ae<T;ae++){let V=r[ae];await i._OrtBindInput(Q,p[V],S[ae])!==0&&Gt(`Can't bind input[${ae}] for session=${e}.`)}for(let ae=0;ae<I;ae++){let V=s[ae];(K=o[ae])!=null&&K[3]?i._OrtBindOutput(Q,c[V],E[ae],0)!==0&&Gt(`Can't bind pre-allocated output[${ae}] for session=${e}.`):i._OrtBindOutput(Q,c[V],0,fe[V])!==0&&Gt(`Can't bind output[${ae}] to ${se[ae]} for session=${e}.`)}Xs.set(e,[u,p,c,d,_,!0])}(q=i.jsepOnRunStart)==null||q.call(i,u),(R=i.webnnOnRunStart)==null||R.call(i,u);let H;d?H=await i._OrtRunWithBinding(u,d.handle,I,F,g):H=await i._OrtRun(u,C,y,T,z,I,F,g),H!==0&&Gt("failed to call OrtRun().");let J=[];for(let Q=0;Q<I;Q++){let se=Number(i.getValue(F+Q*a,"*"));if(se===E[Q]){J.push(o[Q]);continue}let fe=i.stackSave(),ae=i.stackAlloc(4*a),V=!1,A,U=0;try{i._OrtGetTensorData(se,ae,ae+a,ae+2*a,ae+3*a)!==0&&Gt(`Can't access output tensor data on index ${Q}.`);let ee=a===4?"i32":"i64",_e=Number(i.getValue(ae,ee));U=i.getValue(ae+a,"*");let le=i.getValue(ae+a*2,"*"),ye=Number(i.getValue(ae+a*3,ee)),ze=[];for(let W=0;W<ye;W++)ze.push(Number(i.getValue(le+W*a,ee)));i._OrtFree(le)!==0&&Gt("Can't free memory for tensor dims.");let Ue=ze.reduce((W,re)=>W*re,1);A=Bs(_e);let pe=d==null?void 0:d.outputPreferredLocations[s[Q]];if(A==="string"){if(pe==="gpu-buffer"||pe==="ml-tensor")throw new Error("String tensor is not supported on GPU.");let W=[];for(let re=0;re<Ue;re++){let G=i.getValue(U+re*a,"*"),Me=i.getValue(U+(re+1)*a,"*"),we=re===Ue-1?void 0:Me-G;W.push(i.UTF8ToString(G,we))}J.push([A,ze,W,"cpu"])}else if(pe==="gpu-buffer"&&Ue>0){let W=i.jsepGetBuffer;if(!W)throw new Error('preferredLocation "gpu-buffer" is not supported without using WebGPU.');let re=W(U),G=Sn(_e,Ue);if(G===void 0||!ec(A))throw new Error(`Unsupported data type: ${A}`);V=!0,J.push([A,ze,{gpuBuffer:re,download:i.jsepCreateDownloader(re,G,A),dispose:()=>{i._OrtReleaseTensor(se)!==0&&Gt("Can't release tensor.")}},"gpu-buffer"])}else if(pe==="ml-tensor"&&Ue>0){let W=i.webnnEnsureTensor,re=i.webnnIsInt64Supported;if(!W||!re)throw new Error('preferredLocation "ml-tensor" is not supported without using WebNN.');if(Sn(_e,Ue)===void 0||!tc(A))throw new Error(`Unsupported data type: ${A}`);if(A==="int64"&&!re(e))throw new Error('preferredLocation "ml-tensor" for int64 output is not supported by current WebNN Context.');let G=await W(e,U,_e,ze,!1);V=!0,J.push([A,ze,{mlTensor:G,download:i.webnnCreateMLTensorDownloader(U,A),dispose:()=>{i.webnnReleaseTensorId(U),i._OrtReleaseTensor(se)}},"ml-tensor"])}else{let W=Zu(A),re=new W(Ue);new Uint8Array(re.buffer,re.byteOffset,re.byteLength).set(i.HEAPU8.subarray(U,U+re.byteLength)),J.push([A,ze,re,"cpu"])}}finally{i.stackRestore(fe),A==="string"&&U&&i._free(U),V||i._OrtReleaseTensor(se),(Z=i.webnnOnRunEnd)==null||Z.call(i,u)}}return d&&!_&&(i._OrtClearBoundOutputs(d.handle)!==0&&Gt("Can't clear bound outputs."),Xs.set(e,[u,p,c,d,_,!1])),J}finally{i.stackRestore(M),S.forEach(H=>i._OrtReleaseTensor(H)),E.forEach(H=>i._OrtReleaseTensor(H)),v.forEach(H=>i._free(H)),g!==0&&i._OrtReleaseRunOptions(g),w.forEach(H=>i._free(H))}},bc=e=>{let r=Qt(),t=Xs.get(e);if(!t)throw new Error("invalid session id");let s=t[0],o=r._OrtEndProfiling(s);o===0&&Gt("Can't get an profile file name."),r._OrtFree(o)},yc=e=>{let r=[];for(let t of e){let s=t[2];!Array.isArray(s)&&"buffer"in s&&r.push(s.buffer)}return r}}),Js,Wr,Qn,Vo,Uo,ra,Pu,sa,Tn,En,Zw,k0,A0,F0,O0,D0,L0,z0,B0=je(()=>{Es(),I0(),Fn(),Xu(),Js=()=>!!Yt.wasm.proxy&&typeof document<"u",Qn=!1,Vo=!1,Uo=!1,sa=new Map,Tn=(e,r)=>{let t=sa.get(e);t?t.push(r):sa.set(e,[r])},En=()=>{if(Qn||!Vo||Uo||!Wr)throw new Error("worker not ready")},Zw=e=>{switch(e.data.type){case"init-wasm":Qn=!1,e.data.err?(Uo=!0,Pu[1](e.data.err)):(Vo=!0,Pu[0]()),ra&&(URL.revokeObjectURL(ra),ra=void 0);break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let r=sa.get(e.data.type);e.data.err?r.shift()[1](e.data.err):r.shift()[0](e.data.out);break}}},k0=async()=>{if(!Vo){if(Qn)throw new Error("multiple calls to 'initWasm()' detected.");if(Uo)throw new Error("previous call to 'initWasm()' failed.");if(Qn=!0,Js())return new Promise((e,r)=>{Wr==null||Wr.terminate(),$M().then(([t,s])=>{try{Wr=s,Wr.onerror=n=>r(n),Wr.onmessage=Zw,Pu=[e,r];let o={type:"init-wasm",in:Yt};!o.in.wasm.wasmPaths&&(t||Iu)&&(o.in.wasm.wasmPaths={wasm:new URL(""+new URL("ort-wasm-simd-threaded.jsep-B0T3yYHD.wasm",import.meta.url).href,import.meta.url).href}),Wr.postMessage(o),ra=t}catch(o){r(o)}},r)});try{await Ju(Yt.wasm),await fc(Yt),Vo=!0}catch(e){throw Uo=!0,e}finally{Qn=!1}}},A0=async e=>{if(Js())return En(),new Promise((r,t)=>{Tn("init-ep",[r,t]);let s={type:"init-ep",in:{epName:e,env:Yt}};Wr.postMessage(s)});await _c(Yt,e)},F0=async e=>Js()?(En(),new Promise((r,t)=>{Tn("copy-from",[r,t]);let s={type:"copy-from",in:{buffer:e}};Wr.postMessage(s,[e.buffer])})):ma(e),O0=async(e,r)=>{if(Js()){if(r!=null&&r.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return En(),new Promise((t,s)=>{Tn("create",[t,s]);let o={type:"create",in:{model:e,options:{...r}}},n=[];e instanceof Uint8Array&&n.push(e.buffer),Wr.postMessage(o,n)})}else return gc(e,r)},D0=async e=>{if(Js())return En(),new Promise((r,t)=>{Tn("release",[r,t]);let s={type:"release",in:e};Wr.postMessage(s)});wc(e)},L0=async(e,r,t,s,o,n)=>{if(Js()){if(t.some(i=>i[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(o.some(i=>i))throw new Error("pre-allocated output tensor is not supported for proxy.");return En(),new Promise((i,a)=>{Tn("run",[i,a]);let l=t,u={type:"run",in:{sessionId:e,inputIndices:r,inputs:l,outputIndices:s,options:n}};Wr.postMessage(u,yc(l))})}else return Mc(e,r,t,s,o,n)},z0=async e=>{if(Js())return En(),new Promise((r,t)=>{Tn("end-profiling",[r,t]);let s={type:"end-profiling",in:e};Wr.postMessage(s)});bc(e)}}),Cu,eM,R0,Ux=je(()=>{Es(),B0(),ft(),Qu(),FM(),Cu=(e,r)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];case"ml-tensor":return[e.type,e.dims,{mlTensor:e.mlTensor},"ml-tensor"];default:throw new Error(`invalid data location: ${e.location} for ${r()}`)}},eM=e=>{switch(e[3]){case"cpu":return new vs(e[0],e[2],e[1]);case"gpu-buffer":{let r=e[0];if(!ec(r))throw new Error(`not supported data type: ${r} for deserializing GPU tensor`);let{gpuBuffer:t,download:s,dispose:o}=e[2];return vs.fromGpuBuffer(t,{dataType:r,dims:e[1],download:s,dispose:o})}case"ml-tensor":{let r=e[0];if(!tc(r))throw new Error(`not supported data type: ${r} for deserializing MLTensor tensor`);let{mlTensor:t,download:s,dispose:o}=e[2];return vs.fromMLTensor(t,{dataType:r,dims:e[1],download:s,dispose:o})}default:throw new Error(`invalid data location: ${e[3]}`)}},R0=class{async fetchModelAndCopyToWasmMemory(e){return F0(await rc(e))}async loadModel(e,r){Ts();let t;typeof e=="string"?t=await this.fetchModelAndCopyToWasmMemory(e):t=e,[this.sessionId,this.inputNames,this.outputNames,this.inputMetadata,this.outputMetadata]=await O0(t,r),us()}async dispose(){return D0(this.sessionId)}async run(e,r,t){Ts();let s=[],o=[];Object.entries(e).forEach(c=>{let d=c[0],_=c[1],f=this.inputNames.indexOf(d);if(f===-1)throw new Error(`invalid input '${d}'`);s.push(_),o.push(f)});let n=[],i=[];Object.entries(r).forEach(c=>{let d=c[0],_=c[1],f=this.outputNames.indexOf(d);if(f===-1)throw new Error(`invalid output '${d}'`);n.push(_),i.push(f)});let a=s.map((c,d)=>Cu(c,()=>`input "${this.inputNames[o[d]]}"`)),l=n.map((c,d)=>c?Cu(c,()=>`output "${this.outputNames[i[d]]}"`):null),u=await L0(this.sessionId,o,a,i,l,t),p={};for(let c=0;c<u.length;c++)p[this.outputNames[i[c]]]=n[c]??eM(u[c]);return us(),p}startProfiling(){}endProfiling(){z0(this.sessionId)}}}),j0={};ro(j0,{OnnxruntimeWebAssemblyBackend:()=>Gu,initializeFlags:()=>Wu,wasmBackend:()=>N0});var Wu,Gu,N0,Wx=je(()=>{Es(),B0(),Ux(),Wu=()=>{(typeof Yt.wasm.initTimeout!="number"||Yt.wasm.initTimeout<0)&&(Yt.wasm.initTimeout=0);let e=Yt.wasm.simd;if(typeof e!="boolean"&&e!==void 0&&e!=="fixed"&&e!=="relaxed"&&(console.warn(`Property "env.wasm.simd" is set to unknown value "${e}". Reset it to \`false\` and ignore SIMD feature checking.`),Yt.wasm.simd=!1),typeof Yt.wasm.proxy!="boolean"&&(Yt.wasm.proxy=!1),typeof Yt.wasm.trace!="boolean"&&(Yt.wasm.trace=!1),typeof Yt.wasm.numThreads!="number"||!Number.isInteger(Yt.wasm.numThreads)||Yt.wasm.numThreads<=0)if(typeof self<"u"&&!self.crossOriginIsolated)Yt.wasm.numThreads=1;else{let r=typeof navigator>"u"?Iv("node:os").cpus().length:navigator.hardwareConcurrency;Yt.wasm.numThreads=Math.min(4,Math.ceil((r||1)/2))}},Gu=class{async init(e){Wu(),await k0(),await A0(e)}async createInferenceSessionHandler(e,r){let t=new R0;return await t.loadModel(e,r),t}},N0=new Gu});Es();Es();Es();var Gx="1.22.0-dev.20250409-89f8206ba4",Kx=xM;{let e=(Wx(),Qo(j0)).wasmBackend;$n("webgpu",e,5),$n("webnn",e,5),$n("cpu",e,10),$n("wasm",e,10)}Object.defineProperty(Yt.versions,"web",{value:Gx,enumerable:!0});/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*//**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const Hx=Object.freeze(Object.defineProperty({__proto__:null,get InferenceSession(){return qu},get TRACE(){return Xo},get TRACE_FUNC_BEGIN(){return Ts},get TRACE_FUNC_END(){return us},get Tensor(){return vs},default:Kx,get env(){return Yt},get registerBackend(){return $n}},Symbol.toStringTag,{value:"Module"}));var zs={},qx={"onnxruntime-common":e=>{e.exports=Pv},"onnxruntime-web":e=>{e.exports=Hx},"?2ce3":()=>{},"?7a2c":()=>{},"?a42a":()=>{},"?2b25":()=>{},"?569f":()=>{},"?3f59":()=>{},"?154a":()=>{},"./node_modules/@huggingface/jinja/dist/index.js":(e,r,t)=>{t.r(r),t.d(r,{Environment:()=>Be,Interpreter:()=>He,Template:()=>Yr,parse:()=>U,tokenize:()=>c});var s=Object.freeze({Text:"Text",NumericLiteral:"NumericLiteral",BooleanLiteral:"BooleanLiteral",NullLiteral:"NullLiteral",StringLiteral:"StringLiteral",Identifier:"Identifier",Equals:"Equals",OpenParen:"OpenParen",CloseParen:"CloseParen",OpenStatement:"OpenStatement",CloseStatement:"CloseStatement",OpenExpression:"OpenExpression",CloseExpression:"CloseExpression",OpenSquareBracket:"OpenSquareBracket",CloseSquareBracket:"CloseSquareBracket",OpenCurlyBracket:"OpenCurlyBracket",CloseCurlyBracket:"CloseCurlyBracket",Comma:"Comma",Dot:"Dot",Colon:"Colon",Pipe:"Pipe",CallOperator:"CallOperator",AdditiveBinaryOperator:"AdditiveBinaryOperator",MultiplicativeBinaryOperator:"MultiplicativeBinaryOperator",ComparisonBinaryOperator:"ComparisonBinaryOperator",UnaryOperator:"UnaryOperator",Set:"Set",If:"If",For:"For",In:"In",Is:"Is",NotIn:"NotIn",Else:"Else",EndSet:"EndSet",EndIf:"EndIf",ElseIf:"ElseIf",EndFor:"EndFor",And:"And",Or:"Or",Not:"UnaryOperator",Macro:"Macro",EndMacro:"EndMacro",Break:"Break",Continue:"Continue"}),o=Object.freeze({set:s.Set,for:s.For,in:s.In,is:s.Is,if:s.If,else:s.Else,endset:s.EndSet,endif:s.EndIf,elif:s.ElseIf,endfor:s.EndFor,and:s.And,or:s.Or,not:s.Not,"not in":s.NotIn,macro:s.Macro,endmacro:s.EndMacro,break:s.Break,continue:s.Continue,true:s.BooleanLiteral,false:s.BooleanLiteral,none:s.NullLiteral,True:s.BooleanLiteral,False:s.BooleanLiteral,None:s.NullLiteral}),n=class{constructor(D,oe){this.value=D,this.type=oe}};function i(D){return/\w/.test(D)}function a(D){return/[0-9]/.test(D)}var l=[["{%",s.OpenStatement],["%}",s.CloseStatement],["{{",s.OpenExpression],["}}",s.CloseExpression],["(",s.OpenParen],[")",s.CloseParen],["{",s.OpenCurlyBracket],["}",s.CloseCurlyBracket],["[",s.OpenSquareBracket],["]",s.CloseSquareBracket],[",",s.Comma],[".",s.Dot],[":",s.Colon],["|",s.Pipe],["<=",s.ComparisonBinaryOperator],[">=",s.ComparisonBinaryOperator],["==",s.ComparisonBinaryOperator],["!=",s.ComparisonBinaryOperator],["<",s.ComparisonBinaryOperator],[">",s.ComparisonBinaryOperator],["+",s.AdditiveBinaryOperator],["-",s.AdditiveBinaryOperator],["*",s.MultiplicativeBinaryOperator],["/",s.MultiplicativeBinaryOperator],["%",s.MultiplicativeBinaryOperator],["=",s.Equals]],u=new Map([["n",`
`],["t","	"],["r","\r"],["b","\b"],["f","\f"],["v","\v"],["'","'"],['"','"'],["\\","\\"]]);function p(D,oe={}){return D.endsWith(`
`)&&(D=D.slice(0,-1)),D=D.replace(/{#.*?#}/gs,"{##}"),oe.lstrip_blocks&&(D=D.replace(/^[ \t]*({[#%])/gm,"$1")),oe.trim_blocks&&(D=D.replace(/([#%]})\n/g,"$1")),D.replace(/{##}/g,"").replace(/-%}\s*/g,"%}").replace(/\s*{%-/g,"{%").replace(/-}}\s*/g,"}}").replace(/\s*{{-/g,"{{")}function c(D,oe={}){var ve,yt,Ft;const B=[],te=p(D,oe);let me=0;const Oe=ht=>{let lt="";for(;ht(te[me]);){if(te[me]==="\\"){if(++me,me>=te.length)throw new SyntaxError("Unexpected end of input");const rt=te[me++],Bt=u.get(rt);if(Bt===void 0)throw new SyntaxError(`Unexpected escaped character: ${rt}`);lt+=Bt;continue}if(lt+=te[me++],me>=te.length)throw new SyntaxError("Unexpected end of input")}return lt};e:for(;me<te.length;){const ht=(ve=B.at(-1))==null?void 0:ve.type;if(ht===void 0||ht===s.CloseStatement||ht===s.CloseExpression){let rt="";for(;me<te.length&&!(te[me]==="{"&&(te[me+1]==="%"||te[me+1]==="{"));)rt+=te[me++];if(rt.length>0){B.push(new n(rt,s.Text));continue}}Oe(rt=>/\s/.test(rt));const lt=te[me];if(lt==="-"||lt==="+"){const rt=(yt=B.at(-1))==null?void 0:yt.type;if(rt===s.Text||rt===void 0)throw new SyntaxError(`Unexpected character: ${lt}`);switch(rt){case s.Identifier:case s.NumericLiteral:case s.BooleanLiteral:case s.NullLiteral:case s.StringLiteral:case s.CloseParen:case s.CloseSquareBracket:break;default:{++me;const Bt=Oe(a);B.push(new n(`${lt}${Bt}`,Bt.length>0?s.NumericLiteral:s.UnaryOperator));continue}}}for(const[rt,Bt]of l)if(te.slice(me,me+rt.length)===rt){B.push(new n(rt,Bt)),me+=rt.length;continue e}if(lt==="'"||lt==='"'){++me;const rt=Oe(Bt=>Bt!==lt);B.push(new n(rt,s.StringLiteral)),++me;continue}if(a(lt)){const rt=Oe(a);B.push(new n(rt,s.NumericLiteral));continue}if(i(lt)){const rt=Oe(i),Bt=Object.hasOwn(o,rt)?o[rt]:s.Identifier;Bt===s.In&&((Ft=B.at(-1))==null?void 0:Ft.type)===s.Not?(B.pop(),B.push(new n("not in",s.NotIn))):B.push(new n(rt,Bt));continue}throw new SyntaxError(`Unexpected character: ${lt}`)}return B}var d=class{constructor(){Y(this,"type","Statement")}},_=class extends d{constructor(oe){super();Y(this,"type","Program");this.body=oe}},f=class extends d{constructor(oe,B,te){super();Y(this,"type","If");this.test=oe,this.body=B,this.alternate=te}},T=class extends d{constructor(oe,B,te,me){super();Y(this,"type","For");this.loopvar=oe,this.iterable=B,this.body=te,this.defaultBlock=me}},I=class extends d{constructor(){super(...arguments);Y(this,"type","Break")}},g=class extends d{constructor(){super(...arguments);Y(this,"type","Continue")}},w=class extends d{constructor(oe,B,te){super();Y(this,"type","Set");this.assignee=oe,this.value=B,this.body=te}},S=class extends d{constructor(oe,B,te){super();Y(this,"type","Macro");this.name=oe,this.args=B,this.body=te}},E=class extends d{constructor(){super(...arguments);Y(this,"type","Expression")}},v=class extends E{constructor(oe,B,te){super();Y(this,"type","MemberExpression");this.object=oe,this.property=B,this.computed=te}},M=class extends E{constructor(oe,B){super();Y(this,"type","CallExpression");this.callee=oe,this.args=B}},y=class extends E{constructor(oe){super();Y(this,"type","Identifier");this.value=oe}},C=class extends E{constructor(oe){super();Y(this,"type","Literal");this.value=oe}},F=class extends C{constructor(){super(...arguments);Y(this,"type","NumericLiteral")}},z=class extends C{constructor(){super(...arguments);Y(this,"type","StringLiteral")}},K=class extends C{constructor(){super(...arguments);Y(this,"type","BooleanLiteral")}},q=class extends C{constructor(){super(...arguments);Y(this,"type","NullLiteral")}},R=class extends C{constructor(){super(...arguments);Y(this,"type","ArrayLiteral")}},Z=class extends C{constructor(){super(...arguments);Y(this,"type","TupleLiteral")}},H=class extends C{constructor(){super(...arguments);Y(this,"type","ObjectLiteral")}},J=class extends E{constructor(oe,B,te){super();Y(this,"type","BinaryExpression");this.operator=oe,this.left=B,this.right=te}},Q=class extends E{constructor(oe,B){super();Y(this,"type","FilterExpression");this.operand=oe,this.filter=B}},se=class extends E{constructor(oe,B){super();Y(this,"type","SelectExpression");this.iterable=oe,this.test=B}},fe=class extends E{constructor(oe,B,te){super();Y(this,"type","TestExpression");this.operand=oe,this.negate=B,this.test=te}},ae=class extends E{constructor(oe,B){super();Y(this,"type","UnaryExpression");this.operator=oe,this.argument=B}},V=class extends E{constructor(oe=void 0,B=void 0,te=void 0){super();Y(this,"type","SliceExpression");this.start=oe,this.stop=B,this.step=te}},A=class extends E{constructor(oe,B){super();Y(this,"type","KeywordArgumentExpression");this.key=oe,this.value=B}};function U(D){const oe=new _([]);let B=0;function te(Ae,Je){const it=D[B++];if(!it||it.type!==Ae)throw new Error(`Parser Error: ${Je}. ${it.type} !== ${Ae}.`);return it}function me(){switch(D[B].type){case s.Text:return yt();case s.OpenStatement:return Ft();case s.OpenExpression:return ht();default:throw new SyntaxError(`Unexpected token type: ${D[B].type}`)}}function Oe(...Ae){return B+Ae.length<=D.length&&Ae.some((Je,it)=>Je!==D[B+it].type)}function ve(...Ae){return B+Ae.length<=D.length&&Ae.every((Je,it)=>Je===D[B+it].type)}function yt(){return new z(te(s.Text,"Expected text token").value)}function Ft(){te(s.OpenStatement,"Expected opening statement token");let Ae;switch(D[B].type){case s.Set:++B,Ae=lt(),te(s.CloseStatement,"Expected closing statement token");break;case s.If:++B,Ae=rt(),te(s.OpenStatement,"Expected {% token"),te(s.EndIf,"Expected endif token"),te(s.CloseStatement,"Expected %} token");break;case s.Macro:++B,Ae=Bt(),te(s.OpenStatement,"Expected {% token"),te(s.EndMacro,"Expected endmacro token"),te(s.CloseStatement,"Expected %} token");break;case s.For:++B,Ae=wr(),te(s.OpenStatement,"Expected {% token"),te(s.EndFor,"Expected endfor token"),te(s.CloseStatement,"Expected %} token");break;case s.Break:++B,te(s.CloseStatement,"Expected closing statement token"),Ae=new I;break;case s.Continue:++B,te(s.CloseStatement,"Expected closing statement token"),Ae=new g;break;default:throw new SyntaxError(`Unknown statement type: ${D[B].type}`)}return Ae}function ht(){te(s.OpenExpression,"Expected opening expression token");const Ae=Xt();return te(s.CloseExpression,"Expected closing expression token"),Ae}function lt(){var Je,it;const Ae=Xt();if(ve(s.Equals)){++B;const Rt=Xt();return new w(Ae,Rt,[])}else{const Rt=[];for(te(s.CloseStatement,"Expected %} token");!(((Je=D[B])==null?void 0:Je.type)===s.OpenStatement&&((it=D[B+1])==null?void 0:it.type)===s.EndSet);){const ts=me();Rt.push(ts)}return te(s.OpenStatement,"Expected {% token"),te(s.EndSet,"Expected endset token"),new w(Ae,null,Rt)}}function rt(){var Rt,ts,rs,ur,ss,cr,hr,ns;const Ae=Xt();te(s.CloseStatement,"Expected closing statement token");const Je=[],it=[];for(;!(((Rt=D[B])==null?void 0:Rt.type)===s.OpenStatement&&(((ts=D[B+1])==null?void 0:ts.type)===s.ElseIf||((rs=D[B+1])==null?void 0:rs.type)===s.Else||((ur=D[B+1])==null?void 0:ur.type)===s.EndIf));)Je.push(me());if(((ss=D[B])==null?void 0:ss.type)===s.OpenStatement&&((cr=D[B+1])==null?void 0:cr.type)!==s.EndIf)if(++B,ve(s.ElseIf))te(s.ElseIf,"Expected elseif token"),it.push(rt());else for(te(s.Else,"Expected else token"),te(s.CloseStatement,"Expected closing statement token");!(((hr=D[B])==null?void 0:hr.type)===s.OpenStatement&&((ns=D[B+1])==null?void 0:ns.type)===s.EndIf);)it.push(me());return new f(Ae,Je,it)}function Bt(){const Ae=zr();if(Ae.type!=="Identifier")throw new SyntaxError("Expected identifier following macro statement");const Je=ds();te(s.CloseStatement,"Expected closing statement token");const it=[];for(;Oe(s.OpenStatement,s.EndMacro);)it.push(me());return new S(Ae,Je,it)}function Ht(Ae=!1){const Je=Ae?zr:Xt,it=[Je()],Rt=ve(s.Comma);for(;Rt&&(++B,it.push(Je()),!!ve(s.Comma)););return Rt?new Z(it):it[0]}function wr(){const Ae=Ht(!0);if(!(Ae instanceof y||Ae instanceof Z))throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${Ae.type} instead`);te(s.In,"Expected `in` keyword following loop variable");const Je=Xt();te(s.CloseStatement,"Expected closing statement token");const it=[];for(;Oe(s.OpenStatement,s.EndFor)&&Oe(s.OpenStatement,s.Else);)it.push(me());const Rt=[];if(ve(s.OpenStatement,s.Else))for(++B,++B,te(s.CloseStatement,"Expected closing statement token");Oe(s.OpenStatement,s.EndFor);)Rt.push(me());return new T(Ae,Je,it,Rt)}function Xt(){return Or()}function Or(){const Ae=Zr();if(ve(s.If)){++B;const Je=Zr();if(ve(s.Else)){++B;const it=Zr();return new f(Je,[Ae],[it])}else return new se(Ae,Je)}return Ae}function Zr(){let Ae=cs();for(;ve(s.Or);){const Je=D[B];++B;const it=cs();Ae=new J(Je,Ae,it)}return Ae}function cs(){let Ae=es();for(;ve(s.And);){const Je=D[B];++B;const it=es();Ae=new J(Je,Ae,it)}return Ae}function es(){let Ae;for(;ve(s.Not);){const Je=D[B];++B;const it=es();Ae=new ae(Je,it)}return Ae??Ps()}function Ps(){let Ae=jr();for(;ve(s.ComparisonBinaryOperator)||ve(s.In)||ve(s.NotIn);){const Je=D[B];++B;const it=jr();Ae=new J(Je,Ae,it)}return Ae}function jr(){let Ae=Is();for(;ve(s.AdditiveBinaryOperator);){const Je=D[B];++B;const it=Is();Ae=new J(Je,Ae,it)}return Ae}function Cs(){const Ae=ir(zr());return ve(s.OpenParen)?Gr(Ae):Ae}function Gr(Ae){let Je=new M(Ae,ds());return Je=ir(Je),ve(s.OpenParen)&&(Je=Gr(Je)),Je}function ds(){te(s.OpenParen,"Expected opening parenthesis for arguments list");const Ae=Ss();return te(s.CloseParen,"Expected closing parenthesis for arguments list"),Ae}function Ss(){const Ae=[];for(;!ve(s.CloseParen);){let Je=Xt();if(ve(s.Equals)){if(++B,!(Je instanceof y))throw new SyntaxError("Expected identifier for keyword argument");const it=Xt();Je=new A(Je,it)}Ae.push(Je),ve(s.Comma)&&++B}return Ae}function $s(){const Ae=[];let Je=!1;for(;!ve(s.CloseSquareBracket);)ve(s.Colon)?(Ae.push(void 0),++B,Je=!0):(Ae.push(Xt()),ve(s.Colon)&&(++B,Je=!0));if(Ae.length===0)throw new SyntaxError("Expected at least one argument for member/slice expression");if(Je){if(Ae.length>3)throw new SyntaxError("Expected 0-3 arguments for slice expression");return new V(...Ae)}return Ae[0]}function ir(Ae){for(;ve(s.Dot)||ve(s.OpenSquareBracket);){const Je=D[B];++B;let it;const Rt=Je.type!==s.Dot;if(Rt)it=$s(),te(s.CloseSquareBracket,"Expected closing square bracket");else if(it=zr(),it.type!=="Identifier")throw new SyntaxError("Expected identifier following dot operator");Ae=new v(Ae,it,Rt)}return Ae}function Is(){let Ae=Tr();for(;ve(s.MultiplicativeBinaryOperator);){const Je=D[B];++B;const it=Tr();Ae=new J(Je,Ae,it)}return Ae}function Tr(){let Ae=ps();for(;ve(s.Is);){++B;const Je=ve(s.Not);Je&&++B;let it=zr();if(it instanceof K?it=new y(it.value.toString()):it instanceof q&&(it=new y("none")),!(it instanceof y))throw new SyntaxError("Expected identifier for the test");Ae=new fe(Ae,Je,it)}return Ae}function ps(){let Ae=Cs();for(;ve(s.Pipe);){++B;let Je=zr();if(!(Je instanceof y))throw new SyntaxError("Expected identifier for the filter");ve(s.OpenParen)&&(Je=Gr(Je)),Ae=new Q(Ae,Je)}return Ae}function zr(){const Ae=D[B];switch(Ae.type){case s.NumericLiteral:return++B,new F(Number(Ae.value));case s.StringLiteral:return++B,new z(Ae.value);case s.BooleanLiteral:return++B,new K(Ae.value.toLowerCase()==="true");case s.NullLiteral:return++B,new q(null);case s.Identifier:return++B,new y(Ae.value);case s.OpenParen:{++B;const Je=Ht();if(D[B].type!==s.CloseParen)throw new SyntaxError(`Expected closing parenthesis, got ${D[B].type} instead`);return++B,Je}case s.OpenSquareBracket:{++B;const Je=[];for(;!ve(s.CloseSquareBracket);)Je.push(Xt()),ve(s.Comma)&&++B;return++B,new R(Je)}case s.OpenCurlyBracket:{++B;const Je=new Map;for(;!ve(s.CloseCurlyBracket);){const it=Xt();te(s.Colon,"Expected colon between key and value in object literal");const Rt=Xt();Je.set(it,Rt),ve(s.Comma)&&++B}return++B,new H(Je)}default:throw new SyntaxError(`Unexpected token: ${Ae.type}`)}}for(;B<D.length;)oe.body.push(me());return oe}function ee(D,oe,B=1){oe===void 0&&(oe=D,D=0);const te=[];for(let me=D;me<oe;me+=B)te.push(me);return te}function _e(D,oe,B,te=1){const me=Math.sign(te);me>=0?(oe=(oe??(oe=0))<0?Math.max(D.length+oe,0):Math.min(oe,D.length),B=(B??(B=D.length))<0?Math.max(D.length+B,0):Math.min(B,D.length)):(oe=(oe??(oe=D.length-1))<0?Math.max(D.length+oe,-1):Math.min(oe,D.length-1),B=(B??(B=-1))<-1?Math.max(D.length+B,-1):Math.min(B,D.length-1));const Oe=[];for(let ve=oe;me*ve<me*B;ve+=te)Oe.push(D[ve]);return Oe}function le(D){return D.replace(/\b\w/g,oe=>oe.toUpperCase())}var ye=class extends Error{},ze=class extends Error{},Ue=class{constructor(D=void 0){Y(this,"type","RuntimeValue");Y(this,"value");Y(this,"builtins",new Map);this.value=D}__bool__(){return new re(!!this.value)}},pe=class extends Ue{constructor(){super(...arguments);Y(this,"type","NumericValue")}},W=class extends Ue{constructor(){super(...arguments);Y(this,"type","StringValue");Y(this,"builtins",new Map([["upper",new Pe(()=>new W(this.value.toUpperCase()))],["lower",new Pe(()=>new W(this.value.toLowerCase()))],["strip",new Pe(()=>new W(this.value.trim()))],["title",new Pe(()=>new W(le(this.value)))],["length",new pe(this.value.length)],["rstrip",new Pe(()=>new W(this.value.trimEnd()))],["lstrip",new Pe(()=>new W(this.value.trimStart()))],["startswith",new Pe(oe=>{if(oe.length===0)throw new Error("startswith() requires at least one argument");const B=oe[0];if(!(B instanceof W))throw new Error("startswith() argument must be a string");return new re(this.value.startsWith(B.value))})],["endswith",new Pe(oe=>{if(oe.length===0)throw new Error("endswith() requires at least one argument");const B=oe[0];if(!(B instanceof W))throw new Error("endswith() argument must be a string");return new re(this.value.endsWith(B.value))})],["split",new Pe(oe=>{const B=oe[0]??new $e;if(!(B instanceof W||B instanceof $e))throw new Error("sep argument must be a string or null");const te=oe[1]??new pe(-1);if(!(te instanceof pe))throw new Error("maxsplit argument must be a number");let me=[];if(B instanceof $e){const Oe=this.value.trimStart();for(const{0:ve,index:yt}of Oe.matchAll(/\S+/g)){if(te.value!==-1&&me.length>=te.value&&yt!==void 0){me.push(ve+Oe.slice(yt+ve.length));break}me.push(ve)}}else{if(B.value==="")throw new Error("empty separator");me=this.value.split(B.value),te.value!==-1&&me.length>te.value&&me.push(me.splice(te.value).join(B.value))}return new we(me.map(Oe=>new W(Oe)))})]]))}},re=class extends Ue{constructor(){super(...arguments);Y(this,"type","BooleanValue")}},G=class extends Ue{constructor(){super(...arguments);Y(this,"type","ObjectValue");Y(this,"builtins",new Map([["get",new Pe(([oe,B])=>{if(!(oe instanceof W))throw new Error(`Object key must be a string: got ${oe.type}`);return this.value.get(oe.value)??B??new $e})],["items",new Pe(()=>new we(Array.from(this.value.entries()).map(([oe,B])=>new we([new W(oe),B]))))]]))}__bool__(){return new re(this.value.size>0)}},Me=class extends G{constructor(){super(...arguments);Y(this,"type","KeywordArgumentsValue")}},we=class extends Ue{constructor(){super(...arguments);Y(this,"type","ArrayValue");Y(this,"builtins",new Map([["length",new pe(this.value.length)]]))}__bool__(){return new re(this.value.length>0)}},Se=class extends we{constructor(){super(...arguments);Y(this,"type","TupleValue")}},Pe=class extends Ue{constructor(){super(...arguments);Y(this,"type","FunctionValue")}},$e=class extends Ue{constructor(){super(...arguments);Y(this,"type","NullValue")}},Fe=class extends Ue{constructor(){super(...arguments);Y(this,"type","UndefinedValue")}},Be=class{constructor(D){Y(this,"variables",new Map([["namespace",new Pe(D=>{if(D.length===0)return new G(new Map);if(D.length!==1||!(D[0]instanceof G))throw new Error("`namespace` expects either zero arguments or a single object argument");return D[0]})]]));Y(this,"tests",new Map([["boolean",D=>D.type==="BooleanValue"],["callable",D=>D instanceof Pe],["odd",D=>{if(D.type!=="NumericValue")throw new Error(`Cannot apply test "odd" to type: ${D.type}`);return D.value%2!==0}],["even",D=>{if(D.type!=="NumericValue")throw new Error(`Cannot apply test "even" to type: ${D.type}`);return D.value%2===0}],["false",D=>D.type==="BooleanValue"&&!D.value],["true",D=>D.type==="BooleanValue"&&D.value],["none",D=>D.type==="NullValue"],["string",D=>D.type==="StringValue"],["number",D=>D.type==="NumericValue"],["integer",D=>D.type==="NumericValue"&&Number.isInteger(D.value)],["iterable",D=>D.type==="ArrayValue"||D.type==="StringValue"],["mapping",D=>D.type==="ObjectValue"],["lower",D=>{const oe=D.value;return D.type==="StringValue"&&oe===oe.toLowerCase()}],["upper",D=>{const oe=D.value;return D.type==="StringValue"&&oe===oe.toUpperCase()}],["none",D=>D.type==="NullValue"],["defined",D=>D.type!=="UndefinedValue"],["undefined",D=>D.type==="UndefinedValue"],["equalto",(D,oe)=>D.value===oe.value],["eq",(D,oe)=>D.value===oe.value]]));this.parent=D}set(D,oe){return this.declareVariable(D,qe(oe))}declareVariable(D,oe){if(this.variables.has(D))throw new SyntaxError(`Variable already declared: ${D}`);return this.variables.set(D,oe),oe}setVariable(D,oe){return this.variables.set(D,oe),oe}resolve(D){if(this.variables.has(D))return this;if(this.parent)return this.parent.resolve(D);throw new Error(`Unknown variable: ${D}`)}lookupVariable(D){try{return this.resolve(D).variables.get(D)??new Fe}catch{return new Fe}}},He=class{constructor(D){Y(this,"global");this.global=D??new Be}run(D){return this.evaluate(D,this.global)}evaluateBinaryExpression(D,oe){const B=this.evaluate(D.left,oe);switch(D.operator.value){case"and":return B.__bool__().value?this.evaluate(D.right,oe):B;case"or":return B.__bool__().value?B:this.evaluate(D.right,oe)}const te=this.evaluate(D.right,oe);switch(D.operator.value){case"==":return new re(B.value==te.value);case"!=":return new re(B.value!=te.value)}if(B instanceof Fe||te instanceof Fe)throw new Error("Cannot perform operation on undefined values");if(B instanceof $e||te instanceof $e)throw new Error("Cannot perform operation on null values");if(B instanceof pe&&te instanceof pe)switch(D.operator.value){case"+":return new pe(B.value+te.value);case"-":return new pe(B.value-te.value);case"*":return new pe(B.value*te.value);case"/":return new pe(B.value/te.value);case"%":return new pe(B.value%te.value);case"<":return new re(B.value<te.value);case">":return new re(B.value>te.value);case">=":return new re(B.value>=te.value);case"<=":return new re(B.value<=te.value)}else if(B instanceof we&&te instanceof we)switch(D.operator.value){case"+":return new we(B.value.concat(te.value))}else if(te instanceof we){const me=te.value.find(Oe=>Oe.value===B.value)!==void 0;switch(D.operator.value){case"in":return new re(me);case"not in":return new re(!me)}}if(B instanceof W||te instanceof W)switch(D.operator.value){case"+":return new W(B.value.toString()+te.value.toString())}if(B instanceof W&&te instanceof W)switch(D.operator.value){case"in":return new re(te.value.includes(B.value));case"not in":return new re(!te.value.includes(B.value))}if(B instanceof W&&te instanceof G)switch(D.operator.value){case"in":return new re(te.value.has(B.value));case"not in":return new re(!te.value.has(B.value))}throw new SyntaxError(`Unknown operator "${D.operator.value}" between ${B.type} and ${te.type}`)}evaluateArguments(D,oe){const B=[],te=new Map;for(const me of D)if(me.type==="KeywordArgumentExpression"){const Oe=me;te.set(Oe.key.value,this.evaluate(Oe.value,oe))}else{if(te.size>0)throw new Error("Positional arguments must come before keyword arguments");B.push(this.evaluate(me,oe))}return[B,te]}evaluateFilterExpression(D,oe){const B=this.evaluate(D.operand,oe);if(D.filter.type==="Identifier"){const te=D.filter;if(te.value==="tojson")return new W(Ie(B));if(B instanceof we)switch(te.value){case"list":return B;case"first":return B.value[0];case"last":return B.value[B.value.length-1];case"length":return new pe(B.value.length);case"reverse":return new we(B.value.reverse());case"sort":return new we(B.value.sort((me,Oe)=>{if(me.type!==Oe.type)throw new Error(`Cannot compare different types: ${me.type} and ${Oe.type}`);switch(me.type){case"NumericValue":return me.value-Oe.value;case"StringValue":return me.value.localeCompare(Oe.value);default:throw new Error(`Cannot compare type: ${me.type}`)}}));case"join":return new W(B.value.map(me=>me.value).join(""));case"string":return new W(Ie(B));default:throw new Error(`Unknown ArrayValue filter: ${te.value}`)}else if(B instanceof W)switch(te.value){case"length":return new pe(B.value.length);case"upper":return new W(B.value.toUpperCase());case"lower":return new W(B.value.toLowerCase());case"title":return new W(le(B.value));case"capitalize":return new W(B.value.charAt(0).toUpperCase()+B.value.slice(1));case"trim":return new W(B.value.trim());case"indent":return new W(B.value.split(`
`).map((me,Oe)=>Oe===0||me.length===0?me:"    "+me).join(`
`));case"join":case"string":return B;default:throw new Error(`Unknown StringValue filter: ${te.value}`)}else if(B instanceof pe)switch(te.value){case"abs":return new pe(Math.abs(B.value));default:throw new Error(`Unknown NumericValue filter: ${te.value}`)}else if(B instanceof G)switch(te.value){case"items":return new we(Array.from(B.value.entries()).map(([me,Oe])=>new we([new W(me),Oe])));case"length":return new pe(B.value.size);default:throw new Error(`Unknown ObjectValue filter: ${te.value}`)}throw new Error(`Cannot apply filter "${te.value}" to type: ${B.type}`)}else if(D.filter.type==="CallExpression"){const te=D.filter;if(te.callee.type!=="Identifier")throw new Error(`Unknown filter: ${te.callee.type}`);const me=te.callee.value;if(me==="tojson"){const[,Oe]=this.evaluateArguments(te.args,oe),ve=Oe.get("indent")??new $e;if(!(ve instanceof pe||ve instanceof $e))throw new Error("If set, indent must be a number");return new W(Ie(B,ve.value))}else if(me==="join"){let Oe;if(B instanceof W)Oe=Array.from(B.value);else if(B instanceof we)Oe=B.value.map(ht=>ht.value);else throw new Error(`Cannot apply filter "${me}" to type: ${B.type}`);const[ve,yt]=this.evaluateArguments(te.args,oe),Ft=ve.at(0)??yt.get("separator")??new W("");if(!(Ft instanceof W))throw new Error("separator must be a string");return new W(Oe.join(Ft.value))}if(B instanceof we){switch(me){case"selectattr":case"rejectattr":{const Oe=me==="selectattr";if(B.value.some(rt=>!(rt instanceof G)))throw new Error(`\`${me}\` can only be applied to array of objects`);if(te.args.some(rt=>rt.type!=="StringLiteral"))throw new Error(`arguments of \`${me}\` must be strings`);const[ve,yt,Ft]=te.args.map(rt=>this.evaluate(rt,oe));let ht;if(yt){const rt=oe.tests.get(yt.value);if(!rt)throw new Error(`Unknown test: ${yt.value}`);ht=rt}else ht=(...rt)=>rt[0].__bool__().value;const lt=B.value.filter(rt=>{const Bt=rt.value.get(ve.value),Ht=Bt?ht(Bt,Ft):!1;return Oe?Ht:!Ht});return new we(lt)}case"map":{const[,Oe]=this.evaluateArguments(te.args,oe);if(Oe.has("attribute")){const ve=Oe.get("attribute");if(!(ve instanceof W))throw new Error("attribute must be a string");const yt=Oe.get("default"),Ft=B.value.map(ht=>{if(!(ht instanceof G))throw new Error("items in map must be an object");return ht.value.get(ve.value)??yt??new Fe});return new we(Ft)}else throw new Error("`map` expressions without `attribute` set are not currently supported.")}}throw new Error(`Unknown ArrayValue filter: ${me}`)}else if(B instanceof W){switch(me){case"indent":{const[Oe,ve]=this.evaluateArguments(te.args,oe),yt=Oe.at(0)??ve.get("width")??new pe(4);if(!(yt instanceof pe))throw new Error("width must be a number");const Ft=Oe.at(1)??ve.get("first")??new re(!1),ht=Oe.at(2)??ve.get("blank")??new re(!1),lt=B.value.split(`
`),rt=" ".repeat(yt.value),Bt=lt.map((Ht,wr)=>!Ft.value&&wr===0||!ht.value&&Ht.length===0?Ht:rt+Ht);return new W(Bt.join(`
`))}}throw new Error(`Unknown StringValue filter: ${me}`)}else throw new Error(`Cannot apply filter "${me}" to type: ${B.type}`)}throw new Error(`Unknown filter: ${D.filter.type}`)}evaluateTestExpression(D,oe){const B=this.evaluate(D.operand,oe),te=oe.tests.get(D.test.value);if(!te)throw new Error(`Unknown test: ${D.test.value}`);const me=te(B);return new re(D.negate?!me:me)}evaluateUnaryExpression(D,oe){const B=this.evaluate(D.argument,oe);switch(D.operator.value){case"not":return new re(!B.value);default:throw new SyntaxError(`Unknown operator: ${D.operator.value}`)}}evalProgram(D,oe){return this.evaluateBlock(D.body,oe)}evaluateBlock(D,oe){let B="";for(const te of D){const me=this.evaluate(te,oe);me.type!=="NullValue"&&me.type!=="UndefinedValue"&&(B+=me.value)}return new W(B)}evaluateIdentifier(D,oe){return oe.lookupVariable(D.value)}evaluateCallExpression(D,oe){const[B,te]=this.evaluateArguments(D.args,oe);te.size>0&&B.push(new Me(te));const me=this.evaluate(D.callee,oe);if(me.type!=="FunctionValue")throw new Error(`Cannot call something that is not a function: got ${me.type}`);return me.value(B,oe)}evaluateSliceExpression(D,oe,B){if(!(D instanceof we||D instanceof W))throw new Error("Slice object must be an array or string");const te=this.evaluate(oe.start,B),me=this.evaluate(oe.stop,B),Oe=this.evaluate(oe.step,B);if(!(te instanceof pe||te instanceof Fe))throw new Error("Slice start must be numeric or undefined");if(!(me instanceof pe||me instanceof Fe))throw new Error("Slice stop must be numeric or undefined");if(!(Oe instanceof pe||Oe instanceof Fe))throw new Error("Slice step must be numeric or undefined");return D instanceof we?new we(_e(D.value,te.value,me.value,Oe.value)):new W(_e(Array.from(D.value),te.value,me.value,Oe.value).join(""))}evaluateMemberExpression(D,oe){const B=this.evaluate(D.object,oe);let te;if(D.computed){if(D.property.type==="SliceExpression")return this.evaluateSliceExpression(B,D.property,oe);te=this.evaluate(D.property,oe)}else te=new W(D.property.value);let me;if(B instanceof G){if(!(te instanceof W))throw new Error(`Cannot access property with non-string: got ${te.type}`);me=B.value.get(te.value)??B.builtins.get(te.value)}else if(B instanceof we||B instanceof W)if(te instanceof pe)me=B.value.at(te.value),B instanceof W&&(me=new W(B.value.at(te.value)));else if(te instanceof W)me=B.builtins.get(te.value);else throw new Error(`Cannot access property with non-string/non-number: got ${te.type}`);else{if(!(te instanceof W))throw new Error(`Cannot access property with non-string: got ${te.type}`);me=B.builtins.get(te.value)}return me instanceof Ue?me:new Fe}evaluateSet(D,oe){const B=D.value?this.evaluate(D.value,oe):this.evaluateBlock(D.body,oe);if(D.assignee.type==="Identifier"){const te=D.assignee.value;oe.setVariable(te,B)}else if(D.assignee.type==="MemberExpression"){const te=D.assignee,me=this.evaluate(te.object,oe);if(!(me instanceof G))throw new Error("Cannot assign to member of non-object");if(te.property.type!=="Identifier")throw new Error("Cannot assign to member with non-identifier property");me.value.set(te.property.value,B)}else throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(D.assignee)}`);return new $e}evaluateIf(D,oe){const B=this.evaluate(D.test,oe);return this.evaluateBlock(B.__bool__().value?D.body:D.alternate,oe)}evaluateFor(D,oe){const B=new Be(oe);let te,me;if(D.iterable.type==="SelectExpression"){const ht=D.iterable;me=this.evaluate(ht.iterable,B),te=ht.test}else me=this.evaluate(D.iterable,B);if(!(me instanceof we))throw new Error(`Expected iterable type in for loop: got ${me.type}`);const Oe=[],ve=[];for(let ht=0;ht<me.value.length;++ht){const lt=new Be(B),rt=me.value[ht];let Bt;if(D.loopvar.type==="Identifier")Bt=Ht=>Ht.setVariable(D.loopvar.value,rt);else if(D.loopvar.type==="TupleLiteral"){const Ht=D.loopvar;if(rt.type!=="ArrayValue")throw new Error(`Cannot unpack non-iterable type: ${rt.type}`);const wr=rt;if(Ht.value.length!==wr.value.length)throw new Error(`Too ${Ht.value.length>wr.value.length?"few":"many"} items to unpack`);Bt=Xt=>{for(let Or=0;Or<Ht.value.length;++Or){if(Ht.value[Or].type!=="Identifier")throw new Error(`Cannot unpack non-identifier type: ${Ht.value[Or].type}`);Xt.setVariable(Ht.value[Or].value,wr.value[Or])}}}else throw new Error(`Invalid loop variable(s): ${D.loopvar.type}`);te&&(Bt(lt),!this.evaluate(te,lt).__bool__().value)||(Oe.push(rt),ve.push(Bt))}let yt="",Ft=!0;for(let ht=0;ht<Oe.length;++ht){const lt=new Map([["index",new pe(ht+1)],["index0",new pe(ht)],["revindex",new pe(Oe.length-ht)],["revindex0",new pe(Oe.length-ht-1)],["first",new re(ht===0)],["last",new re(ht===Oe.length-1)],["length",new pe(Oe.length)],["previtem",ht>0?Oe[ht-1]:new Fe],["nextitem",ht<Oe.length-1?Oe[ht+1]:new Fe]]);B.setVariable("loop",new G(lt)),ve[ht](B);try{const rt=this.evaluateBlock(D.body,B);yt+=rt.value}catch(rt){if(rt instanceof ze)continue;if(rt instanceof ye)break;throw rt}Ft=!1}if(Ft){const ht=this.evaluateBlock(D.defaultBlock,B);yt+=ht.value}return new W(yt)}evaluateMacro(D,oe){return oe.setVariable(D.name.value,new Pe((B,te)=>{var ve;const me=new Be(te);B=B.slice();let Oe;((ve=B.at(-1))==null?void 0:ve.type)==="KeywordArgumentsValue"&&(Oe=B.pop());for(let yt=0;yt<D.args.length;++yt){const Ft=D.args[yt],ht=B[yt];if(Ft.type==="Identifier"){const lt=Ft;if(!ht)throw new Error(`Missing positional argument: ${lt.value}`);me.setVariable(lt.value,ht)}else if(Ft.type==="KeywordArgumentExpression"){const lt=Ft,rt=ht??(Oe==null?void 0:Oe.value.get(lt.key.value))??this.evaluate(lt.value,me);me.setVariable(lt.key.value,rt)}else throw new Error(`Unknown argument type: ${Ft.type}`)}return this.evaluateBlock(D.body,me)})),new $e}evaluate(D,oe){if(D===void 0)return new Fe;switch(D.type){case"Program":return this.evalProgram(D,oe);case"Set":return this.evaluateSet(D,oe);case"If":return this.evaluateIf(D,oe);case"For":return this.evaluateFor(D,oe);case"Macro":return this.evaluateMacro(D,oe);case"Break":throw new ye;case"Continue":throw new ze;case"NumericLiteral":return new pe(Number(D.value));case"StringLiteral":return new W(D.value);case"BooleanLiteral":return new re(D.value);case"NullLiteral":return new $e(D.value);case"ArrayLiteral":return new we(D.value.map(B=>this.evaluate(B,oe)));case"TupleLiteral":return new Se(D.value.map(B=>this.evaluate(B,oe)));case"ObjectLiteral":{const B=new Map;for(const[te,me]of D.value){const Oe=this.evaluate(te,oe);if(!(Oe instanceof W))throw new Error(`Object keys must be strings: got ${Oe.type}`);B.set(Oe.value,this.evaluate(me,oe))}return new G(B)}case"Identifier":return this.evaluateIdentifier(D,oe);case"CallExpression":return this.evaluateCallExpression(D,oe);case"MemberExpression":return this.evaluateMemberExpression(D,oe);case"UnaryExpression":return this.evaluateUnaryExpression(D,oe);case"BinaryExpression":return this.evaluateBinaryExpression(D,oe);case"FilterExpression":return this.evaluateFilterExpression(D,oe);case"TestExpression":return this.evaluateTestExpression(D,oe);default:throw new SyntaxError(`Unknown node type: ${D.type}`)}}};function qe(D){switch(typeof D){case"number":return new pe(D);case"string":return new W(D);case"boolean":return new re(D);case"undefined":return new Fe;case"object":return D===null?new $e:Array.isArray(D)?new we(D.map(qe)):new G(new Map(Object.entries(D).map(([oe,B])=>[oe,qe(B)])));case"function":return new Pe((oe,B)=>{const te=D(...oe.map(me=>me.value))??null;return qe(te)});default:throw new Error(`Cannot convert to runtime value: ${D}`)}}function Ie(D,oe,B){const te=B??0;switch(D.type){case"NullValue":case"UndefinedValue":return"null";case"NumericValue":case"StringValue":case"BooleanValue":return JSON.stringify(D.value);case"ArrayValue":case"ObjectValue":{const me=oe?" ".repeat(oe):"",Oe=`
`+me.repeat(te),ve=Oe+me;if(D.type==="ArrayValue"){const yt=D.value.map(Ft=>Ie(Ft,oe,te+1));return oe?`[${ve}${yt.join(`,${ve}`)}${Oe}]`:`[${yt.join(", ")}]`}else{const yt=Array.from(D.value.entries()).map(([Ft,ht])=>{const lt=`"${Ft}": ${Ie(ht,oe,te+1)}`;return oe?`${ve}${lt}`:lt});return oe?`{${yt.join(",")}${Oe}}`:`{${yt.join(", ")}}`}}default:throw new Error(`Cannot convert to JSON: ${D.type}`)}}var Ve=`
`,Ze="{%- ",st=" -%}",at={MultiplicativeBinaryOperator:2,AdditiveBinaryOperator:1,ComparisonBinaryOperator:0};function Ge(D,oe="	"){const B=typeof oe=="number"?" ".repeat(oe):oe;return pt(D.body,0,B).replace(/\n$/,"")}function ke(...D){return Ze+D.join(" ")+st}function pt(D,oe,B){return D.map(te=>St(te,oe,B)).join(Ve)}function St(D,oe,B){const te=B.repeat(oe);switch(D.type){case"Program":return pt(D.body,oe,B);case"If":return Vt(D,oe,B);case"For":return zt(D,oe,B);case"Set":return gr(D,oe,B);case"Macro":return or(D,oe,B);case"Break":return te+ke("break");case"Continue":return te+ke("continue");default:return te+"{{- "+Mt(D)+" -}}"}}function Vt(D,oe,B){const te=B.repeat(oe),me=[];let Oe=D;for(;Oe&&(me.push({test:Oe.test,body:Oe.body}),Oe.alternate.length===1&&Oe.alternate[0].type==="If");)Oe=Oe.alternate[0];let ve=te+ke("if",Mt(me[0].test))+Ve+pt(me[0].body,oe+1,B);for(let yt=1;yt<me.length;yt++)ve+=Ve+te+ke("elif",Mt(me[yt].test))+Ve+pt(me[yt].body,oe+1,B);return Oe&&Oe.alternate.length>0&&(ve+=Ve+te+ke("else")+Ve+pt(Oe.alternate,oe+1,B)),ve+=Ve+te+ke("endif"),ve}function zt(D,oe,B){const te=B.repeat(oe);let me="";if(D.iterable.type==="SelectExpression"){const ve=D.iterable;me=`${Mt(ve.iterable)} if ${Mt(ve.test)}`}else me=Mt(D.iterable);let Oe=te+ke("for",Mt(D.loopvar),"in",me)+Ve+pt(D.body,oe+1,B);return D.defaultBlock.length>0&&(Oe+=Ve+te+ke("else")+Ve+pt(D.defaultBlock,oe+1,B)),Oe+=Ve+te+ke("endfor"),Oe}function gr(D,oe,B){const te=B.repeat(oe),me=Mt(D.assignee),Oe=D.value?Mt(D.value):"",ve=te+ke("set",`${me}${D.value?" = "+Oe:""}`);return D.body.length===0?ve:ve+Ve+pt(D.body,oe+1,B)+Ve+te+ke("endset")}function or(D,oe,B){const te=B.repeat(oe),me=D.args.map(Mt).join(", ");return te+ke("macro",`${D.name.value}(${me})`)+Ve+pt(D.body,oe+1,B)+Ve+te+ke("endmacro")}function Mt(D,oe=-1){switch(D.type){case"Identifier":return D.value;case"NullLiteral":return"none";case"NumericLiteral":case"BooleanLiteral":return`${D.value}`;case"StringLiteral":return JSON.stringify(D.value);case"BinaryExpression":{const B=D,te=at[B.operator.type]??0,me=Mt(B.left,te),Oe=Mt(B.right,te+1),ve=`${me} ${B.operator.value} ${Oe}`;return te<oe?`(${ve})`:ve}case"UnaryExpression":{const B=D;return B.operator.value+(B.operator.value==="not"?" ":"")+Mt(B.argument,1/0)}case"LogicalNegationExpression":return`not ${Mt(D.argument,1/0)}`;case"CallExpression":{const B=D,te=B.args.map(me=>Mt(me,-1)).join(", ");return`${Mt(B.callee,-1)}(${te})`}case"MemberExpression":{const B=D;let te=Mt(B.object,-1);B.object.type!=="Identifier"&&(te=`(${te})`);let me=Mt(B.property,-1);return!B.computed&&B.property.type!=="Identifier"&&(me=`(${me})`),B.computed?`${te}[${me}]`:`${te}.${me}`}case"FilterExpression":{const B=D,te=Mt(B.operand,1/0);return B.filter.type==="CallExpression"?`${te} | ${Mt(B.filter,-1)}`:`${te} | ${B.filter.value}`}case"SelectExpression":{const B=D;return`${Mt(B.iterable,-1)} | select(${Mt(B.test,-1)})`}case"TestExpression":{const B=D;return`${Mt(B.operand,-1)} is${B.negate?" not":""} ${B.test.value}`}case"ArrayLiteral":case"TupleLiteral":{const B=D.value.map(me=>Mt(me,-1)),te=D.type==="ArrayLiteral"?"[]":"()";return`${te[0]}${B.join(", ")}${te[1]}`}case"ObjectLiteral":return`{ ${Array.from(D.value.entries()).map(([te,me])=>`${Mt(te,-1)}: ${Mt(me,-1)}`).join(", ")} }`;case"SliceExpression":{const B=D,te=B.start?Mt(B.start,-1):"",me=B.stop?Mt(B.stop,-1):"",Oe=B.step?`:${Mt(B.step,-1)}`:"";return`${te}:${me}${Oe}`}case"KeywordArgumentExpression":{const B=D;return`${B.key.value}=${Mt(B.value,-1)}`}case"If":{const B=D,te=Mt(B.test,-1),me=Mt(B.body[0],0),Oe=Mt(B.alternate[0],-1);return`${me} if ${te} else ${Oe}`}default:throw new Error(`Unknown expression type: ${D.type}`)}}var Yr=class{constructor(D){Y(this,"parsed");const oe=c(D,{lstrip_blocks:!0,trim_blocks:!0});this.parsed=U(oe)}render(D){const oe=new Be;if(oe.set("false",!1),oe.set("true",!0),oe.set("raise_exception",me=>{throw new Error(me)}),oe.set("range",ee),D)for(const[me,Oe]of Object.entries(D))oe.set(me,Oe);return new He(oe).run(this.parsed).value}format(D){return Ge(this.parsed,(D==null?void 0:D.indent)||"	")}}},"./src/backends/onnx.js":(e,r,t)=>{var s;t.r(r),t.d(r,{Tensor:()=>a.Tensor,createInferenceSession:()=>I,deviceToExecutionProviders:()=>f,isONNXProxy:()=>S,isONNXTensor:()=>g});var o=t("./src/env.js"),n=t("?2ce3"),i=t("onnxruntime-web"),a=t("onnxruntime-common");const l=Object.freeze({auto:null,gpu:null,cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:{name:"webnn",deviceType:"cpu"},"webnn-npu":{name:"webnn",deviceType:"npu"},"webnn-gpu":{name:"webnn",deviceType:"gpu"},"webnn-cpu":{name:"webnn",deviceType:"cpu"}}),u=[];let p,c;const d=Symbol.for("onnxruntime");if(d in globalThis)c=globalThis[d];else if(o.apis.IS_NODE_ENV){switch(c=n??(s||(s=t.t(n,2))),process.platform){case"win32":u.push("dml");break;case"linux":process.arch==="x64"&&u.push("cuda");break}u.push("cpu"),p=["cpu"]}else c=i,o.apis.IS_WEBNN_AVAILABLE&&u.push("webnn-npu","webnn-gpu","webnn-cpu","webnn"),o.apis.IS_WEBGPU_AVAILABLE&&u.push("webgpu"),u.push("wasm"),p=["wasm"];const _=c.InferenceSession;function f(E=null){if(!E)return p;switch(E){case"auto":return u;case"gpu":return u.filter(v=>["webgpu","cuda","dml","webnn-gpu"].includes(v))}if(u.includes(E))return[l[E]??E];throw new Error(`Unsupported device: "${E}". Should be one of: ${u.join(", ")}.`)}let T=null;async function I(E,v,M){T&&await T;const y=_.create(E,v);T??(T=y);const C=await y;return C.config=M,C}function g(E){return E instanceof c.Tensor}const w=c==null?void 0:c.env;w!=null&&w.wasm&&(!(typeof ServiceWorkerGlobalScope<"u"&&self instanceof ServiceWorkerGlobalScope)&&!w.wasm.wasmPaths&&(w.wasm.wasmPaths=`https://cdn.jsdelivr.net/npm/@huggingface/transformers@${o.env.version}/dist/`),w.wasm.proxy=!1),w!=null&&w.webgpu&&(w.webgpu.powerPreference="high-performance");function S(){var E;return(E=w==null?void 0:w.wasm)==null?void 0:E.proxy}o.env.backends.onnx=w},"./src/base/feature_extraction_utils.js":(e,r,t)=>{t.r(r),t.d(r,{FeatureExtractor:()=>i,validate_audio_inputs:()=>a});var s=t("./src/utils/constants.js"),o=t("./src/utils/generic.js"),n=t("./src/utils/hub.js");class i extends o.Callable{constructor(u){super(),this.config=u}static async from_pretrained(u,p){const c=await(0,n.getModelJSON)(u,s.FEATURE_EXTRACTOR_NAME,!0,p);return new this(c)}}function a(l,u){var p;if(!(l instanceof Float32Array||l instanceof Float64Array))throw new Error(`${u} expects input to be a Float32Array or a Float64Array, but got ${((p=l==null?void 0:l.constructor)==null?void 0:p.name)??typeof l} instead. If using the feature extractor directly, remember to use \`read_audio(url, sampling_rate)\` to obtain the raw audio data of the file/url.`)}},"./src/base/image_processors_utils.js":(e,r,t)=>{t.r(r),t.d(r,{ImageProcessor:()=>E,center_to_corners_format:()=>c,post_process_instance_segmentation:()=>S,post_process_object_detection:()=>d,post_process_panoptic_segmentation:()=>w,post_process_semantic_segmentation:()=>_});var s=t("./src/utils/generic.js"),o=t("./src/utils/tensor.js"),n=t("./src/utils/maths.js");t("./src/utils/image.js");var i=t("./src/utils/core.js"),a=t("./src/utils/hub.js"),l=t("./src/utils/constants.js");function u(v,M,y=0,C=null){const F=v/M;let z=(0,n.bankers_round)(F)*M;return C!==null&&z>C&&(z=Math.floor(F)*M),z<y&&(z=Math.ceil(F)*M),z}function p([v,M],y){return[Math.max(Math.floor(v/y),1)*y,Math.max(Math.floor(M/y),1)*y]}function c([v,M,y,C]){return[v-y/2,M-C/2,v+y/2,M+C/2]}function d(v,M=.5,y=null,C=!1){const F=v.logits,z=v.pred_boxes,[K,q,R]=F.dims;if(y!==null&&y.length!==K)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let Z=[];for(let H=0;H<K;++H){let J=y!==null?y[H]:null,Q={boxes:[],classes:[],scores:[]},se=F[H],fe=z[H];for(let ae=0;ae<q;++ae){let V=se[ae],A=[],U;if(C){U=V.sigmoid().data;for(let ee=0;ee<U.length;++ee)U[ee]>M&&A.push(ee)}else{let ee=(0,n.max)(V.data)[1];if(ee===R-1||(U=(0,n.softmax)(V.data),U[ee]<M))continue;A.push(ee)}for(const ee of A){let _e=fe[ae].data;_e=c(_e),J!==null&&(_e=_e.map((le,ye)=>le*J[(ye+1)%2])),Q.boxes.push(_e),Q.classes.push(ee),Q.scores.push(U[ee])}}Z.push(Q)}return Z}function _(v,M=null){const y=v.logits,C=y.dims[0];if(M!==null&&M.length!==C)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const F=[];for(let z=0;z<C;++z){const K=M!==null?M[z]:null;let q=y[z];K!==null&&(q=(0,o.interpolate)(q,K,"bilinear",!1));const[R,Z]=K??q.dims.slice(-2),H=new o.Tensor("int32",new Int32Array(R*Z),[R,Z]),J=q[0].data,Q=H.data;for(let ae=1;ae<q.dims[0];++ae){const V=q[ae].data;for(let A=0;A<V.length;++A)V[A]>J[A]&&(J[A]=V[A],Q[A]=ae)}const se=new Array(q.dims[0]);for(let ae=0;ae<Q.length;++ae){const V=Q[ae];se[V]=V}const fe=se.filter(ae=>ae!==void 0);F.push({segmentation:H,labels:fe})}return F}function f(v,M,y,C){const F=[],z=[],K=[];for(let q=0;q<v.dims[0];++q){const R=v[q],Z=M[q],H=(0,n.max)(R.data)[1];if(H===C)continue;const Q=(0,n.softmax)(R.data)[H];Q>y&&(F.push(Z),z.push(Q),K.push(H))}return[F,z,K]}function T(v,M,y,C=.5,F=.8){const z=[];let K=0,q=0;const R=M[y].data;for(let H=0;H<v.length;++H)v[H]===y&&(z.push(H),++K),R[H]>=C&&++q;let Z=K>0&&q>0;return Z&&(Z=K/q>F),[Z,z]}function I(v,M,y,C,F,z=null,K=null){const[q,R]=K??v[0].dims,Z=new o.Tensor("int32",new Int32Array(q*R),[q,R]),H=[];if(K!==null)for(let ae=0;ae<v.length;++ae)v[ae]=(0,o.interpolate)(v[ae],K,"bilinear",!1);const J=new Int32Array(v[0].data.length),Q=new Float32Array(v[0].data.length);for(let ae=0;ae<v.length;++ae){let V=M[ae];const A=v[ae].data;for(let U=0;U<A.length;++U)A[U]*=V,A[U]>Q[U]&&(J[U]=ae,Q[U]=A[U])}let se=0;const fe=Z.data;for(let ae=0;ae<y.length;++ae){const V=y[ae],[A,U]=T(J,v,ae,C,F);if(A){++se;for(const ee of U)fe[ee]=se;H.push({id:se,label_id:V,score:M[ae]})}}return[Z,H]}function g(v,M,y=28,C=56*56,F=14*14*4*1280){if(v<y||M<y)throw new Error(`height:${v} or width:${M} must be larger than factor:${y}`);if(Math.max(v,M)/Math.min(v,M)>200)throw new Error(`absolute aspect ratio must be smaller than 200, got ${Math.max(v,M)/Math.min(v,M)}`);let z=Math.round(v/y)*y,K=Math.round(M/y)*y;if(z*K>F){const q=Math.sqrt(v*M/F);z=Math.floor(v/q/y)*y,K=Math.floor(M/q/y)*y}else if(z*K<C){const q=Math.sqrt(C/(v*M));z=Math.ceil(v*q/y)*y,K=Math.ceil(M*q/y)*y}return[z,K]}function w(v,M=.5,y=.5,C=.8,F=null,z=null){F===null&&(console.warn("`label_ids_to_fuse` unset. No instance will be fused."),F=new Set);const K=v.class_queries_logits??v.logits,R=(v.masks_queries_logits??v.pred_masks).sigmoid();let[Z,H,J]=K.dims;if(J-=1,z!==null&&z.length!==Z)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let Q=[];for(let se=0;se<Z;++se){let fe=z!==null?z[se]:null,ae=K[se],V=R[se],[A,U,ee]=f(ae,V,M,J);if(ee.length===0){let[ye,ze]=fe??V.dims.slice(-2),Ue=new o.Tensor("int32",new Int32Array(ye*ze).fill(-1),[ye,ze]);Q.push({segmentation:Ue,segments_info:[]});continue}let[_e,le]=I(A,U,ee,y,C,F,fe);Q.push({segmentation:_e,segments_info:le})}return Q}function S(v,M=.5,y=null){throw new Error("`post_process_instance_segmentation` is not yet implemented.")}class E extends s.Callable{constructor(M){super(),this.image_mean=M.image_mean??M.mean,this.image_std=M.image_std??M.std,this.resample=M.resample??2,this.do_rescale=M.do_rescale??!0,this.rescale_factor=M.rescale_factor??1/255,this.do_normalize=M.do_normalize,this.do_thumbnail=M.do_thumbnail,this.size=M.size??M.image_size,this.do_resize=M.do_resize??this.size!==void 0,this.size_divisibility=M.size_divisibility??M.size_divisor,this.do_center_crop=M.do_center_crop,this.crop_size=M.crop_size,this.do_convert_rgb=M.do_convert_rgb??!0,this.do_crop_margin=M.do_crop_margin,this.pad_size=M.pad_size,this.do_pad=M.do_pad,this.min_pixels=M.min_pixels,this.max_pixels=M.max_pixels,this.do_pad&&!this.pad_size&&this.size&&this.size.width!==void 0&&this.size.height!==void 0&&(this.pad_size=this.size),this.do_flip_channel_order=M.do_flip_channel_order??!1,this.config=M}async thumbnail(M,y,C=2){const F=M.height,z=M.width,K=y.height,q=y.width;let R=Math.min(F,K),Z=Math.min(z,q);return R===F&&Z===z?M:(F>z?Z=Math.floor(z*R/F):z>F&&(R=Math.floor(F*Z/z)),await M.resize(Z,R,{resample:C}))}async crop_margin(M,y=200){const C=M.clone().grayscale(),F=(0,n.min)(C.data)[0],K=(0,n.max)(C.data)[0]-F;if(K===0)return M;const q=y/255;let R=C.width,Z=C.height,H=0,J=0;const Q=C.data;for(let se=0;se<C.height;++se){const fe=se*C.width;for(let ae=0;ae<C.width;++ae)(Q[fe+ae]-F)/K<q&&(R=Math.min(R,ae),Z=Math.min(Z,se),H=Math.max(H,ae),J=Math.max(J,se))}return M=await M.crop([R,Z,H,J]),M}pad_image(M,y,C,{mode:F="constant",center:z=!1,constant_values:K=0}={}){const[q,R,Z]=y;let H,J;if(typeof C=="number"?(H=C,J=C):C==="square"?H=J=Math.max(q,R):(H=C.width,J=C.height),H!==R||J!==q){const Q=new Float32Array(H*J*Z);if(Array.isArray(K))for(let ae=0;ae<Q.length;++ae)Q[ae]=K[ae%Z];else K!==0&&Q.fill(K);const[se,fe]=z?[Math.floor((H-R)/2),Math.floor((J-q)/2)]:[0,0];for(let ae=0;ae<q;++ae){const V=(ae+fe)*H,A=ae*R;for(let U=0;U<R;++U){const ee=(V+U+se)*Z,_e=(A+U)*Z;for(let le=0;le<Z;++le)Q[ee+le]=M[_e+le]}}if(F==="symmetric"){if(z)throw new Error("`center` padding is not supported when `mode` is set to `symmetric`.");const ae=q-1,V=R-1;for(let A=0;A<J;++A){const U=A*H,ee=(0,i.calculateReflectOffset)(A,ae)*R;for(let _e=0;_e<H;++_e){if(A<q&&_e<R)continue;const le=(U+_e)*Z,ye=(ee+(0,i.calculateReflectOffset)(_e,V))*Z;for(let ze=0;ze<Z;++ze)Q[le+ze]=M[ye+ze]}}}M=Q,y=[J,H,Z]}return[M,y]}rescale(M){for(let y=0;y<M.length;++y)M[y]=this.rescale_factor*M[y]}get_resize_output_image_size(M,y){const[C,F]=M.size;let z,K;if(this.do_thumbnail){const{height:q,width:R}=y;z=Math.min(q,R)}else Number.isInteger(y)?(z=y,K=this.config.max_size??z):y!==void 0&&(z=y.shortest_edge,K=y.longest_edge);if(z!==void 0||K!==void 0){const q=z===void 0?1:Math.max(z/C,z/F),R=C*q,Z=F*q,H=K===void 0?1:Math.min(K/R,K/Z);let J=Math.floor(Number((R*H).toFixed(2))),Q=Math.floor(Number((Z*H).toFixed(2)));return this.size_divisibility!==void 0&&([J,Q]=p([J,Q],this.size_divisibility)),[J,Q]}else if(y!==void 0&&y.width!==void 0&&y.height!==void 0){let q=y.width,R=y.height;if(this.config.keep_aspect_ratio&&this.config.ensure_multiple_of){let Z=R/F,H=q/C;Math.abs(1-H)<Math.abs(1-Z)?Z=H:H=Z,R=u(Z*F,this.config.ensure_multiple_of),q=u(H*C,this.config.ensure_multiple_of)}return[q,R]}else{if(this.size_divisibility!==void 0)return p([C,F],this.size_divisibility);if(this.min_pixels!==void 0&&this.max_pixels!==void 0){const q=this.config.patch_size*this.config.merge_size;return g(F,C,q,this.min_pixels,this.max_pixels)}else throw new Error(`Could not resize image due to unsupported \`this.size\` option in config: ${JSON.stringify(y)}`)}}async resize(M){const[y,C]=this.get_resize_output_image_size(M,this.size);return await M.resize(y,C,{resample:this.resample})}async preprocess(M,{do_normalize:y=null,do_pad:C=null,do_convert_rgb:F=null,do_convert_grayscale:z=null,do_flip_channel_order:K=null}={}){this.do_crop_margin&&(M=await this.crop_margin(M));const[q,R]=M.size;if(F??this.do_convert_rgb?M=M.rgb():z&&(M=M.grayscale()),this.do_resize&&(M=await this.resize(M)),this.do_thumbnail&&(M=await this.thumbnail(M,this.size,this.resample)),this.do_center_crop){let se,fe;Number.isInteger(this.crop_size)?(se=this.crop_size,fe=this.crop_size):(se=this.crop_size.width,fe=this.crop_size.height),M=await M.center_crop(se,fe)}const Z=[M.height,M.width];let H=Float32Array.from(M.data),J=[M.height,M.width,M.channels];if(this.do_rescale&&this.rescale(H),y??this.do_normalize){let se=this.image_mean;Array.isArray(this.image_mean)||(se=new Array(M.channels).fill(se));let fe=this.image_std;if(Array.isArray(this.image_std)||(fe=new Array(M.channels).fill(se)),se.length!==M.channels||fe.length!==M.channels)throw new Error(`When set to arrays, the length of \`image_mean\` (${se.length}) and \`image_std\` (${fe.length}) must match the number of channels in the image (${M.channels}).`);for(let ae=0;ae<H.length;ae+=M.channels)for(let V=0;V<M.channels;++V)H[ae+V]=(H[ae+V]-se[V])/fe[V]}if(C??this.do_pad){if(this.pad_size)[H,J]=this.pad_image(H,[M.height,M.width,M.channels],this.pad_size);else if(this.size_divisibility){const[se,fe]=p([J[1],J[0]],this.size_divisibility);[H,J]=this.pad_image(H,J,{width:se,height:fe})}}if(K??this.do_flip_channel_order){if(J[2]!==3)throw new Error("Flipping channel order is only supported for RGB images.");for(let se=0;se<H.length;se+=3){const fe=H[se];H[se]=H[se+2],H[se+2]=fe}}const Q=new o.Tensor("float32",H,J).permute(2,0,1);return{original_size:[R,q],reshaped_input_size:Z,pixel_values:Q}}async _call(M,...y){Array.isArray(M)||(M=[M]);const C=await Promise.all(M.map(z=>this.preprocess(z)));return{pixel_values:(0,o.stack)(C.map(z=>z.pixel_values),0),original_sizes:C.map(z=>z.original_size),reshaped_input_sizes:C.map(z=>z.reshaped_input_size)}}static async from_pretrained(M,y){const C=await(0,a.getModelJSON)(M,l.IMAGE_PROCESSOR_NAME,!0,y);return new this(C)}}},"./src/base/processing_utils.js":(e,r,t)=>{t.r(r),t.d(r,{Processor:()=>i});var s=t("./src/utils/constants.js"),o=t("./src/utils/generic.js"),n=t("./src/utils/hub.js");class i extends o.Callable{constructor(l,u){super(),this.config=l,this.components=u}get image_processor(){return this.components.image_processor}get tokenizer(){return this.components.tokenizer}get feature_extractor(){return this.components.feature_extractor}apply_chat_template(l,u={}){if(!this.tokenizer)throw new Error("Unable to apply chat template without a tokenizer.");return this.tokenizer.apply_chat_template(l,{tokenize:!1,...u})}batch_decode(...l){if(!this.tokenizer)throw new Error("Unable to decode without a tokenizer.");return this.tokenizer.batch_decode(...l)}decode(...l){if(!this.tokenizer)throw new Error("Unable to decode without a tokenizer.");return this.tokenizer.decode(...l)}async _call(l,...u){for(const p of[this.image_processor,this.feature_extractor,this.tokenizer])if(p)return p(l,...u);throw new Error("No image processor, feature extractor, or tokenizer found.")}static async from_pretrained(l,u){const[p,c]=await Promise.all([this.uses_processor_config?(0,n.getModelJSON)(l,s.PROCESSOR_NAME,!0,u):{},Promise.all(this.classes.filter(d=>d in this).map(async d=>{const _=await this[d].from_pretrained(l,u);return[d.replace(/_class$/,""),_]})).then(Object.fromEntries)]);return new this(p,c)}}Y(i,"classes",["image_processor_class","tokenizer_class","feature_extractor_class"]),Y(i,"uses_processor_config",!1)},"./src/configs.js":(e,r,t)=>{t.r(r),t.d(r,{AutoConfig:()=>u,PretrainedConfig:()=>l,getKeyValueShapes:()=>a});var s=t("./src/utils/core.js"),o=t("./src/utils/hub.js");async function n(p,c){return await(0,o.getModelJSON)(p,"config.json",!0,c)}function i(p){const c={};let d={};switch(p.model_type){case"llava":case"paligemma":case"gemma3":case"florence2":case"llava_onevision":case"idefics3":case"ultravox":case"smolvlm":d=i(p.text_config);break;case"moondream1":d=i(p.phi_config);break;case"musicgen":d=i(p.decoder);break;case"multi_modality":d=i(p.language_config);break;case"gpt2":case"gptj":case"jais":case"codegen":case"gpt_bigcode":c.num_heads="n_head",c.num_layers="n_layer",c.hidden_size="n_embd";break;case"gpt_neox":case"stablelm":case"opt":case"falcon":c.num_heads="num_attention_heads",c.num_layers="num_hidden_layers",c.hidden_size="hidden_size";break;case"llama":case"olmo":case"olmo2":case"mobilellm":case"granite":case"cohere":case"mistral":case"starcoder2":case"qwen2":case"qwen2_vl":case"phi":case"phi3":case"phi3_v":c.num_heads="num_key_value_heads",c.num_layers="num_hidden_layers",c.hidden_size="hidden_size",c.num_attention_heads="num_attention_heads";break;case"qwen3":case"gemma":case"gemma2":case"gemma3_text":case"glm":case"helium":c.num_heads="num_key_value_heads",c.num_layers="num_hidden_layers",c.dim_kv="head_dim";break;case"openelm":c.num_heads="num_kv_heads",c.num_layers="num_transformer_layers",c.dim_kv="head_dim";break;case"gpt_neo":case"donut-swin":c.num_heads="num_heads",c.num_layers="num_layers",c.hidden_size="hidden_size";break;case"bloom":c.num_heads="n_head",c.num_layers="n_layer",c.hidden_size="hidden_size";break;case"mpt":c.num_heads="n_heads",c.num_layers="n_layers",c.hidden_size="d_model";break;case"exaone":c.num_heads="num_key_value_heads",c.num_layers="num_layers",c.dim_kv="head_dim",c.num_attention_heads="num_attention_heads";break;case"t5":case"mt5":case"longt5":c.num_decoder_layers="num_decoder_layers",c.num_decoder_heads="num_heads",c.decoder_dim_kv="d_kv",c.num_encoder_layers="num_layers",c.num_encoder_heads="num_heads",c.encoder_dim_kv="d_kv";break;case"bart":case"mbart":case"marian":case"whisper":case"lite-whisper":case"m2m_100":case"blenderbot":case"blenderbot-small":case"florence2_language":c.num_decoder_layers="decoder_layers",c.num_decoder_heads="decoder_attention_heads",c.decoder_hidden_size="d_model",c.num_encoder_layers="encoder_layers",c.num_encoder_heads="encoder_attention_heads",c.encoder_hidden_size="d_model";break;case"speecht5":c.num_decoder_layers="decoder_layers",c.num_decoder_heads="decoder_attention_heads",c.decoder_hidden_size="hidden_size",c.num_encoder_layers="encoder_layers",c.num_encoder_heads="encoder_attention_heads",c.encoder_hidden_size="hidden_size";break;case"trocr":c.num_encoder_layers=c.num_decoder_layers="decoder_layers",c.num_encoder_heads=c.num_decoder_heads="decoder_attention_heads",c.encoder_hidden_size=c.decoder_hidden_size="d_model";break;case"musicgen_decoder":c.num_encoder_layers=c.num_decoder_layers="num_hidden_layers",c.num_encoder_heads=c.num_decoder_heads="num_attention_heads",c.encoder_hidden_size=c.decoder_hidden_size="hidden_size";break;case"moonshine":c.num_decoder_layers="decoder_num_hidden_layers",c.num_decoder_heads="decoder_num_key_value_heads",c.num_encoder_layers="encoder_num_hidden_layers",c.num_encoder_heads="encoder_num_key_value_heads",c.encoder_hidden_size=c.decoder_hidden_size="hidden_size";break;case"vision-encoder-decoder":const f=i(p.decoder),T="num_decoder_layers"in f,I=(0,s.pick)(p,["model_type","is_encoder_decoder"]);return T?(I.num_decoder_layers=f.num_decoder_layers,I.num_decoder_heads=f.num_decoder_heads,I.decoder_hidden_size=f.decoder_hidden_size,I.num_encoder_layers=f.num_encoder_layers,I.num_encoder_heads=f.num_encoder_heads,I.encoder_hidden_size=f.encoder_hidden_size):(I.num_layers=f.num_layers,I.num_heads=f.num_heads,I.hidden_size=f.hidden_size),I}const _={...d,...(0,s.pick)(p,["model_type","multi_query","is_encoder_decoder"])};for(const f in c)_[f]=p[c[f]];return _}function a(p,{prefix:c="past_key_values",batch_size:d=1}={}){const _={},f=p.normalized_config;if(f.is_encoder_decoder&&"num_encoder_heads"in f&&"num_decoder_heads"in f){const T=f.encoder_dim_kv??f.encoder_hidden_size/f.num_encoder_heads,I=f.decoder_dim_kv??f.decoder_hidden_size/f.num_decoder_heads,g=[d,f.num_encoder_heads,0,T],w=[d,f.num_decoder_heads,0,I];for(let S=0;S<f.num_decoder_layers;++S)_[`${c}.${S}.encoder.key`]=g,_[`${c}.${S}.encoder.value`]=g,_[`${c}.${S}.decoder.key`]=w,_[`${c}.${S}.decoder.value`]=w}else{const T=f.num_heads,I=f.num_layers,g=f.dim_kv??f.hidden_size/(f.num_attention_heads??T);if(f.model_type==="falcon"){const w=[d*T,0,g];for(let S=0;S<I;++S)_[`${c}.${S}.key`]=w,_[`${c}.${S}.value`]=w}else if(f.multi_query){const w=[d*T,0,2*g];for(let S=0;S<I;++S)_[`${c}.${S}.key_value`]=w}else if(f.model_type==="bloom"){const w=[d*T,g,0],S=[d*T,0,g];for(let E=0;E<I;++E)_[`${c}.${E}.key`]=w,_[`${c}.${E}.value`]=S}else if(f.model_type==="openelm")for(let w=0;w<I;++w){const S=[d,T[w],0,g];_[`${c}.${w}.key`]=S,_[`${c}.${w}.value`]=S}else{const w=[d,T,0,g];for(let S=0;S<I;++S)_[`${c}.${S}.key`]=w,_[`${c}.${S}.value`]=w}}return _}class l{constructor(c){Y(this,"model_type",null);Y(this,"is_encoder_decoder",!1);Y(this,"max_position_embeddings");Y(this,"transformers.js_config");Object.assign(this,c),this.normalized_config=i(this)}static async from_pretrained(c,{progress_callback:d=null,config:_=null,cache_dir:f=null,local_files_only:T=!1,revision:I="main"}={}){_&&!(_ instanceof l)&&(_=new l(_));const g=_??await n(c,{progress_callback:d,config:_,cache_dir:f,local_files_only:T,revision:I});return new this(g)}}class u{static async from_pretrained(...c){return l.from_pretrained(...c)}}},"./src/env.js":(e,r,t)=>{var C,F;t.r(r),t.d(r,{apis:()=>I,env:()=>M});var s=t("?569f"),o=t("?3f59"),n=t("?154a");const i="3.5.2",a=typeof window<"u"&&typeof window.document<"u",l=typeof self<"u"&&((C=self.constructor)==null?void 0:C.name)==="DedicatedWorkerGlobalScope",u=typeof self<"u"&&"caches"in self,p=typeof navigator<"u"&&"gpu"in navigator,c=typeof navigator<"u"&&"ml"in navigator,d=typeof process<"u",_=d&&((F=process==null?void 0:process.release)==null?void 0:F.name)==="node",f=!y(s),T=!y(o),I=Object.freeze({IS_BROWSER_ENV:a,IS_WEBWORKER_ENV:l,IS_WEB_CACHE_AVAILABLE:u,IS_WEBGPU_AVAILABLE:p,IS_WEBNN_AVAILABLE:c,IS_PROCESS_AVAILABLE:d,IS_NODE_ENV:_,IS_FS_AVAILABLE:f,IS_PATH_AVAILABLE:T}),g=f&&T;let w="./";if(g){const z=Object(import.meta).url;z?w=o.dirname(o.dirname(n.fileURLToPath(z))):typeof __dirname<"u"&&(w=o.dirname(__dirname))}const S=g?o.join(w,"/.cache/"):null,E="/models/",v=g?o.join(w,E):E,M={version:i,backends:{onnx:{}},allowRemoteModels:!0,remoteHost:"https://huggingface.co/",remotePathTemplate:"{model}/resolve/{revision}/",allowLocalModels:!(a||l),localModelPath:v,useFS:f,useBrowserCache:u,useFSCache:f,cacheDir:S,useCustomCache:!1,customCache:null};function y(z){return Object.keys(z).length===0}},"./src/generation/configuration_utils.js":(e,r,t)=>{t.r(r),t.d(r,{GenerationConfig:()=>o});var s=t("./src/utils/core.js");class o{constructor(i){Y(this,"max_length",20);Y(this,"max_new_tokens",null);Y(this,"min_length",0);Y(this,"min_new_tokens",null);Y(this,"early_stopping",!1);Y(this,"max_time",null);Y(this,"do_sample",!1);Y(this,"num_beams",1);Y(this,"num_beam_groups",1);Y(this,"penalty_alpha",null);Y(this,"use_cache",!0);Y(this,"temperature",1);Y(this,"top_k",50);Y(this,"top_p",1);Y(this,"typical_p",1);Y(this,"epsilon_cutoff",0);Y(this,"eta_cutoff",0);Y(this,"diversity_penalty",0);Y(this,"repetition_penalty",1);Y(this,"encoder_repetition_penalty",1);Y(this,"length_penalty",1);Y(this,"no_repeat_ngram_size",0);Y(this,"bad_words_ids",null);Y(this,"force_words_ids",null);Y(this,"renormalize_logits",!1);Y(this,"constraints",null);Y(this,"forced_bos_token_id",null);Y(this,"forced_eos_token_id",null);Y(this,"remove_invalid_values",!1);Y(this,"exponential_decay_length_penalty",null);Y(this,"suppress_tokens",null);Y(this,"streamer",null);Y(this,"begin_suppress_tokens",null);Y(this,"forced_decoder_ids",null);Y(this,"guidance_scale",null);Y(this,"num_return_sequences",1);Y(this,"output_attentions",!1);Y(this,"output_hidden_states",!1);Y(this,"output_scores",!1);Y(this,"return_dict_in_generate",!1);Y(this,"pad_token_id",null);Y(this,"bos_token_id",null);Y(this,"eos_token_id",null);Y(this,"encoder_no_repeat_ngram_size",0);Y(this,"decoder_start_token_id",null);Y(this,"generation_kwargs",{});Object.assign(this,(0,s.pick)(i,Object.getOwnPropertyNames(this)))}}},"./src/generation/logits_process.js":(e,r,t)=>{t.r(r),t.d(r,{ClassifierFreeGuidanceLogitsProcessor:()=>g,ForcedBOSTokenLogitsProcessor:()=>l,ForcedEOSTokenLogitsProcessor:()=>u,LogitsProcessor:()=>n,LogitsProcessorList:()=>a,LogitsWarper:()=>i,MinLengthLogitsProcessor:()=>f,MinNewTokensLengthLogitsProcessor:()=>T,NoBadWordsLogitsProcessor:()=>I,NoRepeatNGramLogitsProcessor:()=>d,RepetitionPenaltyLogitsProcessor:()=>_,SuppressTokensAtBeginLogitsProcessor:()=>p,TemperatureLogitsWarper:()=>w,TopKLogitsWarper:()=>E,TopPLogitsWarper:()=>S,WhisperTimeStampLogitsProcessor:()=>c});var s=t("./src/utils/generic.js");t("./src/utils/tensor.js");var o=t("./src/utils/maths.js");class n extends s.Callable{_call(M,y){throw Error("`_call` should be implemented in a subclass")}}class i extends s.Callable{_call(M,y){throw Error("`_call` should be implemented in a subclass")}}class a extends s.Callable{constructor(){super(),this.processors=[]}push(M){this.processors.push(M)}extend(M){this.processors.push(...M)}_call(M,y){let C=y;for(const F of this.processors)C=F(M,C);return C}[Symbol.iterator](){return this.processors.values()}}class l extends n{constructor(M){super(),this.bos_token_id=M}_call(M,y){for(let C=0;C<M.length;++C)if(M[C].length===1){const F=y[C].data;F.fill(-1/0),F[this.bos_token_id]=0}return y}}class u extends n{constructor(M,y){super(),this.max_length=M,this.eos_token_id=Array.isArray(y)?y:[y]}_call(M,y){for(let C=0;C<M.length;++C)if(M[C].length===this.max_length-1){const F=y[C].data;F.fill(-1/0);for(const z of this.eos_token_id)F[z]=0}return y}}class p extends n{constructor(M,y){super(),this.begin_suppress_tokens=M,this.begin_index=y}_call(M,y){for(let C=0;C<M.length;++C)if(M[C].length===this.begin_index){const F=y[C].data;for(const z of this.begin_suppress_tokens)F[z]=-1/0}return y}}class c extends n{constructor(M,y){super(),this.eos_token_id=Array.isArray(M.eos_token_id)?M.eos_token_id[0]:M.eos_token_id,this.no_timestamps_token_id=M.no_timestamps_token_id,this.timestamp_begin=this.no_timestamps_token_id+1,this.begin_index=y.length,y.at(-1)===this.no_timestamps_token_id&&(this.begin_index-=1),this.max_initial_timestamp_index=M.max_initial_timestamp_index}_call(M,y){for(let C=0;C<M.length;++C){const F=y[C].data;if(F[this.no_timestamps_token_id]=-1/0,M[C].length===this.begin_index-1){F.fill(-1/0),F[this.timestamp_begin]=0;continue}const z=M[C].slice(this.begin_index),K=z.length>=1&&z[z.length-1]>=this.timestamp_begin,q=z.length<2||z[z.length-2]>=this.timestamp_begin;if(K&&(q?F.subarray(this.timestamp_begin).fill(-1/0):F.subarray(0,this.eos_token_id).fill(-1/0)),M[C].length===this.begin_index&&this.max_initial_timestamp_index!==null){const J=this.timestamp_begin+this.max_initial_timestamp_index;F.subarray(J+1).fill(-1/0)}const R=(0,o.log_softmax)(F),Z=Math.log(R.subarray(this.timestamp_begin).map(Math.exp).reduce((J,Q)=>J+Q)),H=(0,o.max)(R.subarray(0,this.timestamp_begin))[0];Z>H&&F.subarray(0,this.timestamp_begin).fill(-1/0)}return y}}class d extends n{constructor(M){super(),this.no_repeat_ngram_size=M}getNgrams(M){const y=M.length,C=[];for(let z=0;z<y+1-this.no_repeat_ngram_size;++z){const K=[];for(let q=0;q<this.no_repeat_ngram_size;++q)K.push(M[z+q]);C.push(K.map(Number))}const F=new Map;for(const z of C){const K=z.slice(0,z.length-1),q=JSON.stringify(K),R=F.get(q)??[];R.push(z[z.length-1]),F.set(q,R)}return F}getGeneratedNgrams(M,y){const C=y.slice(y.length+1-this.no_repeat_ngram_size,y.length);return M.get(JSON.stringify(C.map(Number)))??[]}calcBannedNgramTokens(M){const y=[];if(M.length+1<this.no_repeat_ngram_size)return y;{const C=this.getNgrams(M);return this.getGeneratedNgrams(C,M)}}_call(M,y){for(let C=0;C<M.length;++C){const F=y[C].data,z=this.calcBannedNgramTokens(M[C]);for(const K of z)F[K]=-1/0}return y}}class _ extends n{constructor(M){super(),this.penalty=M}_call(M,y){for(let C=0;C<M.length;++C){const F=y[C].data;for(const z of new Set(M[C])){const K=Number(z);F[K]<0?F[K]*=this.penalty:F[K]/=this.penalty}}return y}}class f extends n{constructor(M,y){super(),this.min_length=M,this.eos_token_id=Array.isArray(y)?y:[y]}_call(M,y){for(let C=0;C<M.length;++C)if(M[C].length<this.min_length){const F=y[C].data;for(const z of this.eos_token_id)F[z]=-1/0}return y}}class T extends n{constructor(M,y,C){super(),this.prompt_length_to_skip=M,this.min_new_tokens=y,this.eos_token_id=Array.isArray(C)?C:[C]}_call(M,y){for(let C=0;C<M.length;++C)if(M[C].length-this.prompt_length_to_skip<this.min_new_tokens){const z=y[C].data;for(const K of this.eos_token_id)z[K]=-1/0}return y}}class I extends n{constructor(M,y){super(),this.bad_words_ids=M,this.eos_token_id=Array.isArray(y)?y:[y]}_call(M,y){for(let C=0;C<M.length;++C){const F=y[C].data,z=M[C];for(const K of this.bad_words_ids){if(z.length<K.length-1)continue;let q=!0;for(let R=1;R<=K.length-1;++R)if(K.at(-R-1)!=z.at(-R)){q=!1;break}q&&(F[K.at(-1)]=-1/0)}}return y}}class g extends n{constructor(M){if(super(),M<=1)throw new Error(`Require guidance scale >1 to use the classifier free guidance processor, got guidance scale ${M}.`);this.guidance_scale=M}_call(M,y){if(y.dims[0]!==2*M.length)throw new Error(`Logits should have twice the batch size of the input ids, the first half of batches corresponding to the conditional inputs, and the second half of batches corresponding to the unconditional inputs. Got batch size ${y.dims[0]} for the logits and ${M.length} for the input ids.`);const C=M.length,F=y.slice([0,C],null),z=y.slice([C,y.dims[0]],null);for(let K=0;K<z.data.length;++K)z.data[K]+=(F.data[K]-z.data[K])*this.guidance_scale;return z}}class w extends i{constructor(M){super(),this.temperature=M}_call(M,y){const C=y.data;for(let F=0;F<C.length;++F)C[F]/=this.temperature;return y}}class S extends i{constructor(M,{filter_value:y=-1/0,min_tokens_to_keep:C=1}={}){if(super(),M<0||M>1)throw new Error(`\`top_p\` must be a float > 0 and < 1, but is ${M}`);if(!Number.isInteger(C)||C<1)throw new Error(`\`min_tokens_to_keep\` must be a positive integer, but is ${C}`);this.top_p=M,this.filter_value=y,this.min_tokens_to_keep=C}}class E extends i{constructor(M,{filter_value:y=-1/0,min_tokens_to_keep:C=1}={}){if(super(),!Number.isInteger(M)||M<0)throw new Error(`\`top_k\` must be a positive integer, but is ${M}`);this.top_k=Math.max(M,C),this.filter_value=y}}},"./src/generation/logits_sampler.js":(e,r,t)=>{t.r(r),t.d(r,{LogitsSampler:()=>i});var s=t("./src/utils/generic.js"),o=t("./src/utils/tensor.js"),n=t("./src/utils/maths.js");t("./src/generation/configuration_utils.js");class i extends s.Callable{constructor(c){super(),this.generation_config=c}async _call(c){return this.sample(c)}async sample(c){throw Error("sample should be implemented in subclasses.")}getLogits(c,d){let _=c.dims.at(-1),f=c.data;if(d===-1)f=f.slice(-_);else{let T=d*_;f=f.slice(T,T+_)}return f}randomSelect(c){let d=0;for(let f=0;f<c.length;++f)d+=c[f];let _=Math.random()*d;for(let f=0;f<c.length;++f)if(_-=c[f],_<=0)return f;return 0}static getSampler(c){if(c.do_sample)return new l(c);if(c.num_beams>1)return new u(c);if(c.num_return_sequences>1)throw Error(`num_return_sequences has to be 1 when doing greedy search, but is ${c.num_return_sequences}.`);return new a(c)}}class a extends i{async sample(c){const d=(0,n.max)(c.data)[1];return[[BigInt(d),0]]}}class l extends i{async sample(c){let d=c.dims.at(-1);this.generation_config.top_k>0&&(d=Math.min(this.generation_config.top_k,d));const[_,f]=await(0,o.topk)(c,d),T=(0,n.softmax)(_.data);return Array.from({length:this.generation_config.num_beams},()=>{const I=this.randomSelect(T);return[f.data[I],Math.log(T[I])]})}}class u extends i{async sample(c){let d=c.dims.at(-1);this.generation_config.top_k>0&&(d=Math.min(this.generation_config.top_k,d));const[_,f]=await(0,o.topk)(c,d),T=(0,n.softmax)(_.data);return Array.from({length:this.generation_config.num_beams},(I,g)=>[f.data[g],Math.log(T[g])])}}},"./src/generation/stopping_criteria.js":(e,r,t)=>{t.r(r),t.d(r,{EosTokenCriteria:()=>a,InterruptableStoppingCriteria:()=>l,MaxLengthCriteria:()=>i,StoppingCriteria:()=>o,StoppingCriteriaList:()=>n});var s=t("./src/utils/generic.js");class o extends s.Callable{_call(p,c){throw Error("StoppingCriteria needs to be subclassed")}}class n extends s.Callable{constructor(){super(),this.criteria=[]}push(p){this.criteria.push(p)}extend(p){p instanceof n?p=p.criteria:p instanceof o&&(p=[p]),this.criteria.push(...p)}_call(p,c){const d=new Array(p.length).fill(!1);for(const _ of this.criteria){const f=_(p,c);for(let T=0;T<d.length;++T)d[T]||(d[T]=f[T])}return d}[Symbol.iterator](){return this.criteria.values()}}class i extends o{constructor(p,c=null){super(),this.max_length=p,this.max_position_embeddings=c}_call(p){return p.map(c=>c.length>=this.max_length)}}class a extends o{constructor(p){super(),Array.isArray(p)||(p=[p]),this.eos_token_id=p}_call(p,c){return p.map(d=>{const _=d.at(-1);return this.eos_token_id.some(f=>_==f)})}}class l extends o{constructor(){super(),this.interrupted=!1}interrupt(){this.interrupted=!0}reset(){this.interrupted=!1}_call(p,c){return new Array(p.length).fill(this.interrupted)}}},"./src/generation/streamers.js":(e,r,t)=>{t.r(r),t.d(r,{BaseStreamer:()=>i,TextStreamer:()=>l,WhisperTextStreamer:()=>u});var s=t("./src/utils/core.js"),o=t("./src/tokenizers.js"),n=t("./src/env.js");class i{put(c){throw Error("Not implemented")}end(){throw Error("Not implemented")}}const a=n.apis.IS_PROCESS_AVAILABLE?p=>process.stdout.write(p):p=>console.log(p);class l extends i{constructor(c,{skip_prompt:d=!1,callback_function:_=null,token_callback_function:f=null,skip_special_tokens:T=!0,decode_kwargs:I={},...g}={}){super(),this.tokenizer=c,this.skip_prompt=d,this.callback_function=_??a,this.token_callback_function=f,this.decode_kwargs={skip_special_tokens:T,...I,...g},this.token_cache=[],this.print_len=0,this.next_tokens_are_prompt=!0}put(c){var I;if(c.length>1)throw Error("TextStreamer only supports batch size of 1");const d=this.next_tokens_are_prompt;if(d&&(this.next_tokens_are_prompt=!1,this.skip_prompt))return;const _=c[0];(I=this.token_callback_function)==null||I.call(this,_),this.token_cache=(0,s.mergeArrays)(this.token_cache,_);const f=this.tokenizer.decode(this.token_cache,this.decode_kwargs);let T;d||f.endsWith(`
`)?(T=f.slice(this.print_len),this.token_cache=[],this.print_len=0):f.length>0&&(0,o.is_chinese_char)(f.charCodeAt(f.length-1))?(T=f.slice(this.print_len),this.print_len+=T.length):(T=f.slice(this.print_len,f.lastIndexOf(" ")+1),this.print_len+=T.length),this.on_finalized_text(T,!1)}end(){let c;this.token_cache.length>0?(c=this.tokenizer.decode(this.token_cache,this.decode_kwargs).slice(this.print_len),this.token_cache=[],this.print_len=0):c="",this.next_tokens_are_prompt=!0,this.on_finalized_text(c,!0)}on_finalized_text(c,d){var _,f;c.length>0&&((_=this.callback_function)==null||_.call(this,c)),d&&this.callback_function===a&&n.apis.IS_PROCESS_AVAILABLE&&((f=this.callback_function)==null||f.call(this,`
`))}}class u extends l{constructor(c,{skip_prompt:d=!1,callback_function:_=null,token_callback_function:f=null,on_chunk_start:T=null,on_chunk_end:I=null,on_finalize:g=null,time_precision:w=.02,skip_special_tokens:S=!0,decode_kwargs:E={}}={}){super(c,{skip_prompt:d,skip_special_tokens:S,callback_function:_,token_callback_function:f,decode_kwargs:E}),this.timestamp_begin=c.timestamp_begin,this.on_chunk_start=T,this.on_chunk_end=I,this.on_finalize=g,this.time_precision=w,this.waiting_for_timestamp=!1}put(c){var _,f,T;if(c.length>1)throw Error("WhisperTextStreamer only supports batch size of 1");const d=c[0];if(d.length===1){const I=Number(d[0])-this.timestamp_begin;if(I>=0){const g=I*this.time_precision;this.waiting_for_timestamp?(_=this.on_chunk_end)==null||_.call(this,g):(f=this.on_chunk_start)==null||f.call(this,g),this.waiting_for_timestamp=!this.waiting_for_timestamp,(T=this.token_callback_function)==null||T.call(this,d);return}}return super.put(c)}end(){var c;super.end(),(c=this.on_finalize)==null||c.call(this)}}},"./src/models.js":(e,r,t)=>{t.r(r),t.d(r,{ASTForAudioClassification:()=>ai,ASTModel:()=>ii,ASTPreTrainedModel:()=>no,AlbertForMaskedLM:()=>X,AlbertForQuestionAnswering:()=>j,AlbertForSequenceClassification:()=>$,AlbertModel:()=>de,AlbertPreTrainedModel:()=>As,AutoModel:()=>yl,AutoModelForAudioClassification:()=>nf,AutoModelForAudioFrameClassification:()=>af,AutoModelForAudioTextToText:()=>_f,AutoModelForCTC:()=>sf,AutoModelForCausalLM:()=>Km,AutoModelForDepthEstimation:()=>df,AutoModelForDocumentQuestionAnswering:()=>lf,AutoModelForImageClassification:()=>Xm,AutoModelForImageFeatureExtraction:()=>mf,AutoModelForImageMatting:()=>uf,AutoModelForImageSegmentation:()=>Jm,AutoModelForImageTextToText:()=>ff,AutoModelForImageToImage:()=>cf,AutoModelForMaskGeneration:()=>rf,AutoModelForMaskedLM:()=>Hm,AutoModelForNormalEstimation:()=>pf,AutoModelForObjectDetection:()=>ef,AutoModelForPoseEstimation:()=>hf,AutoModelForQuestionAnswering:()=>qm,AutoModelForSemanticSegmentation:()=>Ym,AutoModelForSeq2SeqLM:()=>Vm,AutoModelForSequenceClassification:()=>jm,AutoModelForSpeechSeq2Seq:()=>Um,AutoModelForTextToSpectrogram:()=>Wm,AutoModelForTextToWaveform:()=>Gm,AutoModelForTokenClassification:()=>Nm,AutoModelForUniversalSegmentation:()=>Zm,AutoModelForVision2Seq:()=>Qm,AutoModelForXVector:()=>of,AutoModelForZeroShotObjectDetection:()=>tf,BartForConditionalGeneration:()=>Ut,BartForSequenceClassification:()=>mr,BartModel:()=>Jt,BartPretrainedModel:()=>At,BaseModelOutput:()=>we,BeitForImageClassification:()=>vd,BeitModel:()=>yd,BeitPreTrainedModel:()=>Ba,BertForMaskedLM:()=>$e,BertForQuestionAnswering:()=>He,BertForSequenceClassification:()=>Fe,BertForTokenClassification:()=>Be,BertModel:()=>Pe,BertPreTrainedModel:()=>Se,BlenderbotForConditionalGeneration:()=>Dr,BlenderbotModel:()=>fr,BlenderbotPreTrainedModel:()=>Kt,BlenderbotSmallForConditionalGeneration:()=>Ir,BlenderbotSmallModel:()=>Hr,BlenderbotSmallPreTrainedModel:()=>Kr,BloomForCausalLM:()=>Wc,BloomModel:()=>Uc,BloomPreTrainedModel:()=>Pa,CLIPModel:()=>_i,CLIPPreTrainedModel:()=>Ds,CLIPSegForImageSegmentation:()=>Mo,CLIPSegModel:()=>wo,CLIPSegPreTrainedModel:()=>Bn,CLIPTextModel:()=>fa,CLIPTextModelWithProjection:()=>gi,CLIPVisionModel:()=>_a,CLIPVisionModelWithProjection:()=>wi,CamembertForMaskedLM:()=>rt,CamembertForQuestionAnswering:()=>wr,CamembertForSequenceClassification:()=>Bt,CamembertForTokenClassification:()=>Ht,CamembertModel:()=>lt,CamembertPreTrainedModel:()=>ht,CausalLMOutput:()=>gn,CausalLMOutputWithPast:()=>rv,ChineseCLIPModel:()=>zn,ChineseCLIPPreTrainedModel:()=>bi,ClapAudioModelWithProjection:()=>vh,ClapModel:()=>bh,ClapPreTrainedModel:()=>$i,ClapTextModelWithProjection:()=>yh,CodeGenForCausalLM:()=>Un,CodeGenModel:()=>fn,CodeGenPreTrainedModel:()=>Vn,CohereForCausalLM:()=>Tc,CohereModel:()=>xc,CoherePreTrainedModel:()=>ga,ConvBertForMaskedLM:()=>Yr,ConvBertForQuestionAnswering:()=>B,ConvBertForSequenceClassification:()=>D,ConvBertForTokenClassification:()=>oe,ConvBertModel:()=>Mt,ConvBertPreTrainedModel:()=>or,ConvNextForImageClassification:()=>_p,ConvNextModel:()=>fp,ConvNextPreTrainedModel:()=>Za,ConvNextV2ForImageClassification:()=>wp,ConvNextV2Model:()=>gp,ConvNextV2PreTrainedModel:()=>el,DFineForObjectDetection:()=>Dd,DFineModel:()=>Od,DFinePreTrainedModel:()=>Wa,DPTForDepthEstimation:()=>Jd,DPTModel:()=>Xd,DPTPreTrainedModel:()=>Xa,DacDecoderModel:()=>cm,DacDecoderOutput:()=>am,DacEncoderModel:()=>um,DacEncoderOutput:()=>im,DacModel:()=>lm,DacPreTrainedModel:()=>Li,DebertaForMaskedLM:()=>Zr,DebertaForQuestionAnswering:()=>Ps,DebertaForSequenceClassification:()=>cs,DebertaForTokenClassification:()=>es,DebertaModel:()=>Or,DebertaPreTrainedModel:()=>Xt,DebertaV2ForMaskedLM:()=>Gr,DebertaV2ForQuestionAnswering:()=>$s,DebertaV2ForSequenceClassification:()=>ds,DebertaV2ForTokenClassification:()=>Ss,DebertaV2Model:()=>Cs,DebertaV2PreTrainedModel:()=>jr,DecisionTransformerModel:()=>Uh,DecisionTransformerPreTrainedModel:()=>Vh,DeiTForImageClassification:()=>jd,DeiTModel:()=>Rd,DeiTPreTrainedModel:()=>Ka,DepthAnythingForDepthEstimation:()=>Zd,DepthAnythingPreTrainedModel:()=>Yd,DepthProForDepthEstimation:()=>np,DepthProPreTrainedModel:()=>sp,DetrForObjectDetection:()=>Td,DetrForSegmentation:()=>Ra,DetrModel:()=>xd,DetrObjectDetectionOutput:()=>ja,DetrPreTrainedModel:()=>xi,DetrSegmentationOutput:()=>Ed,Dinov2ForImageClassification:()=>bp,Dinov2Model:()=>Mp,Dinov2PreTrainedModel:()=>tl,Dinov2WithRegistersForImageClassification:()=>vp,Dinov2WithRegistersModel:()=>yp,Dinov2WithRegistersPreTrainedModel:()=>rl,DistilBertForMaskedLM:()=>Ae,DistilBertForQuestionAnswering:()=>zr,DistilBertForSequenceClassification:()=>Tr,DistilBertForTokenClassification:()=>ps,DistilBertModel:()=>Is,DistilBertPreTrainedModel:()=>ir,DonutSwinModel:()=>mp,DonutSwinPreTrainedModel:()=>hp,EfficientNetForImageClassification:()=>$h,EfficientNetModel:()=>Sh,EfficientNetPreTrainedModel:()=>pl,ElectraForMaskedLM:()=>Oe,ElectraForQuestionAnswering:()=>Ft,ElectraForSequenceClassification:()=>ve,ElectraForTokenClassification:()=>yt,ElectraModel:()=>me,ElectraPreTrainedModel:()=>te,EsmForMaskedLM:()=>Rt,EsmForSequenceClassification:()=>ts,EsmForTokenClassification:()=>rs,EsmModel:()=>it,EsmPreTrainedModel:()=>Je,ExaoneForCausalLM:()=>N,ExaoneModel:()=>L,ExaonePreTrainedModel:()=>k,FalconForCausalLM:()=>Mh,FalconModel:()=>wh,FalconPreTrainedModel:()=>ul,FastViTForImageClassification:()=>cd,FastViTModel:()=>ud,FastViTPreTrainedModel:()=>Fa,Florence2ForConditionalGeneration:()=>pi,Florence2PreTrainedModel:()=>co,GLPNForDepthEstimation:()=>pp,GLPNModel:()=>dp,GLPNPreTrainedModel:()=>Ya,GPT2LMHeadModel:()=>vo,GPT2Model:()=>yo,GPT2PreTrainedModel:()=>bo,GPTBigCodeForCausalLM:()=>Co,GPTBigCodeModel:()=>Po,GPTBigCodePreTrainedModel:()=>mn,GPTJForCausalLM:()=>Eo,GPTJModel:()=>To,GPTJPreTrainedModel:()=>Nn,GPTNeoForCausalLM:()=>pn,GPTNeoModel:()=>xo,GPTNeoPreTrainedModel:()=>Rn,GPTNeoXForCausalLM:()=>jn,GPTNeoXModel:()=>hn,GPTNeoXPreTrainedModel:()=>Ur,Gemma2ForCausalLM:()=>Sc,Gemma2Model:()=>Cc,Gemma2PreTrainedModel:()=>Ma,Gemma3ForCausalLM:()=>Ic,Gemma3Model:()=>$c,Gemma3PreTrainedModel:()=>ba,GemmaForCausalLM:()=>Pc,GemmaModel:()=>Ec,GemmaPreTrainedModel:()=>wa,GlmForCausalLM:()=>x,GlmModel:()=>h,GlmPreTrainedModel:()=>Gn,GraniteForCausalLM:()=>vc,GraniteModel:()=>vi,GranitePreTrainedModel:()=>Fs,GroundingDinoForObjectDetection:()=>Tp,GroundingDinoPreTrainedModel:()=>xp,GroupViTModel:()=>ld,GroupViTPreTrainedModel:()=>ad,HeliumForCausalLM:()=>ko,HeliumModel:()=>Io,HeliumPreTrainedModel:()=>Wn,HieraForImageClassification:()=>Vd,HieraModel:()=>Nd,HieraPreTrainedModel:()=>Ha,HubertForCTC:()=>eh,HubertForSequenceClassification:()=>th,HubertModel:()=>Zp,HubertPreTrainedModel:()=>V0,IJepaForImageClassification:()=>Yc,IJepaModel:()=>Jc,IJepaPreTrainedModel:()=>Ia,Idefics3ForConditionalGeneration:()=>dn,Idefics3PreTrainedModel:()=>Ln,ImageMattingOutput:()=>wf,JAISLMHeadModel:()=>yi,JAISModel:()=>ct,JAISPreTrainedModel:()=>Ks,JinaCLIPModel:()=>fo,JinaCLIPPreTrainedModel:()=>Gs,JinaCLIPTextModel:()=>_o,JinaCLIPVisionModel:()=>go,LiteWhisperForConditionalGeneration:()=>ao,LlamaForCausalLM:()=>$o,LlamaModel:()=>So,LlamaPreTrainedModel:()=>_n,LlavaForConditionalGeneration:()=>cn,LlavaOnevisionForConditionalGeneration:()=>Vs,LlavaPreTrainedModel:()=>uo,LongT5ForConditionalGeneration:()=>We,LongT5Model:()=>Qe,LongT5PreTrainedModel:()=>Re,M2M100ForConditionalGeneration:()=>Op,M2M100Model:()=>Fp,M2M100PreTrainedModel:()=>ol,MBartForCausalLM:()=>ms,MBartForConditionalGeneration:()=>Pr,MBartForSequenceClassification:()=>Zt,MBartModel:()=>Er,MBartPreTrainedModel:()=>Mr,MPNetForMaskedLM:()=>tn,MPNetForQuestionAnswering:()=>nn,MPNetForSequenceClassification:()=>rn,MPNetForTokenClassification:()=>sn,MPNetModel:()=>en,MPNetPreTrainedModel:()=>hs,MT5ForConditionalGeneration:()=>Ot,MT5Model:()=>_t,MT5PreTrainedModel:()=>Ye,MarianMTModel:()=>Ap,MarianModel:()=>kp,MarianPreTrainedModel:()=>nl,MaskFormerForInstanceSegmentation:()=>cp,MaskFormerModel:()=>up,MaskFormerPreTrainedModel:()=>Ja,MaskedLMOutput:()=>Ar,Metric3DForDepthEstimation:()=>ip,Metric3DPreTrainedModel:()=>op,Metric3Dv2ForDepthEstimation:()=>lp,Metric3Dv2PreTrainedModel:()=>ap,MgpstrForSceneTextRecognition:()=>qh,MgpstrModelOutput:()=>Kh,MgpstrPreTrainedModel:()=>Hh,MimiDecoderModel:()=>om,MimiDecoderOutput:()=>rm,MimiEncoderModel:()=>nm,MimiEncoderOutput:()=>tm,MimiModel:()=>sm,MimiPreTrainedModel:()=>Di,MistralForCausalLM:()=>fh,MistralModel:()=>mh,MistralPreTrainedModel:()=>al,MobileBertForMaskedLM:()=>cr,MobileBertForQuestionAnswering:()=>ns,MobileBertForSequenceClassification:()=>hr,MobileBertModel:()=>ss,MobileBertPreTrainedModel:()=>ur,MobileLLMForCausalLM:()=>Le,MobileLLMModel:()=>Te,MobileLLMPreTrainedModel:()=>ue,MobileNetV1ForImageClassification:()=>kh,MobileNetV1ForSemanticSegmentation:()=>Ah,MobileNetV1Model:()=>Ih,MobileNetV1PreTrainedModel:()=>ki,MobileNetV2ForImageClassification:()=>Oh,MobileNetV2ForSemanticSegmentation:()=>Dh,MobileNetV2Model:()=>Fh,MobileNetV2PreTrainedModel:()=>Ai,MobileNetV3ForImageClassification:()=>zh,MobileNetV3ForSemanticSegmentation:()=>Bh,MobileNetV3Model:()=>Lh,MobileNetV3PreTrainedModel:()=>Fi,MobileNetV4ForImageClassification:()=>jh,MobileNetV4ForSemanticSegmentation:()=>Nh,MobileNetV4Model:()=>Rh,MobileNetV4PreTrainedModel:()=>Oi,MobileViTForImageClassification:()=>md,MobileViTModel:()=>hd,MobileViTPreTrainedModel:()=>Oa,MobileViTV2ForImageClassification:()=>_d,MobileViTV2Model:()=>fd,MobileViTV2PreTrainedModel:()=>Da,ModelOutput:()=>Me,ModernBertForMaskedLM:()=>Ve,ModernBertForSequenceClassification:()=>Ze,ModernBertForTokenClassification:()=>st,ModernBertModel:()=>Ie,ModernBertPreTrainedModel:()=>qe,Moondream1ForConditionalGeneration:()=>di,MoonshineForConditionalGeneration:()=>ci,MoonshineModel:()=>ui,MoonshinePreTrainedModel:()=>Dn,MptForCausalLM:()=>Kc,MptModel:()=>Gc,MptPreTrainedModel:()=>Ca,MultiModalityCausalLM:()=>Gh,MultiModalityPreTrainedModel:()=>Wh,MusicgenForCausalLM:()=>K0,MusicgenForConditionalGeneration:()=>ml,MusicgenModel:()=>G0,MusicgenPreTrainedModel:()=>hl,NomicBertModel:()=>Ge,NomicBertPreTrainedModel:()=>at,OPTForCausalLM:()=>qc,OPTModel:()=>Hc,OPTPreTrainedModel:()=>Sa,Olmo2ForCausalLM:()=>yr,Olmo2Model:()=>Wt,Olmo2PreTrainedModel:()=>It,OlmoForCausalLM:()=>bt,OlmoModel:()=>et,OlmoPreTrainedModel:()=>Ke,OpenELMForCausalLM:()=>Ac,OpenELMModel:()=>kc,OpenELMPreTrainedModel:()=>ya,OwlViTForObjectDetection:()=>wd,OwlViTModel:()=>gd,OwlViTPreTrainedModel:()=>La,Owlv2ForObjectDetection:()=>bd,Owlv2Model:()=>Md,Owlv2PreTrainedModel:()=>za,PaliGemmaForConditionalGeneration:()=>mi,PaliGemmaPreTrainedModel:()=>hi,PatchTSMixerForPrediction:()=>Yh,PatchTSMixerModel:()=>Jh,PatchTSMixerPreTrainedModel:()=>_l,PatchTSTForPrediction:()=>Xh,PatchTSTModel:()=>Qh,PatchTSTPreTrainedModel:()=>fl,Phi3ForCausalLM:()=>Vc,Phi3Model:()=>Nc,Phi3PreTrainedModel:()=>Ea,Phi3VForCausalLM:()=>ho,Phi3VPreTrainedModel:()=>fi,PhiForCausalLM:()=>jc,PhiModel:()=>Rc,PhiPreTrainedModel:()=>Ta,PreTrainedModel:()=>G,PretrainedMixin:()=>Dt,PvtForImageClassification:()=>rd,PvtModel:()=>td,PvtPreTrainedModel:()=>ka,PyAnnoteForAudioFrameClassification:()=>jp,PyAnnoteModel:()=>Rp,PyAnnotePreTrainedModel:()=>il,QuestionAnsweringModelOutput:()=>Br,Qwen2ForCausalLM:()=>Oc,Qwen2Model:()=>Fc,Qwen2PreTrainedModel:()=>va,Qwen2VLForConditionalGeneration:()=>Bc,Qwen2VLPreTrainedModel:()=>zc,Qwen3ForCausalLM:()=>Lc,Qwen3Model:()=>Dc,Qwen3PreTrainedModel:()=>xa,RFDetrForObjectDetection:()=>Ad,RFDetrModel:()=>kd,RFDetrObjectDetectionOutput:()=>Fd,RFDetrPreTrainedModel:()=>Ua,RTDetrForObjectDetection:()=>Cd,RTDetrModel:()=>Pd,RTDetrObjectDetectionOutput:()=>Ao,RTDetrPreTrainedModel:()=>Na,RTDetrV2ForObjectDetection:()=>$d,RTDetrV2Model:()=>Sd,RTDetrV2ObjectDetectionOutput:()=>Id,RTDetrV2PreTrainedModel:()=>Va,ResNetForImageClassification:()=>Wd,ResNetModel:()=>Ud,ResNetPreTrainedModel:()=>qa,RoFormerForMaskedLM:()=>St,RoFormerForQuestionAnswering:()=>gr,RoFormerForSequenceClassification:()=>Vt,RoFormerForTokenClassification:()=>zt,RoFormerModel:()=>pt,RoFormerPreTrainedModel:()=>ke,RobertaForMaskedLM:()=>er,RobertaForQuestionAnswering:()=>kr,RobertaForSequenceClassification:()=>dr,RobertaForTokenClassification:()=>pr,RobertaModel:()=>br,RobertaPreTrainedModel:()=>Lr,SamImageSegmentationOutput:()=>Ip,SamModel:()=>$p,SamPreTrainedModel:()=>Sp,SapiensForDepthEstimation:()=>tp,SapiensForNormalEstimation:()=>rp,SapiensForSemanticSegmentation:()=>ep,SapiensPreTrainedModel:()=>Ei,SegformerForImageClassification:()=>Th,SegformerForSemanticSegmentation:()=>Eh,SegformerModel:()=>W0,SegformerPreTrainedModel:()=>Ii,Seq2SeqLMOutput:()=>tv,SequenceClassifierOutput:()=>vt,SiglipModel:()=>Ws,SiglipPreTrainedModel:()=>Us,SiglipTextModel:()=>mo,SiglipVisionModel:()=>Mi,SmolVLMForConditionalGeneration:()=>po,SnacDecoderModel:()=>hm,SnacEncoderModel:()=>pm,SnacModel:()=>dm,SnacPreTrainedModel:()=>zi,SpeechT5ForSpeechToText:()=>uh,SpeechT5ForTextToSpeech:()=>ch,SpeechT5HifiGan:()=>dh,SpeechT5Model:()=>U0,SpeechT5PreTrainedModel:()=>Si,SqueezeBertForMaskedLM:()=>on,SqueezeBertForQuestionAnswering:()=>ln,SqueezeBertForSequenceClassification:()=>an,SqueezeBertModel:()=>js,SqueezeBertPreTrainedModel:()=>ks,StableLmForCausalLM:()=>Ch,StableLmModel:()=>Ph,StableLmPreTrainedModel:()=>dl,Starcoder2ForCausalLM:()=>gh,Starcoder2Model:()=>_h,Starcoder2PreTrainedModel:()=>ll,StyleTextToSpeech2Model:()=>lh,StyleTextToSpeech2PreTrainedModel:()=>ah,Swin2SRForImageSuperResolution:()=>Qd,Swin2SRModel:()=>qd,Swin2SRPreTrainedModel:()=>Qa,SwinForImageClassification:()=>Kd,SwinForSemanticSegmentation:()=>Hd,SwinModel:()=>Gd,SwinPreTrainedModel:()=>Ti,T5ForConditionalGeneration:()=>xe,T5Model:()=>ce,T5PreTrainedModel:()=>ie,TableTransformerForObjectDetection:()=>zd,TableTransformerModel:()=>Ld,TableTransformerObjectDetectionOutput:()=>Bd,TableTransformerPreTrainedModel:()=>Ga,TokenClassifierOutput:()=>Cr,TrOCRForCausalLM:()=>hh,TrOCRPreTrainedModel:()=>ph,UltravoxModel:()=>em,UltravoxPreTrainedModel:()=>Zh,UniSpeechForCTC:()=>Wp,UniSpeechForSequenceClassification:()=>Gp,UniSpeechModel:()=>Up,UniSpeechPreTrainedModel:()=>Pi,UniSpeechSatForAudioFrameClassification:()=>Qp,UniSpeechSatForCTC:()=>Hp,UniSpeechSatForSequenceClassification:()=>qp,UniSpeechSatModel:()=>Kp,UniSpeechSatPreTrainedModel:()=>Fo,ViTForImageClassification:()=>Xc,ViTMAEModel:()=>nd,ViTMAEPreTrainedModel:()=>sd,ViTMSNForImageClassification:()=>id,ViTMSNModel:()=>od,ViTMSNPreTrainedModel:()=>Aa,ViTModel:()=>Qc,ViTPreTrainedModel:()=>$a,VisionEncoderDecoderModel:()=>lo,VitMatteForImageMatting:()=>pd,VitMattePreTrainedModel:()=>dd,VitPoseForPoseEstimation:()=>ed,VitPosePreTrainedModel:()=>Zc,VitsModel:()=>cl,VitsModelOutput:()=>Mf,VitsPreTrainedModel:()=>xh,Wav2Vec2BertForCTC:()=>Jp,Wav2Vec2BertForSequenceClassification:()=>Yp,Wav2Vec2BertModel:()=>Xp,Wav2Vec2BertPreTrainedModel:()=>Ci,Wav2Vec2ForAudioFrameClassification:()=>Bp,Wav2Vec2ForCTC:()=>Lp,Wav2Vec2ForSequenceClassification:()=>zp,Wav2Vec2Model:()=>Dp,Wav2Vec2PreTrainedModel:()=>Hs,WavLMForAudioFrameClassification:()=>ih,WavLMForCTC:()=>sh,WavLMForSequenceClassification:()=>nh,WavLMForXVector:()=>oh,WavLMModel:()=>rh,WavLMPreTrainedModel:()=>Kn,WeSpeakerResNetModel:()=>Vp,WeSpeakerResNetPreTrainedModel:()=>Np,WhisperForConditionalGeneration:()=>io,WhisperModel:()=>li,WhisperPreTrainedModel:()=>oo,XLMForQuestionAnswering:()=>so,XLMForSequenceClassification:()=>Zo,XLMForTokenClassification:()=>ei,XLMModel:()=>un,XLMPreTrainedModel:()=>os,XLMRobertaForMaskedLM:()=>ri,XLMRobertaForQuestionAnswering:()=>oi,XLMRobertaForSequenceClassification:()=>si,XLMRobertaForTokenClassification:()=>ni,XLMRobertaModel:()=>ti,XLMRobertaPreTrainedModel:()=>Ns,XLMWithLMHeadModel:()=>Yo,XVectorOutput:()=>gf,YolosForObjectDetection:()=>Pp,YolosModel:()=>Ep,YolosObjectDetectionOutput:()=>Cp,YolosPreTrainedModel:()=>sl});var s=t("./src/configs.js"),o=t("./src/backends/onnx.js"),n=t("./src/utils/dtypes.js"),i=t("./src/utils/generic.js"),a=t("./src/utils/core.js"),l=t("./src/utils/hub.js"),u=t("./src/utils/constants.js"),p=t("./src/generation/logits_process.js"),c=t("./src/generation/configuration_utils.js"),d=t("./src/utils/tensor.js"),_=t("./src/utils/image.js"),f=t("./src/utils/maths.js"),T=t("./src/generation/stopping_criteria.js"),I=t("./src/generation/logits_sampler.js"),g=t("./src/env.js"),w=t("./src/models/whisper/generation_whisper.js"),S=t("./src/models/whisper/common_whisper.js");const E={EncoderOnly:0,EncoderDecoder:1,Seq2Seq:2,Vision2Seq:3,DecoderOnly:4,MaskGeneration:5,ImageTextToText:6,Musicgen:7,MultiModality:8,Phi3V:9,AudioTextToText:10,AutoEncoder:11},v=new Map,M=new Map,y=new Map;async function C(b,P,O){var Sr;let ne=((Sr=O.config)==null?void 0:Sr["transformers.js_config"])??{},ge=O.device??ne.device;ge&&typeof ge!="string"&&(ge.hasOwnProperty(P)?ge=ge[P]:(console.warn(`device not specified for "${P}". Using the default device.`),ge=null));const he=ge??(g.apis.IS_NODE_ENV?"cpu":"wasm"),Ee=(0,o.deviceToExecutionProviders)(he),De=ne.device_config??{};De.hasOwnProperty(he)&&(ne={...ne,...De[he]});let Ne=O.dtype??ne.dtype;if(typeof Ne!="string"&&(Ne&&Ne.hasOwnProperty(P)?Ne=Ne[P]:(Ne=n.DEFAULT_DEVICE_DTYPE_MAPPING[he]??n.DATA_TYPES.fp32,console.warn(`dtype not specified for "${P}". Using the default dtype (${Ne}) for this device (${he}).`))),Ne===n.DATA_TYPES.auto){let Ct=ne.dtype;typeof Ct!="string"&&(Ct=Ct==null?void 0:Ct[P]),Ct&&Ct!==n.DATA_TYPES.auto&&n.DATA_TYPES.hasOwnProperty(Ct)?Ne=Ct:Ne=n.DEFAULT_DEVICE_DTYPE_MAPPING[he]??n.DATA_TYPES.fp32}const Xe=Ne;if(n.DEFAULT_DTYPE_SUFFIX_MAPPING.hasOwnProperty(Xe)){if(Xe===n.DATA_TYPES.fp16&&he==="webgpu"&&!await(0,n.isWebGpuFp16Supported)())throw new Error(`The device (${he}) does not support fp16.`)}else throw new Error(`Invalid dtype: ${Xe}. Should be one of: ${Object.keys(n.DATA_TYPES).join(", ")}`);const mt=ne.kv_cache_dtype,wt=mt?typeof mt=="string"?mt:mt[Xe]??"float32":void 0;if(wt&&!["float32","float16"].includes(wt))throw new Error(`Invalid kv_cache_dtype: ${wt}. Should be one of: float32, float16`);const dt={dtype:Xe,kv_cache_dtype:wt,device:he},Pt=n.DEFAULT_DTYPE_SUFFIX_MAPPING[Xe],gt=`${P}${Pt}.onnx`,Et=`${O.subfolder??""}/${gt}`,nt={...O.session_options};nt.executionProviders??(nt.executionProviders=Ee);const $t=ne.free_dimension_overrides;$t?nt.freeDimensionOverrides??(nt.freeDimensionOverrides=$t):he.startsWith("webnn")&&!nt.freeDimensionOverrides&&console.warn(`WebNN does not currently support dynamic shapes and requires 'free_dimension_overrides' to be set in config.json, preferably as a field within config["transformers.js_config"]["device_config"]["${he}"]. When 'free_dimension_overrides' is not set, you may experience significant performance degradation.`);const qt=g.apis.IS_NODE_ENV&&g.env.useFSCache,tr=(0,l.getModelFile)(b,Et,!0,O,qt),ar=O.use_external_data_format??ne.use_external_data_format;let sr=[];if(ar){let Ct;typeof ar=="object"?ar.hasOwnProperty(gt)?Ct=ar[gt]:ar.hasOwnProperty(P)?Ct=ar[P]:Ct=!1:Ct=ar;const vr=+Ct;if(vr>l.MAX_EXTERNAL_DATA_CHUNKS)throw new Error(`The number of external data chunks (${vr}) exceeds the maximum allowed value (${l.MAX_EXTERNAL_DATA_CHUNKS}).`);for(let qr=0;qr<vr;++qr){const wn=`${gt}_data${qr===0?"":"_"+qr}`,Nr=`${O.subfolder??""}/${wn}`;sr.push(new Promise(async(is,Bi)=>{const Mn=await(0,l.getModelFile)(b,Nr,!0,O,qt);is(Mn instanceof Uint8Array?{path:wn,data:Mn}:wn)}))}}else nt.externalData!==void 0&&(sr=nt.externalData.map(async Ct=>{if(typeof Ct.data=="string"){const vr=await(0,l.getModelFile)(b,Ct.data,!0,O);return{...Ct,data:vr}}return Ct}));if(sr.length>0){const Ct=await Promise.all(sr);g.apis.IS_NODE_ENV||(nt.externalData=Ct)}if(he==="webgpu"){const Ct=(0,s.getKeyValueShapes)(O.config,{prefix:"present"});if(Object.keys(Ct).length>0&&!(0,o.isONNXProxy)()){const vr={};for(const qr in Ct)vr[qr]="gpu-buffer";nt.preferredOutputLocation=vr}}return{buffer_or_path:await tr,session_options:nt,session_config:dt}}async function F(b,P,O){return Object.fromEntries(await Promise.all(Object.keys(P).map(async ne=>{const{buffer_or_path:ge,session_options:he,session_config:Ee}=await C(b,P[ne],O),De=await(0,o.createInferenceSession)(ge,he,Ee);return[ne,De]})))}async function z(b,P,O){return Object.fromEntries(await Promise.all(Object.keys(P).map(async ne=>{const ge=await(0,l.getModelJSON)(b,P[ne],!1,O);return[ne,ge]})))}function K(b,P){const O=Object.create(null),ne=[];for(const Ee of b.inputNames){const De=P[Ee];if(!(De instanceof d.Tensor)){ne.push(Ee);continue}O[Ee]=(0,o.isONNXProxy)()?De.clone():De}if(ne.length>0)throw new Error(`An error occurred during model execution: "Missing the following inputs: ${ne.join(", ")}.`);const ge=Object.keys(P).length,he=b.inputNames.length;if(ge>he){let Ee=Object.keys(P).filter(De=>!b.inputNames.includes(De));console.warn(`WARNING: Too many inputs were provided (${ge} > ${he}). The following inputs will be ignored: "${Ee.join(", ")}".`)}return O}let q=Promise.resolve();async function R(b,P){const O=K(b,P);try{const ne=Object.fromEntries(Object.entries(O).map(([Ee,De])=>[Ee,De.ort_tensor])),ge=()=>b.run(ne),he=await(g.apis.IS_BROWSER_ENV||g.apis.IS_WEBWORKER_ENV?q=q.then(ge):ge());return Z(he)}catch(ne){const ge=Object.fromEntries(Object.entries(O).map(([he,Ee])=>{const De={type:Ee.type,dims:Ee.dims,location:Ee.location};return De.location!=="gpu-buffer"&&(De.data=Ee.data),[he,De]}));throw console.error(`An error occurred during model execution: "${ne}".`),console.error("Inputs given to model:",ge),ne}}function Z(b){for(let P in b)(0,o.isONNXTensor)(b[P])?b[P]=new d.Tensor(b[P]):typeof b[P]=="object"&&Z(b[P]);return b}function H(b){if(b instanceof d.Tensor)return b;if(b.length===0)throw Error("items must be non-empty");if(Array.isArray(b[0])){if(b.some(P=>P.length!==b[0].length))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' and/or 'truncation=True' to have batched tensors with the same length.");return new d.Tensor("int64",BigInt64Array.from(b.flat().map(P=>BigInt(P))),[b.length,b[0].length])}else return new d.Tensor("int64",BigInt64Array.from(b.map(P=>BigInt(P))),[1,b.length])}function J(b){return new d.Tensor("bool",[b],[1])}async function Q(b,P){let{encoder_outputs:O,input_ids:ne,decoder_input_ids:ge,...he}=P;if(!O){const De=(0,a.pick)(P,b.sessions.model.inputNames);O=(await se(b,De)).last_hidden_state}return he.input_ids=ge,he.encoder_hidden_states=O,b.sessions.decoder_model_merged.inputNames.includes("encoder_attention_mask")&&(he.encoder_attention_mask=P.attention_mask),await ae(b,he,!0)}async function se(b,P){const O=b.sessions.model,ne=(0,a.pick)(P,O.inputNames);if(O.inputNames.includes("inputs_embeds")&&!ne.inputs_embeds){if(!P.input_ids)throw new Error("Both `input_ids` and `inputs_embeds` are missing in the model inputs.");ne.inputs_embeds=await b.encode_text({input_ids:P.input_ids})}if(O.inputNames.includes("token_type_ids")&&!ne.token_type_ids){if(!ne.input_ids)throw new Error("Both `input_ids` and `token_type_ids` are missing in the model inputs.");ne.token_type_ids=(0,d.zeros_like)(ne.input_ids)}if(O.inputNames.includes("pixel_mask")&&!ne.pixel_mask){if(!ne.pixel_values)throw new Error("Both `pixel_values` and `pixel_mask` are missing in the model inputs.");const ge=ne.pixel_values.dims;ne.pixel_mask=(0,d.ones)([ge[0],ge[2],ge[3]])}return await R(O,ne)}async function fe(b,P){const O=await b.encode(P);return await b.decode(O)}async function ae(b,P,O=!1){const ne=b.sessions[O?"decoder_model_merged":"model"],{past_key_values:ge,...he}=P;if(ne.inputNames.includes("use_cache_branch")&&(he.use_cache_branch=J(!!ge)),ne.inputNames.includes("position_ids")&&he.attention_mask&&!he.position_ids){const De=["paligemma","gemma3_text","gemma3"].includes(b.config.model_type)?1:0;he.position_ids=ze(he,ge,De)}b.addPastKeyValues(he,ge);const Ee=(0,a.pick)(he,ne.inputNames);return await R(ne,Ee)}function V({modality_token_id:b,inputs_embeds:P,modality_features:O,input_ids:ne,attention_mask:ge}){const he=ne.tolist().map(Xe=>Xe.reduce((mt,wt,dt)=>(wt==b&&mt.push(dt),mt),[])),Ee=he.reduce((Xe,mt)=>Xe+mt.length,0),De=O.dims[0];if(Ee!==De)throw new Error(`Number of tokens and features do not match: tokens: ${Ee}, features ${De}`);let Ne=0;for(let Xe=0;Xe<he.length;++Xe){const mt=he[Xe],wt=P[Xe];for(let dt=0;dt<mt.length;++dt)wt[mt[dt]].data.set(O[Ne++].data)}return{inputs_embeds:P,attention_mask:ge}}function A({image_token_id:b,inputs_embeds:P,image_features:O,input_ids:ne,attention_mask:ge}){return V({modality_token_id:b,inputs_embeds:P,modality_features:O,input_ids:ne,attention_mask:ge})}function U({audio_token_id:b,inputs_embeds:P,audio_features:O,input_ids:ne,attention_mask:ge}){return V({modality_token_id:b,inputs_embeds:P,modality_features:O,input_ids:ne,attention_mask:ge})}async function ee(b,{encode_function:P,merge_function:O,modality_input_name:ne,modality_output_name:ge,input_ids:he=null,attention_mask:Ee=null,position_ids:De=null,inputs_embeds:Ne=null,past_key_values:Xe=null,generation_config:mt=null,logits_processor:wt=null,...dt}){const Pt=dt[ne];if(!Ne){if(Ne=await b.encode_text({input_ids:he,...dt}),Pt&&he.dims[1]!==1){const Et=await P({[ne]:Pt,...dt});({inputs_embeds:Ne,attention_mask:Ee}=O({[ge]:Et,inputs_embeds:Ne,input_ids:he,attention_mask:Ee}))}else if(Xe&&Pt&&he.dims[1]===1){const Et=he.dims[1],nt=Object.values(Xe)[0].dims.at(-2);Ee=(0,d.cat)([(0,d.ones)([he.dims[0],nt]),Ee.slice(null,[Ee.dims[1]-Et,Ee.dims[1]])],1)}}if(!De&&b.config.model_type==="qwen2_vl"){const{image_grid_thw:Et,video_grid_thw:nt}=dt;[De]=b.get_rope_index(he,Et,nt,Ee)}return await ae(b,{inputs_embeds:Ne,past_key_values:Xe,attention_mask:Ee,position_ids:De,generation_config:mt,logits_processor:wt},!0)}async function _e(b,P){return await ee(b,{...P,modality_input_name:"audio_values",modality_output_name:"audio_features",encode_function:b.encode_audio.bind(b),merge_function:b._merge_input_ids_with_audio_features.bind(b)})}async function le(b,P){return await ee(b,{...P,modality_input_name:"pixel_values",modality_output_name:"image_features",encode_function:b.encode_image.bind(b),merge_function:b._merge_input_ids_with_image_features.bind(b)})}function ye(b,P=0){const[O,ne]=b.dims,ge=b.data,he=new BigInt64Array(ge.length);for(let Ee=0;Ee<O;++Ee){const De=Ee*ne;let Ne=BigInt(P);for(let Xe=0;Xe<ne;++Xe){const mt=De+Xe;ge[mt]===0n?he[mt]=BigInt(1):(he[mt]=Ne,Ne+=ge[mt])}}return{data:he,dims:b.dims}}function ze(b,P=null,O=0){const{input_ids:ne,inputs_embeds:ge,attention_mask:he}=b,{data:Ee,dims:De}=ye(he,O);let Ne=new d.Tensor("int64",Ee,De);if(P){const Xe=-(ne??ge).dims.at(1);Ne=Ne.slice(null,[Xe,null])}return Ne}function Ue(b,P,O,ne){if(O.past_key_values){const ge=Object.values(O.past_key_values)[0].dims.at(-2),{input_ids:he,attention_mask:Ee}=O;if(!(Ee&&Ee.dims[1]>he.dims[1])){if(ge<he.dims[1])O.input_ids=he.slice(null,[ge,null]);else if(b.config.image_token_index!=null&&he.data.some(De=>De==b.config.image_token_index)){const De=b.config.num_image_tokens;if(!De)throw new Error("`num_image_tokens` is missing in the model configuration.");const Ne=he.dims[1]-(ge-De);O.input_ids=he.slice(null,[-Ne,null]),O.attention_mask=(0,d.ones)([1,ge+Ne])}}}return O}function pe(b,P,O,ne){return O.past_key_values&&(P=P.map(ge=>[ge.at(-1)])),{...O,decoder_input_ids:H(P)}}function W(b,...P){return b.config.is_encoder_decoder?pe(b,...P):Ue(b,...P)}function re(b,P,O,ne){const ge=!!O.past_key_values;return ne.guidance_scale!==null&&ne.guidance_scale>1&&(ge?O.input_ids=(0,d.cat)([O.input_ids,O.input_ids],0):(O.input_ids=(0,d.cat)([O.input_ids,(0,d.full_like)(O.input_ids,BigInt(ne.pad_token_id))],0),O.attention_mask=(0,d.cat)([O.attention_mask,(0,d.full_like)(O.attention_mask,0n)],0))),(ge||!O.pixel_values)&&(O.pixel_values=(0,d.full)([0,0,3,384,384],1)),ge&&(O.images_seq_mask=new d.Tensor("bool",new Array(1).fill(!0).fill(!1,0,1),[1,1]),O.images_emb_mask=new d.Tensor("bool",new Array(0).fill(!1),[1,1,0])),O}class G extends i.Callable{constructor(O,ne,ge){super();Y(this,"main_input_name","input_ids");Y(this,"forward_params",["input_ids","attention_mask"]);this.config=O,this.sessions=ne,this.configs=ge;const he=y.get(this.constructor),Ee=v.get(he);switch(this.can_generate=!1,this._forward=null,this._prepare_inputs_for_generation=null,Ee){case E.DecoderOnly:this.can_generate=!0,this._forward=ae,this._prepare_inputs_for_generation=Ue;break;case E.Seq2Seq:case E.Vision2Seq:case E.Musicgen:this.can_generate=!0,this._forward=Q,this._prepare_inputs_for_generation=pe;break;case E.EncoderDecoder:this._forward=Q;break;case E.ImageTextToText:this.can_generate=!0,this._forward=le,this._prepare_inputs_for_generation=W;break;case E.AudioTextToText:this.can_generate=!0,this._forward=_e,this._prepare_inputs_for_generation=W;break;case E.Phi3V:this.can_generate=!0,this._prepare_inputs_for_generation=W;break;case E.MultiModality:this.can_generate=!0,this._prepare_inputs_for_generation=re;break;case E.AutoEncoder:this._forward=fe;break;default:this._forward=se;break}this.can_generate&&this.forward_params.push("past_key_values"),this.custom_config=this.config["transformers.js_config"]??{}}async dispose(){var ne;const O=[];for(const ge of Object.values(this.sessions))(ne=ge==null?void 0:ge.handler)!=null&&ne.dispose&&O.push(ge.handler.dispose());return await Promise.all(O)}static async from_pretrained(O,{progress_callback:ne=null,config:ge=null,cache_dir:he=null,local_files_only:Ee=!1,revision:De="main",model_file_name:Ne=null,subfolder:Xe="onnx",device:mt=null,dtype:wt=null,use_external_data_format:dt=null,session_options:Pt={}}={}){let gt={progress_callback:ne,config:ge,cache_dir:he,local_files_only:Ee,revision:De,model_file_name:Ne,subfolder:Xe,device:mt,dtype:wt,use_external_data_format:dt,session_options:Pt};const Et=y.get(this),nt=v.get(Et);ge=gt.config=await s.AutoConfig.from_pretrained(O,gt);let $t;if(nt===E.DecoderOnly)$t=await Promise.all([F(O,{model:gt.model_file_name??"model"},gt),z(O,{generation_config:"generation_config.json"},gt)]);else if(nt===E.Seq2Seq||nt===E.Vision2Seq)$t=await Promise.all([F(O,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},gt),z(O,{generation_config:"generation_config.json"},gt)]);else if(nt===E.MaskGeneration)$t=await Promise.all([F(O,{model:"vision_encoder",prompt_encoder_mask_decoder:"prompt_encoder_mask_decoder"},gt)]);else if(nt===E.EncoderDecoder)$t=await Promise.all([F(O,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},gt)]);else if(nt===E.ImageTextToText){const qt={embed_tokens:"embed_tokens",vision_encoder:"vision_encoder",decoder_model_merged:"decoder_model_merged"};ge.is_encoder_decoder&&(qt.model="encoder_model"),$t=await Promise.all([F(O,qt,gt),z(O,{generation_config:"generation_config.json"},gt)])}else if(nt===E.AudioTextToText){const qt={embed_tokens:"embed_tokens",audio_encoder:"audio_encoder",decoder_model_merged:"decoder_model_merged"};$t=await Promise.all([F(O,qt,gt),z(O,{generation_config:"generation_config.json"},gt)])}else if(nt===E.Musicgen)$t=await Promise.all([F(O,{model:"text_encoder",decoder_model_merged:"decoder_model_merged",encodec_decode:"encodec_decode"},gt),z(O,{generation_config:"generation_config.json"},gt)]);else if(nt===E.MultiModality)$t=await Promise.all([F(O,{prepare_inputs_embeds:"prepare_inputs_embeds",model:"language_model",lm_head:"lm_head",gen_head:"gen_head",gen_img_embeds:"gen_img_embeds",image_decode:"image_decode"},gt),z(O,{generation_config:"generation_config.json"},gt)]);else if(nt===E.Phi3V)$t=await Promise.all([F(O,{prepare_inputs_embeds:"prepare_inputs_embeds",model:"model",vision_encoder:"vision_encoder"},gt),z(O,{generation_config:"generation_config.json"},gt)]);else if(nt===E.AutoEncoder)$t=await Promise.all([F(O,{encoder_model:"encoder_model",decoder_model:"decoder_model"},gt)]);else{if(nt!==E.EncoderOnly){const qt=Et??(ge==null?void 0:ge.model_type);qt!=="custom"&&console.warn(`Model type for '${qt}' not found, assuming encoder-only architecture. Please report this at ${u.GITHUB_ISSUE_URL}.`)}$t=await Promise.all([F(O,{model:gt.model_file_name??"model"},gt)])}return new this(ge,...$t)}async _call(O){return await this.forward(O)}async forward(O){return await this._forward(this,O)}get generation_config(){var O;return((O=this.configs)==null?void 0:O.generation_config)??null}_get_logits_warper(O){const ne=new p.LogitsProcessorList;return O.temperature!==null&&O.temperature!==1&&ne.push(new p.TemperatureLogitsWarper(O.temperature)),O.top_k!==null&&O.top_k!==0&&ne.push(new p.TopKLogitsWarper(O.top_k)),O.top_p!==null&&O.top_p<1&&ne.push(new p.TopPLogitsWarper(O.top_p)),ne}_get_logits_processor(O,ne,ge=null){const he=new p.LogitsProcessorList;if(O.repetition_penalty!==null&&O.repetition_penalty!==1&&he.push(new p.RepetitionPenaltyLogitsProcessor(O.repetition_penalty)),O.no_repeat_ngram_size!==null&&O.no_repeat_ngram_size>0&&he.push(new p.NoRepeatNGramLogitsProcessor(O.no_repeat_ngram_size)),O.bad_words_ids!==null&&he.push(new p.NoBadWordsLogitsProcessor(O.bad_words_ids,O.eos_token_id)),O.min_length!==null&&O.eos_token_id!==null&&O.min_length>0&&he.push(new p.MinLengthLogitsProcessor(O.min_length,O.eos_token_id)),O.min_new_tokens!==null&&O.eos_token_id!==null&&O.min_new_tokens>0&&he.push(new p.MinNewTokensLengthLogitsProcessor(ne,O.min_new_tokens,O.eos_token_id)),O.forced_bos_token_id!==null&&he.push(new p.ForcedBOSTokenLogitsProcessor(O.forced_bos_token_id)),O.forced_eos_token_id!==null&&he.push(new p.ForcedEOSTokenLogitsProcessor(O.max_length,O.forced_eos_token_id)),O.begin_suppress_tokens!==null){const Ee=ne>1||O.forced_bos_token_id===null?ne:ne+1;he.push(new p.SuppressTokensAtBeginLogitsProcessor(O.begin_suppress_tokens,Ee))}return O.guidance_scale!==null&&O.guidance_scale>1&&he.push(new p.ClassifierFreeGuidanceLogitsProcessor(O.guidance_scale)),ge!==null&&he.extend(ge),he}_prepare_generation_config(O,ne,ge=c.GenerationConfig){const he={...this.config};for(const De of["decoder","generator","text_config"])De in he&&Object.assign(he,he[De]);const Ee=new ge(he);return Object.assign(Ee,this.generation_config??{}),O&&Object.assign(Ee,O),ne&&Object.assign(Ee,(0,a.pick)(ne,Object.getOwnPropertyNames(Ee))),Ee}_get_stopping_criteria(O,ne=null){const ge=new T.StoppingCriteriaList;return O.max_length!==null&&ge.push(new T.MaxLengthCriteria(O.max_length,this.config.max_position_embeddings??null)),O.eos_token_id!==null&&ge.push(new T.EosTokenCriteria(O.eos_token_id)),ne&&ge.extend(ne),ge}_validate_model_class(){if(!this.can_generate){const O=[Ml,bl,wl,gl],ne=y.get(this.constructor),ge=new Set,he=this.config.model_type;for(const De of O){const Ne=De.get(he);Ne&&ge.add(Ne[0])}let Ee=`The current model class (${ne}) is not compatible with \`.generate()\`, as it doesn't have a language model head.`;throw ge.size>0&&(Ee+=` Please use the following class instead: ${[...ge].join(", ")}`),Error(Ee)}}prepare_inputs_for_generation(...O){return this._prepare_inputs_for_generation(this,...O)}_update_model_kwargs_for_generation({generated_input_ids:O,outputs:ne,model_inputs:ge,is_encoder_decoder:he}){return ge.past_key_values=this.getPastKeyValues(ne,ge.past_key_values),ge.input_ids=new d.Tensor("int64",O.flat(),[O.length,1]),he||(ge.attention_mask=(0,d.cat)([ge.attention_mask,(0,d.ones)([ge.attention_mask.dims[0],1])],1)),ge.position_ids=null,ge}_prepare_model_inputs({inputs:O,bos_token_id:ne,model_kwargs:ge}){const he=(0,a.pick)(ge,this.forward_params),Ee=this.main_input_name;if(Ee in he){if(O)throw new Error("`inputs`: {inputs}` were passed alongside {input_name} which is not allowed. Make sure to either pass {inputs} or {input_name}=...")}else he[Ee]=O;return{inputs_tensor:he[Ee],model_inputs:he,model_input_name:Ee}}async _prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:O,model_inputs:ne,model_input_name:ge,generation_config:he}){if(this.sessions.model.inputNames.includes("inputs_embeds")&&!ne.inputs_embeds&&"_prepare_inputs_embeds"in this){const{input_ids:De,pixel_values:Ne,attention_mask:Xe,...mt}=ne,wt=await this._prepare_inputs_embeds(ne);ne={...mt,...(0,a.pick)(wt,["inputs_embeds","attention_mask"])}}let{last_hidden_state:Ee}=await se(this,ne);if(he.guidance_scale!==null&&he.guidance_scale>1)Ee=(0,d.cat)([Ee,(0,d.full_like)(Ee,0)],0),"attention_mask"in ne&&(ne.attention_mask=(0,d.cat)([ne.attention_mask,(0,d.zeros_like)(ne.attention_mask)],0));else if(ne.decoder_input_ids){const De=H(ne.decoder_input_ids).dims[0];if(De!==Ee.dims[0]){if(Ee.dims[0]!==1)throw new Error(`The encoder outputs have a different batch size (${Ee.dims[0]}) than the decoder inputs (${De}).`);Ee=(0,d.cat)(Array.from({length:De},()=>Ee),0)}}return ne.encoder_outputs=Ee,ne}_prepare_decoder_input_ids_for_generation({batch_size:O,model_input_name:ne,model_kwargs:ge,decoder_start_token_id:he,bos_token_id:Ee,generation_config:De}){let{decoder_input_ids:Ne,...Xe}=ge;if(!(Ne instanceof d.Tensor)){if(Ne)Array.isArray(Ne[0])||(Ne=Array.from({length:O},()=>Ne));else if(he??(he=Ee),this.config.model_type==="musicgen")Ne=Array.from({length:O*this.config.decoder.num_codebooks},()=>[he]);else if(Array.isArray(he)){if(he.length!==O)throw new Error(`\`decoder_start_token_id\` expcted to have length ${O} but got ${he.length}`);Ne=he}else Ne=Array.from({length:O},()=>[he]);Ne=H(Ne)}return ge.decoder_attention_mask=(0,d.ones_like)(Ne),{input_ids:Ne,model_inputs:Xe}}async generate({inputs:O=null,generation_config:ne=null,logits_processor:ge=null,stopping_criteria:he=null,streamer:Ee=null,...De}){this._validate_model_class(),ne=this._prepare_generation_config(ne,De);let{inputs_tensor:Ne,model_inputs:Xe,model_input_name:mt}=this._prepare_model_inputs({inputs:O,model_kwargs:De});const wt=this.config.is_encoder_decoder;wt&&("encoder_outputs"in Xe||(Xe=await this._prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:Ne,model_inputs:Xe,model_input_name:mt,generation_config:ne})));let dt;wt?{input_ids:dt,model_inputs:Xe}=this._prepare_decoder_input_ids_for_generation({batch_size:Xe[mt].dims.at(0),model_input_name:mt,model_kwargs:Xe,decoder_start_token_id:ne.decoder_start_token_id,bos_token_id:ne.bos_token_id,generation_config:ne}):dt=Xe[mt];let Pt=dt.dims.at(-1);ne.max_new_tokens!==null&&(ne.max_length=Pt+ne.max_new_tokens);const gt=this._get_logits_processor(ne,Pt,ge),Et=this._get_stopping_criteria(ne,he),nt=Xe[mt].dims.at(0),$t=I.LogitsSampler.getSampler(ne),qt=new Array(nt).fill(0),tr=dt.tolist();Ee&&Ee.put(tr);let ar,sr={};for(;;){if(Xe=this.prepare_inputs_for_generation(tr,Xe,ne),ar=await this.forward(Xe),ne.output_attentions&&ne.return_dict_in_generate){const Nr=this.getAttentions(ar);for(const is in Nr)is in sr||(sr[is]=[]),sr[is].push(Nr[is])}const Ct=ar.logits.slice(null,-1,null),vr=gt(tr,Ct),qr=[];for(let Nr=0;Nr<vr.dims.at(0);++Nr){const is=vr[Nr],Bi=await $t(is);for(const[Mn,Ri]of Bi){const ji=BigInt(Mn);qt[Nr]+=Ri,tr[Nr].push(ji),qr.push([ji]);break}}if(Ee&&Ee.put(qr),Et(tr).every(Nr=>Nr))break;Xe=this._update_model_kwargs_for_generation({generated_input_ids:qr,outputs:ar,model_inputs:Xe,is_encoder_decoder:wt})}Ee&&Ee.end();const _r=this.getPastKeyValues(ar,Xe.past_key_values,!0),Sr=new d.Tensor("int64",tr.flat(),[tr.length,tr[0].length]);if(ne.return_dict_in_generate)return{sequences:Sr,past_key_values:_r,...sr};for(const Ct of Object.values(ar))Ct.location==="gpu-buffer"&&Ct.dispose();return Sr}getPastKeyValues(O,ne,ge=!1){const he=Object.create(null);for(const Ee in O)if(Ee.startsWith("present")){const De=Ee.replace("present","past_key_values"),Ne=Ee.includes("encoder");if(Ne&&ne?he[De]=ne[De]:he[De]=O[Ee],ne&&(!Ne||ge)){const Xe=ne[De];Xe.location==="gpu-buffer"&&Xe.dispose()}}return he}getAttentions(O){const ne={};for(const ge of["cross_attentions","encoder_attentions","decoder_attentions"])for(const he in O)he.startsWith(ge)&&(ge in ne||(ne[ge]=[]),ne[ge].push(O[he]));return ne}addPastKeyValues(O,ne){var ge,he,Ee;if(ne)Object.assign(O,ne);else{const De=this.sessions.decoder_model_merged??this.sessions.model,Ne=((ge=De==null?void 0:De.config)==null?void 0:ge.kv_cache_dtype)??"float32",Xe=Ne==="float16"?new d.DataTypeMap.float16:[],mt=((Ee=(he=O[this.main_input_name]??O.attention_mask)==null?void 0:he.dims)==null?void 0:Ee[0])??1,wt=(0,s.getKeyValueShapes)(this.config,{batch_size:mt});for(const dt in wt)O[dt]=new d.Tensor(Ne,Xe,wt[dt])}}async encode_image({pixel_values:O}){const ne=(await R(this.sessions.vision_encoder,{pixel_values:O})).image_features;return this.config.num_image_tokens||(console.warn(`The number of image tokens was not set in the model configuration. Setting it to the number of features detected by the vision encoder (${ne.dims[1]}).`),this.config.num_image_tokens=ne.dims[1]),ne}async encode_text({input_ids:O}){return(await R(this.sessions.embed_tokens,{input_ids:O})).inputs_embeds}async encode_audio({audio_values:O}){return(await R(this.sessions.audio_encoder,{audio_values:O})).audio_features}}class Me{}class we extends Me{constructor({last_hidden_state:P,hidden_states:O=null,attentions:ne=null}){super(),this.last_hidden_state=P,this.hidden_states=O,this.attentions=ne}}class Se extends G{}class Pe extends Se{}class $e extends Se{async _call(P){return new Ar(await super._call(P))}}class Fe extends Se{async _call(P){return new vt(await super._call(P))}}class Be extends Se{async _call(P){return new Cr(await super._call(P))}}class He extends Se{async _call(P){return new Br(await super._call(P))}}class qe extends G{}class Ie extends qe{}class Ve extends qe{async _call(P){return new Ar(await super._call(P))}}class Ze extends qe{async _call(P){return new vt(await super._call(P))}}class st extends qe{async _call(P){return new Cr(await super._call(P))}}class at extends G{}class Ge extends at{}class ke extends G{}class pt extends ke{}class St extends ke{async _call(P){return new Ar(await super._call(P))}}class Vt extends ke{async _call(P){return new vt(await super._call(P))}}class zt extends ke{async _call(P){return new Cr(await super._call(P))}}class gr extends ke{async _call(P){return new Br(await super._call(P))}}class or extends G{}class Mt extends or{}class Yr extends or{async _call(P){return new Ar(await super._call(P))}}class D extends or{async _call(P){return new vt(await super._call(P))}}class oe extends or{async _call(P){return new Cr(await super._call(P))}}class B extends or{async _call(P){return new Br(await super._call(P))}}class te extends G{}class me extends te{}class Oe extends te{async _call(P){return new Ar(await super._call(P))}}class ve extends te{async _call(P){return new vt(await super._call(P))}}class yt extends te{async _call(P){return new Cr(await super._call(P))}}class Ft extends te{async _call(P){return new Br(await super._call(P))}}class ht extends G{}class lt extends ht{}class rt extends ht{async _call(P){return new Ar(await super._call(P))}}class Bt extends ht{async _call(P){return new vt(await super._call(P))}}class Ht extends ht{async _call(P){return new Cr(await super._call(P))}}class wr extends ht{async _call(P){return new Br(await super._call(P))}}class Xt extends G{}class Or extends Xt{}class Zr extends Xt{async _call(P){return new Ar(await super._call(P))}}class cs extends Xt{async _call(P){return new vt(await super._call(P))}}class es extends Xt{async _call(P){return new Cr(await super._call(P))}}class Ps extends Xt{async _call(P){return new Br(await super._call(P))}}class jr extends G{}class Cs extends jr{}class Gr extends jr{async _call(P){return new Ar(await super._call(P))}}class ds extends jr{async _call(P){return new vt(await super._call(P))}}class Ss extends jr{async _call(P){return new Cr(await super._call(P))}}class $s extends jr{async _call(P){return new Br(await super._call(P))}}class ir extends G{}class Is extends ir{}class Tr extends ir{async _call(P){return new vt(await super._call(P))}}class ps extends ir{async _call(P){return new Cr(await super._call(P))}}class zr extends ir{async _call(P){return new Br(await super._call(P))}}class Ae extends ir{async _call(P){return new Ar(await super._call(P))}}class Je extends G{}class it extends Je{}class Rt extends Je{async _call(P){return new Ar(await super._call(P))}}class ts extends Je{async _call(P){return new vt(await super._call(P))}}class rs extends Je{async _call(P){return new Cr(await super._call(P))}}class ur extends G{}class ss extends ur{}class cr extends ur{async _call(P){return new Ar(await super._call(P))}}class hr extends ur{async _call(P){return new vt(await super._call(P))}}class ns extends ur{async _call(P){return new Br(await super._call(P))}}class hs extends G{}class en extends hs{}class tn extends hs{async _call(P){return new Ar(await super._call(P))}}class rn extends hs{async _call(P){return new vt(await super._call(P))}}class sn extends hs{async _call(P){return new Cr(await super._call(P))}}class nn extends hs{async _call(P){return new Br(await super._call(P))}}class ks extends G{}class js extends ks{}class on extends ks{async _call(P){return new Ar(await super._call(P))}}class an extends ks{async _call(P){return new vt(await super._call(P))}}class ln extends ks{async _call(P){return new Br(await super._call(P))}}class As extends G{}class de extends As{}class $ extends As{async _call(P){return new vt(await super._call(P))}}class j extends As{async _call(P){return new Br(await super._call(P))}}class X extends As{async _call(P){return new Ar(await super._call(P))}}class ie extends G{constructor(){super(...arguments);Y(this,"forward_params",["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"])}}class ce extends ie{}class xe extends ie{}class Re extends G{}class Qe extends Re{}class We extends Re{}class Ye extends G{}class _t extends Ye{}class Ot extends Ye{}class At extends G{}class Jt extends At{}class Ut extends At{}class mr extends At{async _call(P){return new vt(await super._call(P))}}class Mr extends G{}class Er extends Mr{}class Pr extends Mr{}class Zt extends Mr{async _call(P){return new vt(await super._call(P))}}class ms extends Mr{}class Kt extends G{}class fr extends Kt{}class Dr extends Kt{}class Kr extends G{}class Hr extends Kr{}class Ir extends Kr{}class Lr extends G{}class br extends Lr{}class er extends Lr{async _call(P){return new Ar(await super._call(P))}}class dr extends Lr{async _call(P){return new vt(await super._call(P))}}class pr extends Lr{async _call(P){return new Cr(await super._call(P))}}class kr extends Lr{async _call(P){return new Br(await super._call(P))}}class os extends G{}class un extends os{}class Yo extends os{async _call(P){return new Ar(await super._call(P))}}class Zo extends os{async _call(P){return new vt(await super._call(P))}}class ei extends os{async _call(P){return new Cr(await super._call(P))}}class so extends os{async _call(P){return new Br(await super._call(P))}}class Ns extends G{}class ti extends Ns{}class ri extends Ns{async _call(P){return new Ar(await super._call(P))}}class si extends Ns{async _call(P){return new vt(await super._call(P))}}class ni extends Ns{async _call(P){return new Cr(await super._call(P))}}class oi extends Ns{async _call(P){return new Br(await super._call(P))}}class no extends G{}class ii extends no{}class ai extends no{}class oo extends G{constructor(){super(...arguments);Y(this,"requires_attention_mask",!1);Y(this,"main_input_name","input_features");Y(this,"forward_params",["input_features","attention_mask","decoder_input_ids","decoder_attention_mask","past_key_values"])}}class li extends oo{}class io extends oo{_prepare_generation_config(P,O){return super._prepare_generation_config(P,O,w.WhisperGenerationConfig)}_retrieve_init_tokens(P){const O=[P.decoder_start_token_id];let ne=P.language;const ge=P.task;if(P.is_multilingual){ne||(console.warn("No language specified - defaulting to English (en)."),ne="en");const Ee=`<|${(0,S.whisper_language_to_code)(ne)}|>`;O.push(P.lang_to_id[Ee]),O.push(P.task_to_id[ge??"transcribe"])}else if(ne||ge)throw new Error("Cannot specify `task` or `language` for an English-only model. If the model is intended to be multilingual, pass `is_multilingual=true` to generate, or update the generation config.");return!P.return_timestamps&&P.no_timestamps_token_id&&O.at(-1)!==P.no_timestamps_token_id?O.push(P.no_timestamps_token_id):P.return_timestamps&&O.at(-1)===P.no_timestamps_token_id&&(console.warn("<|notimestamps|> prompt token is removed from generation_config since `return_timestamps` is set to `true`."),O.pop()),O.filter(he=>he!=null)}async generate({inputs:P=null,generation_config:O=null,logits_processor:ne=null,stopping_criteria:ge=null,...he}){O=this._prepare_generation_config(O,he);const Ee=he.decoder_input_ids??this._retrieve_init_tokens(O);if(O.return_timestamps&&(ne??(ne=new p.LogitsProcessorList),ne.push(new p.WhisperTimeStampLogitsProcessor(O,Ee))),O.begin_suppress_tokens&&(ne??(ne=new p.LogitsProcessorList),ne.push(new p.SuppressTokensAtBeginLogitsProcessor(O.begin_suppress_tokens,Ee.length))),O.return_token_timestamps){if(!O.alignment_heads)throw new Error("Model generation config has no `alignment_heads`, token-level timestamps not available. See https://gist.github.com/hollance/42e32852f24243b748ae6bc1f985b13a on how to add this property to the generation config.");O.task==="translate"&&console.warn("Token-level timestamps may not be reliable for task 'translate'."),O.output_attentions=!0,O.return_dict_in_generate=!0}const De=await super.generate({inputs:P,generation_config:O,logits_processor:ne,decoder_input_ids:Ee,...he});return O.return_token_timestamps&&(De.token_timestamps=this._extract_token_timestamps(De,O.alignment_heads,O.num_frames)),De}_extract_token_timestamps(P,O,ne=null,ge=.02){if(!P.cross_attentions)throw new Error("Model outputs must contain cross attentions to extract timestamps. This is most likely because the model was not exported with `output_attentions=True`.");ne==null&&console.warn("`num_frames` has not been set, meaning the entire audio will be analyzed. This may lead to inaccurate token-level timestamps for short audios (< 30 seconds).");let he=this.config.median_filter_width;he===void 0&&(console.warn("Model config has no `median_filter_width`, using default value of 7."),he=7);const Ee=P.cross_attentions,De=Array.from({length:this.config.decoder_layers},(Et,nt)=>(0,d.cat)(Ee.map($t=>$t[nt]),2)),Ne=(0,d.stack)(O.map(([Et,nt])=>{if(Et>=De.length)throw new Error(`Layer index ${Et} is out of bounds for cross attentions (length ${De.length}).`);return ne?De[Et].slice(null,nt,null,[0,ne]):De[Et].slice(null,nt)})).transpose(1,0,2,3),[Xe,mt]=(0,d.std_mean)(Ne,-2,0,!0),wt=Ne.clone();for(let Et=0;Et<wt.dims[0];++Et){const nt=wt[Et];for(let $t=0;$t<nt.dims[0];++$t){const qt=nt[$t],tr=Xe[Et][$t][0].data,ar=mt[Et][$t][0].data;for(let sr=0;sr<qt.dims[0];++sr){let _r=qt[sr].data;for(let Sr=0;Sr<_r.length;++Sr)_r[Sr]=(_r[Sr]-ar[Sr])/tr[Sr];_r.set((0,f.medianFilter)(_r,he))}}}const dt=[(0,d.mean)(wt,1)],Pt=P.sequences.dims,gt=new d.Tensor("float32",new Float32Array(Pt[0]*Pt[1]),Pt);for(let Et=0;Et<Pt[0];++Et){const nt=dt[Et].neg().squeeze_(0),[$t,qt]=(0,f.dynamic_time_warping)(nt.tolist()),tr=Array.from({length:$t.length-1},(_r,Sr)=>$t[Sr+1]-$t[Sr]),ar=(0,a.mergeArrays)([1],tr).map(_r=>!!_r),sr=[];for(let _r=0;_r<ar.length;++_r)ar[_r]&&sr.push(qt[_r]*ge);gt[Et].data.set(sr,1)}return gt}}class ao extends io{}class Dn extends G{constructor(){super(...arguments);Y(this,"requires_attention_mask",!1);Y(this,"main_input_name","input_values");Y(this,"forward_params",["input_values","decoder_input_ids","past_key_values"])}}class ui extends Dn{}class ci extends Dn{}class lo extends G{constructor(){super(...arguments);Y(this,"main_input_name","pixel_values");Y(this,"forward_params",["pixel_values","decoder_input_ids","encoder_hidden_states","past_key_values"])}}class uo extends G{constructor(){super(...arguments);Y(this,"forward_params",["input_ids","attention_mask","pixel_values","position_ids","past_key_values"])}}class cn extends uo{_merge_input_ids_with_image_features({inputs_embeds:P,image_features:O,input_ids:ne,attention_mask:ge}){const he=this.config.image_token_index,De=ne.tolist().map(dt=>dt.findIndex(Pt=>Pt==he)),Ne=De.every(dt=>dt===-1),Xe=De.every(dt=>dt!==-1);if(!Ne&&!Xe)throw new Error("Every input should contain either 0 or 1 image token.");if(Ne)return{inputs_embeds:P,attention_mask:ge};const mt=[],wt=[];for(let dt=0;dt<De.length;++dt){const Pt=De[dt],gt=P[dt],Et=O[dt],nt=ge[dt];mt.push((0,d.cat)([gt.slice([0,Pt]),Et,gt.slice([Pt+1,gt.dims[0]])],0)),wt.push((0,d.cat)([nt.slice([0,Pt]),(0,d.ones)([Et.dims[0]]),nt.slice([Pt+1,nt.dims[0]])],0))}return{inputs_embeds:(0,d.stack)(mt,0),attention_mask:(0,d.stack)(wt,0)}}}class Vs extends cn{}class di extends cn{}class co extends G{constructor(){super(...arguments);Y(this,"forward_params",["input_ids","inputs_embeds","attention_mask","pixel_values","encoder_outputs","decoder_input_ids","decoder_inputs_embeds","decoder_attention_mask","past_key_values"]);Y(this,"main_input_name","inputs_embeds")}}class pi extends co{_merge_input_ids_with_image_features({inputs_embeds:P,image_features:O,input_ids:ne,attention_mask:ge}){return{inputs_embeds:(0,d.cat)([O,P],1),attention_mask:(0,d.cat)([(0,d.ones)(O.dims.slice(0,2)),ge],1)}}async _prepare_inputs_embeds({input_ids:P,pixel_values:O,inputs_embeds:ne,attention_mask:ge}){if(!P&&!O)throw new Error("Either `input_ids` or `pixel_values` should be provided.");let he,Ee;return P&&(he=await this.encode_text({input_ids:P})),O&&(Ee=await this.encode_image({pixel_values:O})),he&&Ee?{inputs_embeds:ne,attention_mask:ge}=this._merge_input_ids_with_image_features({inputs_embeds:he,image_features:Ee,input_ids:P,attention_mask:ge}):ne=he||Ee,{inputs_embeds:ne,attention_mask:ge}}async forward({input_ids:P,pixel_values:O,attention_mask:ne,decoder_input_ids:ge,decoder_attention_mask:he,encoder_outputs:Ee,past_key_values:De,inputs_embeds:Ne,decoder_inputs_embeds:Xe}){if(Ne||({inputs_embeds:Ne,attention_mask:ne}=await this._prepare_inputs_embeds({input_ids:P,pixel_values:O,inputs_embeds:Ne,attention_mask:ne})),!Ee){let{last_hidden_state:dt}=await se(this,{inputs_embeds:Ne,attention_mask:ne});Ee=dt}if(!Xe){if(!ge)throw new Error("Either `decoder_input_ids` or `decoder_inputs_embeds` should be provided.");Xe=await this.encode_text({input_ids:ge})}return await ae(this,{inputs_embeds:Xe,attention_mask:he,encoder_attention_mask:ne,encoder_hidden_states:Ee,past_key_values:De},!0)}}class hi extends G{constructor(){super(...arguments);Y(this,"forward_params",["input_ids","attention_mask","pixel_values","position_ids","past_key_values"])}}class mi extends hi{_merge_input_ids_with_image_features(P){const O=P.image_features.dims.at(-1),ne=P.image_features.view(-1,O);return A({image_token_id:this.config.image_token_index,...P,image_features:ne})}}class Ln extends G{constructor(){super(...arguments);Y(this,"forward_params",["input_ids","attention_mask","pixel_values","pixel_attention_mask","position_ids","past_key_values"])}}class dn extends Ln{async encode_image({pixel_values:P,pixel_attention_mask:O}){return(await R(this.sessions.vision_encoder,{pixel_values:P,pixel_attention_mask:O})).image_features}_merge_input_ids_with_image_features(P){const O=P.image_features.dims.at(-1),ne=P.image_features.view(-1,O);return A({image_token_id:this.config.image_token_id,...P,image_features:ne})}}class po extends dn{}class fi extends G{constructor(){super(...arguments);Y(this,"forward_params",["input_ids","inputs_embeds","attention_mask","position_ids","pixel_values","image_sizes","past_key_values"])}}class ho extends fi{async forward({input_ids:P=null,attention_mask:O=null,pixel_values:ne=null,image_sizes:ge=null,position_ids:he=null,inputs_embeds:Ee=null,past_key_values:De=null,generation_config:Ne=null,logits_processor:Xe=null,...mt}){if(!Ee){let dt;if(ne&&P.dims[1]!==1){if(!ge)throw new Error("`image_sizes` must be provided when `pixel_values` is provided.");({image_features:dt}=await R(this.sessions.vision_encoder,{pixel_values:ne,image_sizes:ge}))}else{const Pt=this.config.normalized_config.hidden_size;dt=new d.Tensor("float32",[],[0,Pt])}({inputs_embeds:Ee}=await R(this.sessions.prepare_inputs_embeds,{input_ids:P,image_features:dt}))}return await ae(this,{inputs_embeds:Ee,past_key_values:De,attention_mask:O,position_ids:he,generation_config:Ne,logits_processor:Xe},!1)}}class Ds extends G{}class _i extends Ds{}class fa extends Ds{static async from_pretrained(P,O={}){return super.from_pretrained(P,{...O,model_file_name:O.model_file_name??"text_model"})}}class gi extends Ds{static async from_pretrained(P,O={}){return super.from_pretrained(P,{...O,model_file_name:O.model_file_name??"text_model"})}}class _a extends Ds{static async from_pretrained(P,O={}){return super.from_pretrained(P,{...O,model_file_name:O.model_file_name??"vision_model"})}}class wi extends Ds{static async from_pretrained(P,O={}){return super.from_pretrained(P,{...O,model_file_name:O.model_file_name??"vision_model"})}}class Us extends G{}class Ws extends Us{}class mo extends Us{static async from_pretrained(P,O={}){return super.from_pretrained(P,{...O,model_file_name:O.model_file_name??"text_model"})}}class Mi extends Ds{static async from_pretrained(P,O={}){return super.from_pretrained(P,{...O,model_file_name:O.model_file_name??"vision_model"})}}class bi extends G{}class zn extends bi{}class Gs extends G{}class fo extends Gs{async forward(P){const O=!P.input_ids,ne=!P.pixel_values;if(O&&ne)throw new Error("Either `input_ids` or `pixel_values` should be provided.");if(O&&(P.input_ids=(0,d.ones)([P.pixel_values.dims[0],1])),ne){const{image_size:Xe}=this.config.vision_config;P.pixel_values=(0,d.full)([0,3,Xe,Xe],0)}const{text_embeddings:ge,image_embeddings:he,l2norm_text_embeddings:Ee,l2norm_image_embeddings:De}=await super.forward(P),Ne={};return O||(Ne.text_embeddings=ge,Ne.l2norm_text_embeddings=Ee),ne||(Ne.image_embeddings=he,Ne.l2norm_image_embeddings=De),Ne}}class _o extends Gs{static async from_pretrained(P,O={}){return super.from_pretrained(P,{...O,model_file_name:O.model_file_name??"text_model"})}}class go extends Gs{static async from_pretrained(P,O={}){return super.from_pretrained(P,{...O,model_file_name:O.model_file_name??"vision_model"})}}class Bn extends G{}class wo extends Bn{}class Mo extends Bn{}class bo extends G{}class yo extends bo{}class vo extends bo{}class Ks extends G{}class ct extends Ks{}class yi extends Ks{}class Rn extends G{}class xo extends Rn{}class pn extends Rn{}class Ur extends G{}class hn extends Ur{}class jn extends Ur{}class Nn extends G{}class To extends Nn{}class Eo extends Nn{}class mn extends G{}class Po extends mn{}class Co extends mn{}class Vn extends G{}class fn extends Vn{}class Un extends Vn{}class _n extends G{}class So extends _n{}class $o extends _n{}class Wn extends G{}class Io extends Wn{}class ko extends Wn{}class Gn extends G{}class h extends Gn{}class x extends Gn{}class k extends G{}class L extends k{}class N extends k{}class ue extends G{}class Te extends ue{}class Le extends ue{}class Ke extends G{}class et extends Ke{}class bt extends Ke{}class It extends G{}class Wt extends It{}class yr extends It{}class Fs extends G{}class vi extends Fs{}class vc extends Fs{}class ga extends G{}class xc extends ga{}class Tc extends ga{}class wa extends G{}class Ec extends wa{}class Pc extends wa{}class Ma extends G{}class Cc extends Ma{}class Sc extends Ma{}class ba extends G{}class $c extends ba{}class Ic extends ba{}class ya extends G{}class kc extends ya{}class Ac extends ya{}class va extends G{}class Fc extends va{}class Oc extends va{}class xa extends G{}class Dc extends xa{}class Lc extends xa{}class zc extends G{constructor(){super(...arguments);Y(this,"forward_params",["input_ids","attention_mask","position_ids","past_key_values","pixel_values","image_grid_thw"])}}class Bc extends zc{get_rope_index(P,O,ne,ge){const{vision_config:he,image_token_id:Ee,video_token_id:De,vision_start_token_id:Ne}=this.config,Xe=he.spatial_merge_size??2,mt=[];if(O||ne){let wt=P.tolist();ge||(ge=(0,d.ones_like)(P));const dt=ge.tolist(),Pt=Array.from({length:3},qt=>Array.from({length:P.dims[0]},tr=>Array.from({length:P.dims[1]},ar=>1))),gt=O?O.tolist():[],Et=ne?ne.tolist():[];let nt=0,$t=0;for(let qt=0;qt<wt.length;++qt){const tr=wt[qt].filter((rr,xr)=>dt[qt][xr]==1),sr=tr.reduce((rr,xr,qs)=>(xr==Ne&&rr.push(qs),rr),[]).map(rr=>tr[rr+1]),_r=sr.filter(rr=>rr==Ee).length,Sr=sr.filter(rr=>rr==De).length;let Ct=[],vr=0,qr=_r,wn=Sr;for(let rr=0;rr<sr.length;++rr){const xr=tr.findIndex((yn,fs)=>fs>vr&&yn==Ee),qs=tr.findIndex((yn,fs)=>fs>vr&&yn==De),bn=qr>0&&xr!==-1?xr:tr.length+1,qn=wn>0&&qs!==-1?qs:tr.length+1;let Ni,vl,xl,Tl;bn<qn?([vl,xl,Tl]=gt[nt],++nt,--qr,Ni=bn):([vl,xl,Tl]=Et[$t],++$t,--wn,Ni=qn);const[sv,El,Vi]=[Number(vl),Math.floor(Number(xl)/Xe),Math.floor(Number(Tl)/Xe)],Pl=Ni-vr,bf=Ct.length>0?(0,f.max)(Ct.at(-1))[0]+1:0;Ct.push(Array.from({length:3*Pl},(yn,fs)=>bf+fs%Pl));const Cl=Pl+bf,Ui=sv*El*Vi,nv=Array.from({length:Ui},(yn,fs)=>Cl+Math.floor(fs/(El*Vi))),ov=Array.from({length:Ui},(yn,fs)=>Cl+Math.floor(fs/Vi)%El),iv=Array.from({length:Ui},(yn,fs)=>Cl+fs%Vi);Ct.push([nv,ov,iv].flat()),vr=Ni+Ui}if(vr<tr.length){const rr=Ct.length>0?(0,f.max)(Ct.at(-1))[0]+1:0,xr=tr.length-vr;Ct.push(Array.from({length:3*xr},(qs,bn)=>rr+bn%xr))}const Nr=Ct.reduce((rr,xr)=>rr+xr.length,0),is=new Array(Nr);let Bi=0;for(let rr=0;rr<3;++rr)for(let xr=0;xr<Ct.length;++xr){const qs=Ct[xr],bn=qs.length/3;for(let qn=rr*bn;qn<(rr+1)*bn;++qn)is[Bi++]=qs[qn]}let Mn=0;const Ri=dt[qt];for(let rr=0;rr<Ri.length;++rr)if(Ri[rr]==1){for(let xr=0;xr<3;++xr)Pt[xr][qt][rr]=is[xr*Nr/3+Mn];++Mn}const ji=(0,f.max)(is)[0];mt.push(ji+1-wt[qt].length)}return[new d.Tensor("int64",Pt.flat(1/0),[3,P.dims[0],P.dims[1]]),new d.Tensor("int64",mt,[mt.length,1])]}else if(ge){const{data:wt,dims:dt}=ye(ge),Pt=BigInt64Array.from({length:3*wt.length},(Et,nt)=>wt[nt%wt.length]),gt=Array.from({length:dt[0]},(Et,nt)=>(0,f.max)(wt.subarray(dt[1]*nt,dt[1]*(nt+1)))[0]+1n+BigInt(dt[1]));return[new d.Tensor("int64",Pt,[3,...dt]),new d.Tensor("int64",gt,[gt.length,1])]}else{const[wt,dt]=P.dims,Pt=BigInt64Array.from({length:3*wt*dt},(gt,Et)=>BigInt(Math.floor(Et%dt/wt)));return[new d.Tensor("int64",Pt,[3,...P.dims]),(0,d.zeros)([wt,1])]}}async encode_image({pixel_values:P,image_grid_thw:O}){return(await R(this.sessions.vision_encoder,{pixel_values:P,grid_thw:O})).image_features}_merge_input_ids_with_image_features(P){return A({image_token_id:this.config.image_token_id,...P})}prepare_inputs_for_generation(P,O,ne){if(O.attention_mask&&!O.position_ids)if(!O.past_key_values)[O.position_ids,O.rope_deltas]=this.get_rope_index(O.input_ids,O.image_grid_thw,O.video_grid_thw,O.attention_mask);else{O.pixel_values=null;const ge=BigInt(Object.values(O.past_key_values)[0].dims.at(-2)),he=O.rope_deltas.map(Ee=>ge+Ee);O.position_ids=(0,d.stack)([he,he,he],0)}return O}}class Ta extends G{}class Rc extends Ta{}class jc extends Ta{}class Ea extends G{}class Nc extends Ea{}class Vc extends Ea{}class Pa extends G{}class Uc extends Pa{}class Wc extends Pa{}class Ca extends G{}class Gc extends Ca{}class Kc extends Ca{}class Sa extends G{}class Hc extends Sa{}class qc extends Sa{}class $a extends G{}class Qc extends $a{}class Xc extends $a{async _call(P){return new vt(await super._call(P))}}class Ia extends G{}class Jc extends Ia{}class Yc extends Ia{async _call(P){return new vt(await super._call(P))}}class Zc extends G{}class ed extends Zc{}class ka extends G{}class td extends ka{}class rd extends ka{async _call(P){return new vt(await super._call(P))}}class sd extends G{}class nd extends sd{}class Aa extends G{}class od extends Aa{}class id extends Aa{async _call(P){return new vt(await super._call(P))}}class ad extends G{}class ld extends ad{}class Fa extends G{}class ud extends Fa{}class cd extends Fa{async _call(P){return new vt(await super._call(P))}}class dd extends G{}class pd extends dd{async _call(P){return new wf(await super._call(P))}}class Oa extends G{}class hd extends Oa{}class md extends Oa{async _call(P){return new vt(await super._call(P))}}class Da extends G{}class fd extends Da{}class _d extends Da{async _call(P){return new vt(await super._call(P))}}class La extends G{}class gd extends La{}class wd extends La{}class za extends G{}class Md extends za{}class bd extends za{}class Ba extends G{}class yd extends Ba{}class vd extends Ba{async _call(P){return new vt(await super._call(P))}}class xi extends G{}class xd extends xi{}class Td extends xi{async _call(P){return new ja(await super._call(P))}}class Ra extends xi{async _call(P){return new Ed(await super._call(P))}}class ja extends Me{constructor({logits:P,pred_boxes:O}){super(),this.logits=P,this.pred_boxes=O}}class Ed extends Me{constructor({logits:P,pred_boxes:O,pred_masks:ne}){super(),this.logits=P,this.pred_boxes=O,this.pred_masks=ne}}class Na extends G{}class Pd extends Na{}class Cd extends Na{async _call(P){return new Ao(await super._call(P))}}class Ao extends Me{constructor({logits:P,pred_boxes:O}){super(),this.logits=P,this.pred_boxes=O}}class Va extends G{}class Sd extends Va{}class $d extends Va{async _call(P){return new Id(await super._call(P))}}class Id extends Ao{}class Ua extends G{}class kd extends Ua{}class Ad extends Ua{async _call(P){return new Fd(await super._call(P))}}class Fd extends Ao{}class Wa extends G{}class Od extends Wa{}class Dd extends Wa{async _call(P){return new Ao(await super._call(P))}}class Ga extends G{}class Ld extends Ga{}class zd extends Ga{async _call(P){return new Bd(await super._call(P))}}class Bd extends ja{}class Ka extends G{}class Rd extends Ka{}class jd extends Ka{async _call(P){return new vt(await super._call(P))}}class Ha extends G{}class Nd extends Ha{}class Vd extends Ha{async _call(P){return new vt(await super._call(P))}}class qa extends G{}class Ud extends qa{}class Wd extends qa{async _call(P){return new vt(await super._call(P))}}class Ti extends G{}class Gd extends Ti{}class Kd extends Ti{async _call(P){return new vt(await super._call(P))}}class Hd extends Ti{}class Qa extends G{}class qd extends Qa{}class Qd extends Qa{}class Xa extends G{}class Xd extends Xa{}class Jd extends Xa{}class Yd extends G{}class Zd extends Yd{}class Ei extends G{}class ep extends Ei{}class tp extends Ei{}class rp extends Ei{}class sp extends G{}class np extends sp{}class op extends G{}class ip extends op{}class ap extends G{}class lp extends ap{}class Ja extends G{}class up extends Ja{}class cp extends Ja{}class Ya extends G{}class dp extends Ya{}class pp extends Ya{}class hp extends G{}class mp extends hp{}class Za extends G{}class fp extends Za{}class _p extends Za{async _call(P){return new vt(await super._call(P))}}class el extends G{}class gp extends el{}class wp extends el{async _call(P){return new vt(await super._call(P))}}class tl extends G{}class Mp extends tl{}class bp extends tl{async _call(P){return new vt(await super._call(P))}}class rl extends G{}class yp extends rl{}class vp extends rl{async _call(P){return new vt(await super._call(P))}}class xp extends G{}class Tp extends xp{}class sl extends G{}class Ep extends sl{}class Pp extends sl{async _call(P){return new Cp(await super._call(P))}}class Cp extends Me{constructor({logits:P,pred_boxes:O}){super(),this.logits=P,this.pred_boxes=O}}class Sp extends G{}class $p extends Sp{async get_image_embeddings({pixel_values:P}){return await se(this,{pixel_values:P})}async forward(P){if((!P.image_embeddings||!P.image_positional_embeddings)&&(P={...P,...await this.get_image_embeddings(P)}),!P.input_labels&&P.input_points){const ne=P.input_points.dims.slice(0,-1),ge=ne.reduce((he,Ee)=>he*Ee,1);P.input_labels=new d.Tensor("int64",new BigInt64Array(ge).fill(1n),ne)}const O={image_embeddings:P.image_embeddings,image_positional_embeddings:P.image_positional_embeddings};return P.input_points&&(O.input_points=P.input_points),P.input_labels&&(O.input_labels=P.input_labels),P.input_boxes&&(O.input_boxes=P.input_boxes),await R(this.sessions.prompt_encoder_mask_decoder,O)}async _call(P){return new Ip(await super._call(P))}}class Ip extends Me{constructor({iou_scores:P,pred_masks:O}){super(),this.iou_scores=P,this.pred_masks=O}}class nl extends G{}class kp extends nl{}class Ap extends nl{}class ol extends G{}class Fp extends ol{}class Op extends ol{}class Hs extends G{}class Dp extends Hs{}class Lp extends Hs{async _call(P){return new gn(await super._call(P))}}class zp extends Hs{async _call(P){return new vt(await super._call(P))}}class Bp extends Hs{async _call(P){return new Cr(await super._call(P))}}class il extends G{}class Rp extends il{}class jp extends il{async _call(P){return new Cr(await super._call(P))}}class Np extends G{}class Vp extends Np{}class Pi extends G{}class Up extends Pi{}class Wp extends Pi{async _call(P){return new gn(await super._call(P))}}class Gp extends Pi{async _call(P){return new vt(await super._call(P))}}class Fo extends G{}class Kp extends Fo{}class Hp extends Fo{async _call(P){return new gn(await super._call(P))}}class qp extends Fo{async _call(P){return new vt(await super._call(P))}}class Qp extends Fo{async _call(P){return new Cr(await super._call(P))}}class Ci extends G{}class Xp extends Ci{}class Jp extends Ci{async _call(P){return new gn(await super._call(P))}}class Yp extends Ci{async _call(P){return new vt(await super._call(P))}}class V0 extends G{}class Zp extends Hs{}class eh extends Hs{async _call(P){return new gn(await super._call(P))}}class th extends Hs{async _call(P){return new vt(await super._call(P))}}class Kn extends G{}class rh extends Kn{}class sh extends Kn{async _call(P){return new gn(await super._call(P))}}class nh extends Kn{async _call(P){return new vt(await super._call(P))}}class oh extends Kn{async _call(P){return new gf(await super._call(P))}}class ih extends Kn{async _call(P){return new Cr(await super._call(P))}}class ah extends G{}class lh extends ah{}class Si extends G{}class U0 extends Si{}class uh extends Si{}class ch extends Si{async generate_speech(P,O,{threshold:ne=.5,minlenratio:ge=0,maxlenratio:he=20,vocoder:Ee=null}={}){const De={input_ids:P},{encoder_outputs:Ne,encoder_attention_mask:Xe}=await se(this,De),mt=Ne.dims[1]/this.config.reduction_factor,wt=Math.floor(mt*he),dt=Math.floor(mt*ge),Pt=this.config.num_mel_bins;let gt=[],Et=null,nt=null,$t=0;for(;;){++$t;const ar=J(!!nt);let sr;nt?sr=nt.output_sequence_out:sr=new d.Tensor("float32",new Float32Array(Pt),[1,1,Pt]);let _r={use_cache_branch:ar,output_sequence:sr,encoder_attention_mask:Xe,speaker_embeddings:O,encoder_hidden_states:Ne};this.addPastKeyValues(_r,Et),nt=await R(this.sessions.decoder_model_merged,_r),Et=this.getPastKeyValues(nt,Et);const{prob:Sr,spectrum:Ct}=nt;if(gt.push(Ct),$t>=dt&&(Array.from(Sr.data).filter(vr=>vr>=ne).length>0||$t>=wt))break}const qt=(0,d.cat)(gt),{waveform:tr}=await R(Ee.sessions.model,{spectrogram:qt});return{spectrogram:qt,waveform:tr}}}class dh extends G{constructor(){super(...arguments);Y(this,"main_input_name","spectrogram")}}class ph extends G{}class hh extends ph{}class al extends G{}class mh extends al{}class fh extends al{}class ll extends G{}class _h extends ll{}class gh extends ll{}class ul extends G{}class wh extends ul{}class Mh extends ul{}class $i extends G{}class bh extends $i{}class yh extends $i{static async from_pretrained(P,O={}){return super.from_pretrained(P,{...O,model_file_name:O.model_file_name??"text_model"})}}class vh extends $i{static async from_pretrained(P,O={}){return super.from_pretrained(P,{...O,model_file_name:O.model_file_name??"audio_model"})}}class xh extends G{}class cl extends xh{async _call(P){return new Mf(await super._call(P))}}class Ii extends G{}class W0 extends Ii{}class Th extends Ii{}class Eh extends Ii{}class dl extends G{}class Ph extends dl{}class Ch extends dl{}class pl extends G{}class Sh extends pl{}class $h extends pl{async _call(P){return new vt(await super._call(P))}}class hl extends G{}class G0 extends hl{}class K0 extends hl{}class ml extends G{constructor(){super(...arguments);Y(this,"forward_params",["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"])}_apply_and_filter_by_delay_pattern_mask(O){const[ne,ge]=O.dims,he=this.config.decoder.num_codebooks,Ee=ge-he;let De=0;for(let mt=0;mt<O.size;++mt){if(O.data[mt]===this.config.decoder.pad_token_id)continue;const wt=mt%ge,dt=Math.floor(mt/ge)%he,Pt=wt-dt;Pt>0&&Pt<=Ee&&(O.data[De++]=O.data[mt])}const Ne=Math.floor(ne/he),Xe=De/(Ne*he);return new d.Tensor(O.type,O.data.slice(0,De),[Ne,he,Xe])}prepare_inputs_for_generation(O,ne,ge){let he=structuredClone(O);for(let De=0;De<he.length;++De)for(let Ne=0;Ne<he[De].length;++Ne)De%this.config.decoder.num_codebooks>=Ne&&(he[De][Ne]=BigInt(this.config.decoder.pad_token_id));return ge.guidance_scale!==null&&ge.guidance_scale>1&&(he=he.concat(he)),super.prepare_inputs_for_generation(he,ne,ge)}async generate(O){const ne=await super.generate(O),ge=this._apply_and_filter_by_delay_pattern_mask(ne).unsqueeze_(0),{audio_values:he}=await R(this.sessions.encodec_decode,{audio_codes:ge});return he}}class ki extends G{}class Ih extends ki{}class kh extends ki{async _call(P){return new vt(await super._call(P))}}class Ah extends ki{}class Ai extends G{}class Fh extends Ai{}class Oh extends Ai{async _call(P){return new vt(await super._call(P))}}class Dh extends Ai{}class Fi extends G{}class Lh extends Fi{}class zh extends Fi{async _call(P){return new vt(await super._call(P))}}class Bh extends Fi{}class Oi extends G{}class Rh extends Oi{}class jh extends Oi{async _call(P){return new vt(await super._call(P))}}class Nh extends Oi{}class Vh extends G{}class Uh extends Vh{}class Wh extends G{}class Gh extends Wh{constructor(...O){super(...O);Y(this,"forward_params",["input_ids","pixel_values","images_seq_mask","images_emb_mask","attention_mask","position_ids","past_key_values"]);this._generation_mode="text"}async forward(O){const ne=this._generation_mode??"text";let ge;if(ne==="text"||!O.past_key_values){const Xe=this.sessions.prepare_inputs_embeds,mt=(0,a.pick)(O,Xe.inputNames);ge=await R(Xe,mt)}else{const Xe=this.sessions.gen_img_embeds,mt=(0,a.pick)({image_ids:O.input_ids},Xe.inputNames);ge=await R(Xe,mt)}const he={...O,...ge},Ee=await ae(this,he),De=this.sessions[ne==="text"?"lm_head":"gen_head"];if(!De)throw new Error(`Unable to find "${De}" generation head`);const Ne=await R(De,(0,a.pick)(Ee,De.inputNames));return{...ge,...Ee,...Ne}}async generate(O){return this._generation_mode="text",super.generate(O)}async generate_images(O){this._generation_mode="image";const ne=(O.inputs??O[this.main_input_name]).dims[1],he=(await super.generate(O)).slice(null,[ne,null]),Ee=this.sessions.image_decode,{decoded_image:De}=await R(Ee,{generated_tokens:he}),Ne=De.add_(1).mul_(255/2).clamp_(0,255).to("uint8"),Xe=[];for(const mt of Ne){const wt=_.RawImage.fromTensor(mt);Xe.push(wt)}return Xe}}class Kh extends Me{constructor({char_logits:P,bpe_logits:O,wp_logits:ne}){super(),this.char_logits=P,this.bpe_logits=O,this.wp_logits=ne}get logits(){return[this.char_logits,this.bpe_logits,this.wp_logits]}}class Hh extends G{}class qh extends Hh{async _call(P){return new Kh(await super._call(P))}}class fl extends G{}class Qh extends fl{}class Xh extends fl{}class _l extends G{}class Jh extends _l{}class Yh extends _l{}class Zh extends G{constructor(){super(...arguments);Y(this,"forward_params",["input_ids","attention_mask","position_ids","audio_values","past_key_values"])}}class em extends Zh{_merge_input_ids_with_audio_features(P){const O=P.audio_features.dims.at(-1),ne=P.audio_features.view(-1,O);return U({audio_token_id:this.config.ignore_index,...P,audio_features:ne})}}class Di extends G{constructor(){super(...arguments);Y(this,"main_input_name","input_values");Y(this,"forward_params",["input_values"])}}class tm extends Me{constructor({audio_codes:P}){super(),this.audio_codes=P}}class rm extends Me{constructor({audio_values:P}){super(),this.audio_values=P}}class sm extends Di{async encode(P){return new tm(await R(this.sessions.encoder_model,P))}async decode(P){return new rm(await R(this.sessions.decoder_model,P))}}class nm extends Di{static async from_pretrained(P,O={}){return super.from_pretrained(P,{...O,model_file_name:O.model_file_name??"encoder_model"})}}class om extends Di{static async from_pretrained(P,O={}){return super.from_pretrained(P,{...O,model_file_name:O.model_file_name??"decoder_model"})}}class Li extends G{constructor(){super(...arguments);Y(this,"main_input_name","input_values");Y(this,"forward_params",["input_values"])}}class im extends Me{constructor({audio_codes:P}){super(),this.audio_codes=P}}class am extends Me{constructor({audio_values:P}){super(),this.audio_values=P}}class lm extends Li{async encode(P){return new im(await R(this.sessions.encoder_model,P))}async decode(P){return new am(await R(this.sessions.decoder_model,P))}}class um extends Li{static async from_pretrained(P,O={}){return super.from_pretrained(P,{...O,model_file_name:O.model_file_name??"encoder_model"})}}class cm extends Li{static async from_pretrained(P,O={}){return super.from_pretrained(P,{...O,model_file_name:O.model_file_name??"decoder_model"})}}class zi extends G{constructor(){super(...arguments);Y(this,"main_input_name","input_values");Y(this,"forward_params",["input_values"])}}class dm extends zi{async encode(P){return await R(this.sessions.encoder_model,P)}async decode(P){return await R(this.sessions.decoder_model,P)}}class pm extends zi{static async from_pretrained(P,O={}){return super.from_pretrained(P,{...O,model_file_name:O.model_file_name??"encoder_model"})}}class hm extends zi{static async from_pretrained(P,O={}){return super.from_pretrained(P,{...O,model_file_name:O.model_file_name??"decoder_model"})}}class Dt{static async from_pretrained(P,{progress_callback:O=null,config:ne=null,cache_dir:ge=null,local_files_only:he=!1,revision:Ee="main",model_file_name:De=null,subfolder:Ne="onnx",device:Xe=null,dtype:mt=null,use_external_data_format:wt=null,session_options:dt={}}={}){const Pt={progress_callback:O,config:ne,cache_dir:ge,local_files_only:he,revision:Ee,model_file_name:De,subfolder:Ne,device:Xe,dtype:mt,use_external_data_format:wt,session_options:dt};if(Pt.config=await s.AutoConfig.from_pretrained(P,Pt),!this.MODEL_CLASS_MAPPINGS)throw new Error("`MODEL_CLASS_MAPPINGS` not implemented for this type of `AutoClass`: "+this.name);const gt=Pt.config.model_type;for(const Et of this.MODEL_CLASS_MAPPINGS){let nt=Et.get(gt);if(!nt){for(const $t of Et.values())if($t[0]===gt){nt=$t;break}if(!nt)continue}return await nt[1].from_pretrained(P,Pt)}if(this.BASE_IF_FAIL)return Rm.has(gt)||console.warn(`Unknown model class "${gt}", attempting to construct from base class.`),await G.from_pretrained(P,Pt);throw Error(`Unsupported model type: ${gt}`)}}Y(Dt,"MODEL_CLASS_MAPPINGS",null),Y(Dt,"BASE_IF_FAIL",!1);const H0=new Map([["bert",["BertModel",Pe]],["modernbert",["ModernBertModel",Ie]],["nomic_bert",["NomicBertModel",Ge]],["roformer",["RoFormerModel",pt]],["electra",["ElectraModel",me]],["esm",["EsmModel",it]],["convbert",["ConvBertModel",Mt]],["camembert",["CamembertModel",lt]],["deberta",["DebertaModel",Or]],["deberta-v2",["DebertaV2Model",Cs]],["mpnet",["MPNetModel",en]],["albert",["AlbertModel",de]],["distilbert",["DistilBertModel",Is]],["roberta",["RobertaModel",br]],["xlm",["XLMModel",un]],["xlm-roberta",["XLMRobertaModel",ti]],["clap",["ClapModel",bh]],["clip",["CLIPModel",_i]],["clipseg",["CLIPSegModel",wo]],["chinese_clip",["ChineseCLIPModel",zn]],["siglip",["SiglipModel",Ws]],["jina_clip",["JinaCLIPModel",fo]],["mobilebert",["MobileBertModel",ss]],["squeezebert",["SqueezeBertModel",js]],["wav2vec2",["Wav2Vec2Model",Dp]],["wav2vec2-bert",["Wav2Vec2BertModel",Xp]],["unispeech",["UniSpeechModel",Up]],["unispeech-sat",["UniSpeechSatModel",Kp]],["hubert",["HubertModel",Zp]],["wavlm",["WavLMModel",rh]],["audio-spectrogram-transformer",["ASTModel",ii]],["vits",["VitsModel",cl]],["pyannote",["PyAnnoteModel",Rp]],["wespeaker-resnet",["WeSpeakerResNetModel",Vp]],["detr",["DetrModel",xd]],["rt_detr",["RTDetrModel",Pd]],["rt_detr_v2",["RTDetrV2Model",Sd]],["rf_detr",["RFDetrModel",kd]],["d_fine",["DFineModel",Od]],["table-transformer",["TableTransformerModel",Ld]],["vit",["ViTModel",Qc]],["ijepa",["IJepaModel",Jc]],["pvt",["PvtModel",td]],["vit_msn",["ViTMSNModel",od]],["vit_mae",["ViTMAEModel",nd]],["groupvit",["GroupViTModel",ld]],["fastvit",["FastViTModel",ud]],["mobilevit",["MobileViTModel",hd]],["mobilevitv2",["MobileViTV2Model",fd]],["owlvit",["OwlViTModel",gd]],["owlv2",["Owlv2Model",Md]],["beit",["BeitModel",yd]],["deit",["DeiTModel",Rd]],["hiera",["HieraModel",Nd]],["convnext",["ConvNextModel",fp]],["convnextv2",["ConvNextV2Model",gp]],["dinov2",["Dinov2Model",Mp]],["dinov2_with_registers",["Dinov2WithRegistersModel",yp]],["resnet",["ResNetModel",Ud]],["swin",["SwinModel",Gd]],["swin2sr",["Swin2SRModel",qd]],["donut-swin",["DonutSwinModel",mp]],["yolos",["YolosModel",Ep]],["dpt",["DPTModel",Xd]],["glpn",["GLPNModel",dp]],["hifigan",["SpeechT5HifiGan",dh]],["efficientnet",["EfficientNetModel",Sh]],["decision_transformer",["DecisionTransformerModel",Uh]],["patchtst",["PatchTSTForPrediction",Qh]],["patchtsmixer",["PatchTSMixerForPrediction",Jh]],["mobilenet_v1",["MobileNetV1Model",Ih]],["mobilenet_v2",["MobileNetV2Model",Fh]],["mobilenet_v3",["MobileNetV3Model",Lh]],["mobilenet_v4",["MobileNetV4Model",Rh]],["maskformer",["MaskFormerModel",up]],["mgp-str",["MgpstrForSceneTextRecognition",qh]],["style_text_to_speech_2",["StyleTextToSpeech2Model",lh]]]),q0=new Map([["t5",["T5Model",ce]],["longt5",["LongT5Model",Qe]],["mt5",["MT5Model",_t]],["bart",["BartModel",Jt]],["mbart",["MBartModel",Er]],["marian",["MarianModel",kp]],["whisper",["WhisperModel",li]],["m2m_100",["M2M100Model",Fp]],["blenderbot",["BlenderbotModel",fr]],["blenderbot-small",["BlenderbotSmallModel",Hr]]]),Q0=new Map([["mimi",["MimiModel",sm]],["dac",["DacModel",lm]],["snac",["SnacModel",dm]]]),X0=new Map([["bloom",["BloomModel",Uc]],["jais",["JAISModel",ct]],["gpt2",["GPT2Model",yo]],["gptj",["GPTJModel",To]],["gpt_bigcode",["GPTBigCodeModel",Po]],["gpt_neo",["GPTNeoModel",xo]],["gpt_neox",["GPTNeoXModel",hn]],["codegen",["CodeGenModel",fn]],["llama",["LlamaModel",So]],["exaone",["ExaoneModel",L]],["olmo",["OlmoModel",et]],["olmo2",["Olmo2Model",Wt]],["mobilellm",["MobileLLMModel",Te]],["granite",["GraniteModel",vi]],["cohere",["CohereModel",xc]],["gemma",["GemmaModel",Ec]],["gemma2",["Gemma2Model",Cc]],["gemma3_text",["Gemma3Model",$c]],["helium",["HeliumModel",Io]],["glm",["GlmModel",h]],["openelm",["OpenELMModel",kc]],["qwen2",["Qwen2Model",Fc]],["qwen3",["Qwen3Model",Dc]],["phi",["PhiModel",Rc]],["phi3",["Phi3Model",Nc]],["mpt",["MptModel",Gc]],["opt",["OPTModel",Hc]],["mistral",["MistralModel",mh]],["starcoder2",["Starcoder2Model",_h]],["falcon",["FalconModel",wh]],["stablelm",["StableLmModel",Ph]]]),gl=new Map([["speecht5",["SpeechT5ForSpeechToText",uh]],["whisper",["WhisperForConditionalGeneration",io]],["lite-whisper",["LiteWhisperForConditionalGeneration",ao]],["moonshine",["MoonshineForConditionalGeneration",ci]]]),mm=new Map([["speecht5",["SpeechT5ForTextToSpeech",ch]]]),fm=new Map([["vits",["VitsModel",cl]],["musicgen",["MusicgenForConditionalGeneration",ml]]]),_m=new Map([["bert",["BertForSequenceClassification",Fe]],["modernbert",["ModernBertForSequenceClassification",Ze]],["roformer",["RoFormerForSequenceClassification",Vt]],["electra",["ElectraForSequenceClassification",ve]],["esm",["EsmForSequenceClassification",ts]],["convbert",["ConvBertForSequenceClassification",D]],["camembert",["CamembertForSequenceClassification",Bt]],["deberta",["DebertaForSequenceClassification",cs]],["deberta-v2",["DebertaV2ForSequenceClassification",ds]],["mpnet",["MPNetForSequenceClassification",rn]],["albert",["AlbertForSequenceClassification",$]],["distilbert",["DistilBertForSequenceClassification",Tr]],["roberta",["RobertaForSequenceClassification",dr]],["xlm",["XLMForSequenceClassification",Zo]],["xlm-roberta",["XLMRobertaForSequenceClassification",si]],["bart",["BartForSequenceClassification",mr]],["mbart",["MBartForSequenceClassification",Zt]],["mobilebert",["MobileBertForSequenceClassification",hr]],["squeezebert",["SqueezeBertForSequenceClassification",an]]]),gm=new Map([["bert",["BertForTokenClassification",Be]],["modernbert",["ModernBertForTokenClassification",st]],["roformer",["RoFormerForTokenClassification",zt]],["electra",["ElectraForTokenClassification",yt]],["esm",["EsmForTokenClassification",rs]],["convbert",["ConvBertForTokenClassification",oe]],["camembert",["CamembertForTokenClassification",Ht]],["deberta",["DebertaForTokenClassification",es]],["deberta-v2",["DebertaV2ForTokenClassification",Ss]],["mpnet",["MPNetForTokenClassification",sn]],["distilbert",["DistilBertForTokenClassification",ps]],["roberta",["RobertaForTokenClassification",pr]],["xlm",["XLMForTokenClassification",ei]],["xlm-roberta",["XLMRobertaForTokenClassification",ni]]]),wl=new Map([["t5",["T5ForConditionalGeneration",xe]],["longt5",["LongT5ForConditionalGeneration",We]],["mt5",["MT5ForConditionalGeneration",Ot]],["bart",["BartForConditionalGeneration",Ut]],["mbart",["MBartForConditionalGeneration",Pr]],["marian",["MarianMTModel",Ap]],["m2m_100",["M2M100ForConditionalGeneration",Op]],["blenderbot",["BlenderbotForConditionalGeneration",Dr]],["blenderbot-small",["BlenderbotSmallForConditionalGeneration",Ir]]]),Ml=new Map([["bloom",["BloomForCausalLM",Wc]],["gpt2",["GPT2LMHeadModel",vo]],["jais",["JAISLMHeadModel",yi]],["gptj",["GPTJForCausalLM",Eo]],["gpt_bigcode",["GPTBigCodeForCausalLM",Co]],["gpt_neo",["GPTNeoForCausalLM",pn]],["gpt_neox",["GPTNeoXForCausalLM",jn]],["codegen",["CodeGenForCausalLM",Un]],["llama",["LlamaForCausalLM",$o]],["exaone",["ExaoneForCausalLM",N]],["olmo",["OlmoForCausalLM",bt]],["olmo2",["Olmo2ForCausalLM",yr]],["mobilellm",["MobileLLMForCausalLM",Le]],["granite",["GraniteForCausalLM",vc]],["cohere",["CohereForCausalLM",Tc]],["gemma",["GemmaForCausalLM",Pc]],["gemma2",["Gemma2ForCausalLM",Sc]],["gemma3_text",["Gemma3ForCausalLM",Ic]],["helium",["HeliumForCausalLM",ko]],["glm",["GlmForCausalLM",x]],["openelm",["OpenELMForCausalLM",Ac]],["qwen2",["Qwen2ForCausalLM",Oc]],["qwen3",["Qwen3ForCausalLM",Lc]],["phi",["PhiForCausalLM",jc]],["phi3",["Phi3ForCausalLM",Vc]],["mpt",["MptForCausalLM",Kc]],["opt",["OPTForCausalLM",qc]],["mbart",["MBartForCausalLM",ms]],["mistral",["MistralForCausalLM",fh]],["starcoder2",["Starcoder2ForCausalLM",gh]],["falcon",["FalconForCausalLM",Mh]],["trocr",["TrOCRForCausalLM",hh]],["stablelm",["StableLmForCausalLM",Ch]],["phi3_v",["Phi3VForCausalLM",ho]]]),J0=new Map([["multi_modality",["MultiModalityCausalLM",Gh]]]),wm=new Map([["bert",["BertForMaskedLM",$e]],["modernbert",["ModernBertForMaskedLM",Ve]],["roformer",["RoFormerForMaskedLM",St]],["electra",["ElectraForMaskedLM",Oe]],["esm",["EsmForMaskedLM",Rt]],["convbert",["ConvBertForMaskedLM",Yr]],["camembert",["CamembertForMaskedLM",rt]],["deberta",["DebertaForMaskedLM",Zr]],["deberta-v2",["DebertaV2ForMaskedLM",Gr]],["mpnet",["MPNetForMaskedLM",tn]],["albert",["AlbertForMaskedLM",X]],["distilbert",["DistilBertForMaskedLM",Ae]],["roberta",["RobertaForMaskedLM",er]],["xlm",["XLMWithLMHeadModel",Yo]],["xlm-roberta",["XLMRobertaForMaskedLM",ri]],["mobilebert",["MobileBertForMaskedLM",cr]],["squeezebert",["SqueezeBertForMaskedLM",on]]]),Mm=new Map([["bert",["BertForQuestionAnswering",He]],["roformer",["RoFormerForQuestionAnswering",gr]],["electra",["ElectraForQuestionAnswering",Ft]],["convbert",["ConvBertForQuestionAnswering",B]],["camembert",["CamembertForQuestionAnswering",wr]],["deberta",["DebertaForQuestionAnswering",Ps]],["deberta-v2",["DebertaV2ForQuestionAnswering",$s]],["mpnet",["MPNetForQuestionAnswering",nn]],["albert",["AlbertForQuestionAnswering",j]],["distilbert",["DistilBertForQuestionAnswering",zr]],["roberta",["RobertaForQuestionAnswering",kr]],["xlm",["XLMForQuestionAnswering",so]],["xlm-roberta",["XLMRobertaForQuestionAnswering",oi]],["mobilebert",["MobileBertForQuestionAnswering",ns]],["squeezebert",["SqueezeBertForQuestionAnswering",ln]]]),bl=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",lo]],["idefics3",["Idefics3ForConditionalGeneration",dn]],["smolvlm",["SmolVLMForConditionalGeneration",po]]]),bm=new Map([["llava",["LlavaForConditionalGeneration",cn]],["llava_onevision",["LlavaOnevisionForConditionalGeneration",Vs]],["moondream1",["Moondream1ForConditionalGeneration",di]],["florence2",["Florence2ForConditionalGeneration",pi]],["qwen2-vl",["Qwen2VLForConditionalGeneration",Bc]],["idefics3",["Idefics3ForConditionalGeneration",dn]],["smolvlm",["SmolVLMForConditionalGeneration",po]],["paligemma",["PaliGemmaForConditionalGeneration",mi]]]),ym=new Map([["ultravox",["UltravoxModel",em]]]),Y0=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",lo]]]),vm=new Map([["vit",["ViTForImageClassification",Xc]],["ijepa",["IJepaForImageClassification",Yc]],["pvt",["PvtForImageClassification",rd]],["vit_msn",["ViTMSNForImageClassification",id]],["fastvit",["FastViTForImageClassification",cd]],["mobilevit",["MobileViTForImageClassification",md]],["mobilevitv2",["MobileViTV2ForImageClassification",_d]],["beit",["BeitForImageClassification",vd]],["deit",["DeiTForImageClassification",jd]],["hiera",["HieraForImageClassification",Vd]],["convnext",["ConvNextForImageClassification",_p]],["convnextv2",["ConvNextV2ForImageClassification",wp]],["dinov2",["Dinov2ForImageClassification",bp]],["dinov2_with_registers",["Dinov2WithRegistersForImageClassification",vp]],["resnet",["ResNetForImageClassification",Wd]],["swin",["SwinForImageClassification",Kd]],["segformer",["SegformerForImageClassification",Th]],["efficientnet",["EfficientNetForImageClassification",$h]],["mobilenet_v1",["MobileNetV1ForImageClassification",kh]],["mobilenet_v2",["MobileNetV2ForImageClassification",Oh]],["mobilenet_v3",["MobileNetV3ForImageClassification",zh]],["mobilenet_v4",["MobileNetV4ForImageClassification",jh]]]),xm=new Map([["detr",["DetrForObjectDetection",Td]],["rt_detr",["RTDetrForObjectDetection",Cd]],["rt_detr_v2",["RTDetrV2ForObjectDetection",$d]],["rf_detr",["RFDetrForObjectDetection",Ad]],["d_fine",["DFineForObjectDetection",Dd]],["table-transformer",["TableTransformerForObjectDetection",zd]],["yolos",["YolosForObjectDetection",Pp]]]),Tm=new Map([["owlvit",["OwlViTForObjectDetection",wd]],["owlv2",["Owlv2ForObjectDetection",bd]],["grounding-dino",["GroundingDinoForObjectDetection",Tp]]]),Hn=new Map([["detr",["DetrForSegmentation",Ra]],["clipseg",["CLIPSegForImageSegmentation",Mo]]]),Em=new Map([["segformer",["SegformerForSemanticSegmentation",Eh]],["sapiens",["SapiensForSemanticSegmentation",ep]],["swin",["SwinForSemanticSegmentation",Hd]],["mobilenet_v1",["MobileNetV1ForSemanticSegmentation",Ah]],["mobilenet_v2",["MobileNetV2ForSemanticSegmentation",Dh]],["mobilenet_v3",["MobileNetV3ForSemanticSegmentation",Bh]],["mobilenet_v4",["MobileNetV4ForSemanticSegmentation",Nh]]]),Pm=new Map([["detr",["DetrForSegmentation",Ra]],["maskformer",["MaskFormerForInstanceSegmentation",cp]]]),Cm=new Map([["sam",["SamModel",$p]]]),Sm=new Map([["wav2vec2",["Wav2Vec2ForCTC",Lp]],["wav2vec2-bert",["Wav2Vec2BertForCTC",Jp]],["unispeech",["UniSpeechForCTC",Wp]],["unispeech-sat",["UniSpeechSatForCTC",Hp]],["wavlm",["WavLMForCTC",sh]],["hubert",["HubertForCTC",eh]]]),$m=new Map([["wav2vec2",["Wav2Vec2ForSequenceClassification",zp]],["wav2vec2-bert",["Wav2Vec2BertForSequenceClassification",Yp]],["unispeech",["UniSpeechForSequenceClassification",Gp]],["unispeech-sat",["UniSpeechSatForSequenceClassification",qp]],["wavlm",["WavLMForSequenceClassification",nh]],["hubert",["HubertForSequenceClassification",th]],["audio-spectrogram-transformer",["ASTForAudioClassification",ai]]]),Im=new Map([["wavlm",["WavLMForXVector",oh]]]),km=new Map([["unispeech-sat",["UniSpeechSatForAudioFrameClassification",Qp]],["wavlm",["WavLMForAudioFrameClassification",ih]],["wav2vec2",["Wav2Vec2ForAudioFrameClassification",Bp]],["pyannote",["PyAnnoteForAudioFrameClassification",jp]]]),Am=new Map([["vitmatte",["VitMatteForImageMatting",pd]]]),Z0=new Map([["patchtst",["PatchTSTForPrediction",Xh]],["patchtsmixer",["PatchTSMixerForPrediction",Yh]]]),Fm=new Map([["swin2sr",["Swin2SRForImageSuperResolution",Qd]]]),Om=new Map([["dpt",["DPTForDepthEstimation",Jd]],["depth_anything",["DepthAnythingForDepthEstimation",Zd]],["glpn",["GLPNForDepthEstimation",pp]],["sapiens",["SapiensForDepthEstimation",tp]],["depth_pro",["DepthProForDepthEstimation",np]],["metric3d",["Metric3DForDepthEstimation",ip]],["metric3dv2",["Metric3Dv2ForDepthEstimation",lp]]]),Dm=new Map([["sapiens",["SapiensForNormalEstimation",rp]]]),Lm=new Map([["vitpose",["VitPoseForPoseEstimation",ed]]]),zm=new Map([["clip",["CLIPVisionModelWithProjection",wi]],["siglip",["SiglipVisionModel",Mi]],["jina_clip",["JinaCLIPVisionModel",go]]]),Bm=[[H0,E.EncoderOnly],[q0,E.EncoderDecoder],[X0,E.DecoderOnly],[Q0,E.AutoEncoder],[_m,E.EncoderOnly],[gm,E.EncoderOnly],[wl,E.Seq2Seq],[gl,E.Seq2Seq],[Ml,E.DecoderOnly],[J0,E.MultiModality],[wm,E.EncoderOnly],[Mm,E.EncoderOnly],[bl,E.Vision2Seq],[bm,E.ImageTextToText],[ym,E.AudioTextToText],[vm,E.EncoderOnly],[Hn,E.EncoderOnly],[Pm,E.EncoderOnly],[Em,E.EncoderOnly],[Am,E.EncoderOnly],[Z0,E.EncoderOnly],[Fm,E.EncoderOnly],[Om,E.EncoderOnly],[Dm,E.EncoderOnly],[Lm,E.EncoderOnly],[xm,E.EncoderOnly],[Tm,E.EncoderOnly],[Cm,E.MaskGeneration],[Sm,E.EncoderOnly],[$m,E.EncoderOnly],[mm,E.Seq2Seq],[fm,E.EncoderOnly],[Im,E.EncoderOnly],[km,E.EncoderOnly],[zm,E.EncoderOnly]];for(const[b,P]of Bm)for(const[O,ne]of b.values())v.set(O,P),y.set(ne,O),M.set(O,ne);const ev=[["MusicgenForConditionalGeneration",ml,E.Musicgen],["Phi3VForCausalLM",ho,E.Phi3V],["CLIPTextModelWithProjection",gi,E.EncoderOnly],["SiglipTextModel",mo,E.EncoderOnly],["JinaCLIPTextModel",_o,E.EncoderOnly],["ClapTextModelWithProjection",yh,E.EncoderOnly],["ClapAudioModelWithProjection",vh,E.EncoderOnly],["DacEncoderModel",um,E.EncoderOnly],["DacDecoderModel",cm,E.EncoderOnly],["MimiEncoderModel",nm,E.EncoderOnly],["MimiDecoderModel",om,E.EncoderOnly],["SnacEncoderModel",pm,E.EncoderOnly],["SnacDecoderModel",hm,E.EncoderOnly]];for(const[b,P,O]of ev)v.set(b,O),y.set(P,b),M.set(b,P);const Rm=new Map([["modnet",Hn],["birefnet",Hn],["isnet",Hn],["ben",Hn]]);for(const[b,P]of Rm.entries())P.set(b,["PreTrainedModel",G]),v.set(b,E.EncoderOnly),y.set(G,b),M.set(b,G);class yl extends Dt{}Y(yl,"MODEL_CLASS_MAPPINGS",Bm.map(P=>P[0])),Y(yl,"BASE_IF_FAIL",!0);class jm extends Dt{}Y(jm,"MODEL_CLASS_MAPPINGS",[_m]);class Nm extends Dt{}Y(Nm,"MODEL_CLASS_MAPPINGS",[gm]);class Vm extends Dt{}Y(Vm,"MODEL_CLASS_MAPPINGS",[wl]);class Um extends Dt{}Y(Um,"MODEL_CLASS_MAPPINGS",[gl]);class Wm extends Dt{}Y(Wm,"MODEL_CLASS_MAPPINGS",[mm]);class Gm extends Dt{}Y(Gm,"MODEL_CLASS_MAPPINGS",[fm]);class Km extends Dt{}Y(Km,"MODEL_CLASS_MAPPINGS",[Ml]);class Hm extends Dt{}Y(Hm,"MODEL_CLASS_MAPPINGS",[wm]);class qm extends Dt{}Y(qm,"MODEL_CLASS_MAPPINGS",[Mm]);class Qm extends Dt{}Y(Qm,"MODEL_CLASS_MAPPINGS",[bl]);class Xm extends Dt{}Y(Xm,"MODEL_CLASS_MAPPINGS",[vm]);class Jm extends Dt{}Y(Jm,"MODEL_CLASS_MAPPINGS",[Hn]);class Ym extends Dt{}Y(Ym,"MODEL_CLASS_MAPPINGS",[Em]);class Zm extends Dt{}Y(Zm,"MODEL_CLASS_MAPPINGS",[Pm]);class ef extends Dt{}Y(ef,"MODEL_CLASS_MAPPINGS",[xm]);class tf extends Dt{}Y(tf,"MODEL_CLASS_MAPPINGS",[Tm]);class rf extends Dt{}Y(rf,"MODEL_CLASS_MAPPINGS",[Cm]);class sf extends Dt{}Y(sf,"MODEL_CLASS_MAPPINGS",[Sm]);class nf extends Dt{}Y(nf,"MODEL_CLASS_MAPPINGS",[$m]);class of extends Dt{}Y(of,"MODEL_CLASS_MAPPINGS",[Im]);class af extends Dt{}Y(af,"MODEL_CLASS_MAPPINGS",[km]);class lf extends Dt{}Y(lf,"MODEL_CLASS_MAPPINGS",[Y0]);class uf extends Dt{}Y(uf,"MODEL_CLASS_MAPPINGS",[Am]);class cf extends Dt{}Y(cf,"MODEL_CLASS_MAPPINGS",[Fm]);class df extends Dt{}Y(df,"MODEL_CLASS_MAPPINGS",[Om]);class pf extends Dt{}Y(pf,"MODEL_CLASS_MAPPINGS",[Dm]);class hf extends Dt{}Y(hf,"MODEL_CLASS_MAPPINGS",[Lm]);class mf extends Dt{}Y(mf,"MODEL_CLASS_MAPPINGS",[zm]);class ff extends Dt{}Y(ff,"MODEL_CLASS_MAPPINGS",[bm]);class _f extends Dt{}Y(_f,"MODEL_CLASS_MAPPINGS",[ym]);class tv extends Me{constructor({logits:P,past_key_values:O,encoder_outputs:ne,decoder_attentions:ge=null,cross_attentions:he=null}){super(),this.logits=P,this.past_key_values=O,this.encoder_outputs=ne,this.decoder_attentions=ge,this.cross_attentions=he}}class vt extends Me{constructor({logits:P,...O}){super(),this.logits=P;const ne=Object.values(O);ne.length>0&&(this.attentions=ne)}}class gf extends Me{constructor({logits:P,embeddings:O}){super(),this.logits=P,this.embeddings=O}}class Cr extends Me{constructor({logits:P}){super(),this.logits=P}}class Ar extends Me{constructor({logits:P}){super(),this.logits=P}}class Br extends Me{constructor({start_logits:P,end_logits:O}){super(),this.start_logits=P,this.end_logits=O}}class gn extends Me{constructor({logits:P}){super(),this.logits=P}}class rv extends Me{constructor({logits:P,past_key_values:O}){super(),this.logits=P,this.past_key_values=O}}class wf extends Me{constructor({alphas:P}){super(),this.alphas=P}}class Mf extends Me{constructor({waveform:P,spectrogram:O}){super(),this.waveform=P,this.spectrogram=O}}},"./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js":(e,r,t)=>{t.r(r),t.d(r,{ASTFeatureExtractor:()=>n});var s=t("./src/base/feature_extraction_utils.js");t("./src/utils/tensor.js");var o=t("./src/utils/audio.js");class n extends s.FeatureExtractor{constructor(a){super(a);const l=this.config.sampling_rate,u=(0,o.mel_filter_bank)(257,this.config.num_mel_bins,20,Math.floor(l/2),l,null,"kaldi",!0);this.mel_filters=u,this.window=(0,o.window_function)(400,"hann",{periodic:!1}),this.mean=this.config.mean,this.std=this.config.std}async _extract_fbank_features(a,l){return(0,o.spectrogram)(a,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:l,transpose:!0})}async _call(a){(0,s.validate_audio_inputs)(a,"ASTFeatureExtractor");const l=await this._extract_fbank_features(a,this.config.max_length);if(this.config.do_normalize){const u=this.std*2,p=l.data;for(let c=0;c<p.length;++c)p[c]=(p[c]-this.mean)/u}return{input_values:l.unsqueeze_(0)}}}},"./src/models/auto/feature_extraction_auto.js":(e,r,t)=>{t.r(r),t.d(r,{AutoFeatureExtractor:()=>i});var s=t("./src/utils/constants.js"),o=t("./src/utils/hub.js");t("./src/base/feature_extraction_utils.js");var n=t("./src/models/feature_extractors.js");class i{static async from_pretrained(l,u={}){const p=await(0,o.getModelJSON)(l,s.FEATURE_EXTRACTOR_NAME,!0,u),c=p.feature_extractor_type,d=n[c];if(!d)throw new Error(`Unknown feature_extractor_type: '${c}'. Please report this at ${s.GITHUB_ISSUE_URL}.`);return new d(p)}}},"./src/models/auto/image_processing_auto.js":(e,r,t)=>{t.r(r),t.d(r,{AutoImageProcessor:()=>a});var s=t("./src/utils/constants.js"),o=t("./src/utils/hub.js"),n=t("./src/base/image_processors_utils.js"),i=t("./src/models/image_processors.js");class a{static async from_pretrained(u,p={}){const c=await(0,o.getModelJSON)(u,s.IMAGE_PROCESSOR_NAME,!0,p),d=c.image_processor_type??c.feature_extractor_type;let _=i[d];return _||(d!==void 0&&console.warn(`Image processor type '${d}' not found, assuming base ImageProcessor. Please report this at ${s.GITHUB_ISSUE_URL}.`),_=n.ImageProcessor),new _(c)}}},"./src/models/auto/processing_auto.js":(e,r,t)=>{t.r(r),t.d(r,{AutoProcessor:()=>u});var s=t("./src/utils/constants.js"),o=t("./src/utils/hub.js"),n=t("./src/base/processing_utils.js"),i=t("./src/models/processors.js"),a=t("./src/models/image_processors.js"),l=t("./src/models/feature_extractors.js");class u{static async from_pretrained(c,d={}){const _=await(0,o.getModelJSON)(c,s.IMAGE_PROCESSOR_NAME,!0,d),{image_processor_type:f,feature_extractor_type:T,processor_class:I}=_;if(I&&i[I])return i[I].from_pretrained(c,d);if(!f&&!T)throw new Error("No `image_processor_type` or `feature_extractor_type` found in the config.");const g={};if(f){const S=a[f];if(!S)throw new Error(`Unknown image_processor_type: '${f}'.`);g.image_processor=new S(_)}if(T){const S=a[T];if(S)g.image_processor=new S(_);else{const E=l[T];if(!E)throw new Error(`Unknown feature_extractor_type: '${T}'.`);g.feature_extractor=new E(_)}}const w={};return new n.Processor(w,g)}}},"./src/models/beit/image_processing_beit.js":(e,r,t)=>{t.r(r),t.d(r,{BeitFeatureExtractor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{}},"./src/models/bit/image_processing_bit.js":(e,r,t)=>{t.r(r),t.d(r,{BitImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{}},"./src/models/chinese_clip/image_processing_chinese_clip.js":(e,r,t)=>{t.r(r),t.d(r,{ChineseCLIPFeatureExtractor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{}},"./src/models/clap/feature_extraction_clap.js":(e,r,t)=>{t.r(r),t.d(r,{ClapFeatureExtractor:()=>n});var s=t("./src/base/feature_extraction_utils.js");t("./src/utils/tensor.js");var o=t("./src/utils/audio.js");class n extends s.FeatureExtractor{constructor(a){super(a),this.mel_filters=(0,o.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,null,"htk"),this.mel_filters_slaney=(0,o.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,"slaney","slaney"),this.window=(0,o.window_function)(this.config.fft_window_size,"hann")}async _get_input_mel(a,l,u,p){let c;const d=a.length-l;if(d>0)if(u==="rand_trunc"){const _=Math.floor(Math.random()*(d+1));a=a.subarray(_,_+l),c=await this._extract_fbank_features(a,this.mel_filters_slaney,this.config.nb_max_samples)}else throw new Error(`Truncation strategy "${u}" not implemented`);else{if(d<0){let _=new Float64Array(l);if(_.set(a),p==="repeat")for(let f=a.length;f<l;f+=a.length)_.set(a.subarray(0,Math.min(a.length,l-f)),f);else if(p==="repeatpad")for(let f=a.length;f<-d;f+=a.length)_.set(a,f);a=_}if(u==="fusion")throw new Error(`Truncation strategy "${u}" not implemented`);c=await this._extract_fbank_features(a,this.mel_filters_slaney,this.config.nb_max_samples)}return c.unsqueeze_(0)}async _extract_fbank_features(a,l,u=null){return(0,o.spectrogram)(a,this.window,this.config.fft_window_size,this.config.hop_length,{power:2,mel_filters:l,log_mel:"dB",max_num_frames:u,do_pad:!1,transpose:!0})}async _call(a,{max_length:l=null}={}){return(0,s.validate_audio_inputs)(a,"ClapFeatureExtractor"),{input_features:(await this._get_input_mel(a,l??this.config.nb_max_samples,this.config.truncation,this.config.padding)).unsqueeze_(0)}}}},"./src/models/clip/image_processing_clip.js":(e,r,t)=>{t.r(r),t.d(r,{CLIPFeatureExtractor:()=>n,CLIPImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{}class n extends o{}},"./src/models/convnext/image_processing_convnext.js":(e,r,t)=>{t.r(r),t.d(r,{ConvNextFeatureExtractor:()=>n,ConvNextImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{constructor(a){super(a),this.crop_pct=this.config.crop_pct??224/256}async resize(a){var u;const l=(u=this.size)==null?void 0:u.shortest_edge;if(l===void 0)throw new Error("Size dictionary must contain 'shortest_edge' key.");if(l<384){const p=Math.floor(l/this.crop_pct),[c,d]=this.get_resize_output_image_size(a,{shortest_edge:p});a=await a.resize(c,d,{resample:this.resample}),a=await a.center_crop(l,l)}else a=await a.resize(l,l,{resample:this.resample});return a}}class n extends o{}},"./src/models/dac/feature_extraction_dac.js":(e,r,t)=>{t.r(r),t.d(r,{DacFeatureExtractor:()=>o});var s=t("./src/models/encodec/feature_extraction_encodec.js");class o extends s.EncodecFeatureExtractor{}},"./src/models/deit/image_processing_deit.js":(e,r,t)=>{t.r(r),t.d(r,{DeiTFeatureExtractor:()=>n,DeiTImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{}class n extends o{}},"./src/models/detr/image_processing_detr.js":(e,r,t)=>{t.r(r),t.d(r,{DetrFeatureExtractor:()=>i,DetrImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js"),o=t("./src/utils/tensor.js");class n extends s.ImageProcessor{async _call(l){const u=await super._call(l),p=[u.pixel_values.dims[0],64,64],c=(0,o.full)(p,1n);return{...u,pixel_mask:c}}post_process_object_detection(...l){return(0,s.post_process_object_detection)(...l)}post_process_panoptic_segmentation(...l){return(0,s.post_process_panoptic_segmentation)(...l)}post_process_instance_segmentation(...l){return(0,s.post_process_instance_segmentation)(...l)}}class i extends n{}},"./src/models/donut/image_processing_donut.js":(e,r,t)=>{t.r(r),t.d(r,{DonutFeatureExtractor:()=>n,DonutImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{pad_image(a,l,u,p={}){const[c,d,_]=l;let f=this.image_mean;Array.isArray(this.image_mean)||(f=new Array(_).fill(f));let T=this.image_std;Array.isArray(T)||(T=new Array(_).fill(f));const I=f.map((g,w)=>-g/T[w]);return super.pad_image(a,l,u,{center:!0,constant_values:I,...p})}}class n extends o{}},"./src/models/dpt/image_processing_dpt.js":(e,r,t)=>{t.r(r),t.d(r,{DPTFeatureExtractor:()=>n,DPTImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{}class n extends o{}},"./src/models/efficientnet/image_processing_efficientnet.js":(e,r,t)=>{t.r(r),t.d(r,{EfficientNetImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{constructor(i){super(i),this.include_top=this.config.include_top??!0,this.include_top&&(this.image_std=this.image_std.map(a=>a*a))}}},"./src/models/encodec/feature_extraction_encodec.js":(e,r,t)=>{t.r(r),t.d(r,{EncodecFeatureExtractor:()=>n});var s=t("./src/base/feature_extraction_utils.js"),o=t("./src/utils/tensor.js");class n extends s.FeatureExtractor{async _call(a){(0,s.validate_audio_inputs)(a,"EncodecFeatureExtractor"),a instanceof Float64Array&&(a=new Float32Array(a));const l=this.config.feature_size;if(a.length%l!==0)throw new Error(`The length of the audio data must be a multiple of the number of channels (${l}).`);const u=[1,l,a.length/l];return{input_values:new o.Tensor("float32",a,u)}}}},"./src/models/feature_extractors.js":(e,r,t)=>{t.r(r),t.d(r,{ASTFeatureExtractor:()=>s.ASTFeatureExtractor,ClapFeatureExtractor:()=>n.ClapFeatureExtractor,DacFeatureExtractor:()=>i.DacFeatureExtractor,EncodecFeatureExtractor:()=>o.EncodecFeatureExtractor,ImageFeatureExtractor:()=>T.ImageProcessor,MoonshineFeatureExtractor:()=>a.MoonshineFeatureExtractor,PyAnnoteFeatureExtractor:()=>l.PyAnnoteFeatureExtractor,SeamlessM4TFeatureExtractor:()=>u.SeamlessM4TFeatureExtractor,SnacFeatureExtractor:()=>p.SnacFeatureExtractor,SpeechT5FeatureExtractor:()=>c.SpeechT5FeatureExtractor,Wav2Vec2FeatureExtractor:()=>d.Wav2Vec2FeatureExtractor,WeSpeakerFeatureExtractor:()=>_.WeSpeakerFeatureExtractor,WhisperFeatureExtractor:()=>f.WhisperFeatureExtractor});var s=t("./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js"),o=t("./src/models/encodec/feature_extraction_encodec.js"),n=t("./src/models/clap/feature_extraction_clap.js"),i=t("./src/models/dac/feature_extraction_dac.js"),a=t("./src/models/moonshine/feature_extraction_moonshine.js"),l=t("./src/models/pyannote/feature_extraction_pyannote.js"),u=t("./src/models/seamless_m4t/feature_extraction_seamless_m4t.js"),p=t("./src/models/snac/feature_extraction_snac.js"),c=t("./src/models/speecht5/feature_extraction_speecht5.js"),d=t("./src/models/wav2vec2/feature_extraction_wav2vec2.js"),_=t("./src/models/wespeaker/feature_extraction_wespeaker.js"),f=t("./src/models/whisper/feature_extraction_whisper.js"),T=t("./src/base/image_processors_utils.js")},"./src/models/florence2/processing_florence2.js":(e,r,t)=>{t.r(r),t.d(r,{Florence2Processor:()=>i});var s=t("./src/base/processing_utils.js"),o=t("./src/models/auto/image_processing_auto.js"),n=t("./src/tokenizers.js");class i extends s.Processor{constructor(l,u){super(l,u);const{tasks_answer_post_processing_type:p,task_prompts_without_inputs:c,task_prompts_with_input:d}=this.image_processor.config;this.tasks_answer_post_processing_type=new Map(Object.entries(p??{})),this.task_prompts_without_inputs=new Map(Object.entries(c??{})),this.task_prompts_with_input=new Map(Object.entries(d??{})),this.regexes={quad_boxes:/(.+?)<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm,bboxes:/([^<]+)?<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm},this.size_per_bin=1e3}construct_prompts(l){typeof l=="string"&&(l=[l]);const u=[];for(const p of l)if(this.task_prompts_without_inputs.has(p))u.push(this.task_prompts_without_inputs.get(p));else{for(const[c,d]of this.task_prompts_with_input)if(p.includes(c)){u.push(d.replaceAll("{input}",p).replaceAll(c,""));break}u.length!==l.length&&u.push(p)}return u}post_process_generation(l,u,p){const c=this.tasks_answer_post_processing_type.get(u)??"pure_text";l=l.replaceAll("<s>","").replaceAll("</s>","");let d;switch(c){case"pure_text":d=l;break;case"description_with_bboxes":case"bboxes":case"phrase_grounding":case"ocr":const _=c==="ocr"?"quad_boxes":"bboxes",f=l.matchAll(this.regexes[_]),T=[],I=[];for(const[g,w,...S]of f)T.push(w?w.trim():T.at(-1)??""),I.push(S.map((E,v)=>(Number(E)+.5)/this.size_per_bin*p[v%2]));d={labels:T,[_]:I};break;default:throw new Error(`Task "${u}" (of type "${c}") not yet implemented.`)}return{[u]:d}}async _call(l,u=null,p={}){if(!l&&!u)throw new Error("Either text or images must be provided");const c=await this.image_processor(l,p),d=u?this.tokenizer(u,p):{};return{...c,...d}}}Y(i,"tokenizer_class",n.AutoTokenizer),Y(i,"image_processor_class",o.AutoImageProcessor)},"./src/models/glpn/image_processing_glpn.js":(e,r,t)=>{t.r(r),t.d(r,{GLPNFeatureExtractor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{}},"./src/models/grounding_dino/image_processing_grounding_dino.js":(e,r,t)=>{t.r(r),t.d(r,{GroundingDinoImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js"),o=t("./src/utils/tensor.js");class n extends s.ImageProcessor{async _call(a){const l=await super._call(a),u=l.pixel_values.dims,p=(0,o.ones)([u[0],u[2],u[3]]);return{...l,pixel_mask:p}}}},"./src/models/grounding_dino/processing_grounding_dino.js":(e,r,t)=>{t.r(r),t.d(r,{GroundingDinoProcessor:()=>l});var s=t("./src/base/processing_utils.js"),o=t("./src/models/auto/image_processing_auto.js"),n=t("./src/tokenizers.js"),i=t("./src/base/image_processors_utils.js");function a(u,p){const d=u.dims.at(-1)-1,_=u.tolist();_.fill(!1,0,1),_.fill(!1,d);const f=p.tolist();return _.map((T,I)=>T?I:null).filter(T=>T!==null).map(T=>f[T])}class l extends s.Processor{async _call(p,c,d={}){const _=p?await this.image_processor(p,d):{};return{...c?this.tokenizer(c,d):{},..._}}post_process_grounded_object_detection(p,c,{box_threshold:d=.25,text_threshold:_=.25,target_sizes:f=null}={}){const{logits:T,pred_boxes:I}=p,g=T.dims[0];if(f!==null&&f.length!==g)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const w=T.dims.at(1),S=T.sigmoid(),E=S.max(-1).tolist(),v=I.tolist().map(y=>y.map(C=>(0,i.center_to_corners_format)(C))),M=[];for(let y=0;y<g;++y){const C=f!==null?f[y]:null;C!==null&&(v[y]=v[y].map(R=>R.map((Z,H)=>Z*C[(H+1)%2])));const F=E[y],z=[],K=[],q=[];for(let R=0;R<w;++R){const Z=F[R];if(Z<=d)continue;const H=v[y][R],J=S[y][R];z.push(Z),q.push(H);const Q=a(J.gt(_),c[y]);K.push(Q)}M.push({scores:z,boxes:q,labels:this.batch_decode(K)})}return M}}Y(l,"tokenizer_class",n.AutoTokenizer),Y(l,"image_processor_class",o.AutoImageProcessor)},"./src/models/idefics3/image_processing_idefics3.js":(e,r,t)=>{t.r(r),t.d(r,{Idefics3ImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js"),o=t("./src/utils/tensor.js");class n extends s.ImageProcessor{constructor(a){super(a),this.do_image_splitting=a.do_image_splitting??!0,this.max_image_size=a.max_image_size}get_resize_for_vision_encoder(a,l){let[u,p]=a.dims.slice(-2);const c=p/u;return p>=u?(p=Math.ceil(p/l)*l,u=Math.floor(p/c),u=Math.ceil(u/l)*l):(u=Math.ceil(u/l)*l,p=Math.floor(u*c),p=Math.ceil(p/l)*l),{height:u,width:p}}async _call(a,{do_image_splitting:l=null,return_row_col_info:u=!1}={}){let p;if(!Array.isArray(a))p=[[a]];else{if(a.length===0||!a[0])throw new Error("No images provided.");Array.isArray(a[0])?p=a:p=[a]}let c=[],d=[],_=[];const f=[],T=[];for(const y of p){let C=await Promise.all(y.map(K=>this.preprocess(K)));f.push(...C.map(K=>K.original_size)),T.push(...C.map(K=>K.reshaped_input_size)),C.forEach(K=>K.pixel_values.unsqueeze_(0));const{longest_edge:F}=this.max_image_size;let z;if(l??this.do_image_splitting){let K=new Array(C.length),q=new Array(C.length);z=await Promise.all(C.map(async(R,Z)=>{const H=this.get_resize_for_vision_encoder(R.pixel_values,F),J=await(0,o.interpolate_4d)(R.pixel_values,{size:[H.height,H.width]}),{frames:Q,num_splits_h:se,num_splits_w:fe}=await this.split_image(J,this.max_image_size);return K[Z]=se,q[Z]=fe,(0,o.cat)(Q,0)})),d.push(K),_.push(q)}else{const K=[F,F];z=await Promise.all(C.map(q=>(0,o.interpolate_4d)(q.pixel_values,{size:K}))),d.push(new Array(C.length).fill(0)),_.push(new Array(C.length).fill(0))}c.push((0,o.cat)(z,0))}const I=c.length,[g,w,S,E]=c[0].dims;let v,M;if(I===1)v=c[0].unsqueeze_(0),M=(0,o.full)([I,g,S,E],!0);else{const y=Math.max(...c.map(z=>z.dims.at(0)));M=(0,o.full)([I,y,S,E],!0);const C=M.data,F=y*S*E;for(let z=0;z<I;++z){const K=c[z].dims[0];if(K<y){c[z]=(0,o.cat)([c[z],(0,o.full)([y-K,w,S,E],0)],0);const q=z*F+K*S*E,R=(z+1)*F;C.fill(!1,q,R)}}v=(0,o.stack)(c,0)}return{pixel_values:v,pixel_attention_mask:M,original_sizes:f,reshaped_input_sizes:T,...u?{rows:d,cols:_}:{}}}async split_image(a,{longest_edge:l}){const u=l,p=l,c=[],[d,_]=a.dims.slice(-2);let f=0,T=0;if(d>u||_>p){f=Math.ceil(d/u),T=Math.ceil(_/p);const I=Math.ceil(d/f),g=Math.ceil(_/T);for(let E=0;E<f;++E)for(let v=0;v<T;++v){let M,y,C,F;E===f-1?(y=d-I,F=d):(y=E*I,F=(E+1)*I),v===T-1?(M=_-g,C=_):(M=v*g,C=(v+1)*g);const z=[y,M],K=[F,C],q=await(0,o.slice)(a,z,K,[2,3]);c.push(q)}const w=u,S=p;(d!==w||_!==S)&&(a=await(0,o.interpolate_4d)(a,{size:[w,S]}))}return c.push(a),{frames:c,num_splits_h:f,num_splits_w:T}}}},"./src/models/idefics3/processing_idefics3.js":(e,r,t)=>{t.r(r),t.d(r,{Idefics3Processor:()=>p});var s=t("./src/base/processing_utils.js"),o=t("./src/models/auto/image_processing_auto.js"),n=t("./src/tokenizers.js");t("./src/utils/image.js");var i=t("./src/utils/core.js");function a(c,d,_,f,T,I){let g="";for(let w=0;w<d;++w){for(let S=0;S<_;++S)g+=f+`<row_${w+1}_col_${S+1}>`+T.repeat(c);g+=`
`}return g+=`
${f}${I}`+T.repeat(c)+`${f}`,g}function l(c,d,_,f){return`${d}${f}`+_.repeat(c)+`${d}`}function u(c,d,_,f,T,I){return c===0&&d===0?l(_,f,T,I):a(_,c,d,f,T,I)}class p extends s.Processor{constructor(){super(...arguments);Y(this,"fake_image_token","<fake_token_around_image>");Y(this,"image_token","<image>");Y(this,"global_img_token","<global-img>")}async _call(_,f=null,T={}){T.return_row_col_info??(T.return_row_col_info=!0);let I;f&&(I=await this.image_processor(f,T)),Array.isArray(_)||(_=[_]);const g=I.rows??[new Array(_.length).fill(0)],w=I.cols??[new Array(_.length).fill(0)],S=this.config.image_seq_len,E=[],v=[];for(let y=0;y<_.length;++y){const C=_[y],F=g[y],z=w[y];E.push((0,i.count)(C,this.image_token));const K=F.map((Z,H)=>u(Z,z[H],S,this.fake_image_token,this.image_token,this.global_img_token)),q=C.split(this.image_token);if(q.length===0)throw new Error("The image token should be present in the text.");let R=q[0];for(let Z=0;Z<K.length;++Z)R+=K[Z]+q[Z+1];v.push(R)}return{...this.tokenizer(v),...I}}}Y(p,"image_processor_class",o.AutoImageProcessor),Y(p,"tokenizer_class",n.AutoTokenizer),Y(p,"uses_processor_config",!0)},"./src/models/image_processors.js":(e,r,t)=>{t.r(r),t.d(r,{BeitFeatureExtractor:()=>s.BeitFeatureExtractor,BitImageProcessor:()=>o.BitImageProcessor,CLIPFeatureExtractor:()=>i.CLIPFeatureExtractor,CLIPImageProcessor:()=>i.CLIPImageProcessor,ChineseCLIPFeatureExtractor:()=>n.ChineseCLIPFeatureExtractor,ConvNextFeatureExtractor:()=>a.ConvNextFeatureExtractor,ConvNextImageProcessor:()=>a.ConvNextImageProcessor,DPTFeatureExtractor:()=>c.DPTFeatureExtractor,DPTImageProcessor:()=>c.DPTImageProcessor,DeiTFeatureExtractor:()=>l.DeiTFeatureExtractor,DeiTImageProcessor:()=>l.DeiTImageProcessor,DetrFeatureExtractor:()=>u.DetrFeatureExtractor,DetrImageProcessor:()=>u.DetrImageProcessor,DonutFeatureExtractor:()=>p.DonutFeatureExtractor,DonutImageProcessor:()=>p.DonutImageProcessor,EfficientNetImageProcessor:()=>d.EfficientNetImageProcessor,GLPNFeatureExtractor:()=>_.GLPNFeatureExtractor,GroundingDinoImageProcessor:()=>f.GroundingDinoImageProcessor,Idefics3ImageProcessor:()=>T.Idefics3ImageProcessor,JinaCLIPImageProcessor:()=>g.JinaCLIPImageProcessor,LlavaOnevisionImageProcessor:()=>w.LlavaOnevisionImageProcessor,Mask2FormerImageProcessor:()=>S.Mask2FormerImageProcessor,MaskFormerFeatureExtractor:()=>E.MaskFormerFeatureExtractor,MaskFormerImageProcessor:()=>E.MaskFormerImageProcessor,MobileNetV1FeatureExtractor:()=>v.MobileNetV1FeatureExtractor,MobileNetV1ImageProcessor:()=>v.MobileNetV1ImageProcessor,MobileNetV2FeatureExtractor:()=>M.MobileNetV2FeatureExtractor,MobileNetV2ImageProcessor:()=>M.MobileNetV2ImageProcessor,MobileNetV3FeatureExtractor:()=>y.MobileNetV3FeatureExtractor,MobileNetV3ImageProcessor:()=>y.MobileNetV3ImageProcessor,MobileNetV4FeatureExtractor:()=>C.MobileNetV4FeatureExtractor,MobileNetV4ImageProcessor:()=>C.MobileNetV4ImageProcessor,MobileViTFeatureExtractor:()=>F.MobileViTFeatureExtractor,MobileViTImageProcessor:()=>F.MobileViTImageProcessor,NougatImageProcessor:()=>z.NougatImageProcessor,OwlViTFeatureExtractor:()=>q.OwlViTFeatureExtractor,OwlViTImageProcessor:()=>q.OwlViTImageProcessor,Owlv2ImageProcessor:()=>K.Owlv2ImageProcessor,Phi3VImageProcessor:()=>R.Phi3VImageProcessor,PvtImageProcessor:()=>Z.PvtImageProcessor,Qwen2VLImageProcessor:()=>H.Qwen2VLImageProcessor,RTDetrImageProcessor:()=>J.RTDetrImageProcessor,SamImageProcessor:()=>Q.SamImageProcessor,SegformerFeatureExtractor:()=>se.SegformerFeatureExtractor,SegformerImageProcessor:()=>se.SegformerImageProcessor,SiglipImageProcessor:()=>fe.SiglipImageProcessor,SmolVLMImageProcessor:()=>ae.SmolVLMImageProcessor,Swin2SRImageProcessor:()=>V.Swin2SRImageProcessor,VLMImageProcessor:()=>I.VLMImageProcessor,ViTFeatureExtractor:()=>A.ViTFeatureExtractor,ViTImageProcessor:()=>A.ViTImageProcessor,VitMatteImageProcessor:()=>U.VitMatteImageProcessor,VitPoseImageProcessor:()=>ee.VitPoseImageProcessor,YolosFeatureExtractor:()=>_e.YolosFeatureExtractor,YolosImageProcessor:()=>_e.YolosImageProcessor});var s=t("./src/models/beit/image_processing_beit.js"),o=t("./src/models/bit/image_processing_bit.js"),n=t("./src/models/chinese_clip/image_processing_chinese_clip.js"),i=t("./src/models/clip/image_processing_clip.js"),a=t("./src/models/convnext/image_processing_convnext.js"),l=t("./src/models/deit/image_processing_deit.js"),u=t("./src/models/detr/image_processing_detr.js"),p=t("./src/models/donut/image_processing_donut.js"),c=t("./src/models/dpt/image_processing_dpt.js"),d=t("./src/models/efficientnet/image_processing_efficientnet.js"),_=t("./src/models/glpn/image_processing_glpn.js"),f=t("./src/models/grounding_dino/image_processing_grounding_dino.js"),T=t("./src/models/idefics3/image_processing_idefics3.js"),I=t("./src/models/janus/image_processing_janus.js"),g=t("./src/models/jina_clip/image_processing_jina_clip.js"),w=t("./src/models/llava_onevision/image_processing_llava_onevision.js"),S=t("./src/models/mask2former/image_processing_mask2former.js"),E=t("./src/models/maskformer/image_processing_maskformer.js"),v=t("./src/models/mobilenet_v1/image_processing_mobilenet_v1.js"),M=t("./src/models/mobilenet_v2/image_processing_mobilenet_v2.js"),y=t("./src/models/mobilenet_v3/image_processing_mobilenet_v3.js"),C=t("./src/models/mobilenet_v4/image_processing_mobilenet_v4.js"),F=t("./src/models/mobilevit/image_processing_mobilevit.js"),z=t("./src/models/nougat/image_processing_nougat.js"),K=t("./src/models/owlv2/image_processing_owlv2.js"),q=t("./src/models/owlvit/image_processing_owlvit.js"),R=t("./src/models/phi3_v/image_processing_phi3_v.js"),Z=t("./src/models/pvt/image_processing_pvt.js"),H=t("./src/models/qwen2_vl/image_processing_qwen2_vl.js"),J=t("./src/models/rt_detr/image_processing_rt_detr.js"),Q=t("./src/models/sam/image_processing_sam.js"),se=t("./src/models/segformer/image_processing_segformer.js"),fe=t("./src/models/siglip/image_processing_siglip.js"),ae=t("./src/models/smolvlm/image_processing_smolvlm.js"),V=t("./src/models/swin2sr/image_processing_swin2sr.js"),A=t("./src/models/vit/image_processing_vit.js"),U=t("./src/models/vitmatte/image_processing_vitmatte.js"),ee=t("./src/models/vitpose/image_processing_vitpose.js"),_e=t("./src/models/yolos/image_processing_yolos.js")},"./src/models/janus/image_processing_janus.js":(e,r,t)=>{t.r(r),t.d(r,{VLMImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{constructor(i){super({do_pad:!0,pad_size:{width:i.image_size,height:i.image_size},...i}),this.constant_values=this.config.background_color.map(a=>a*this.rescale_factor)}pad_image(i,a,l,u){return super.pad_image(i,a,l,{constant_values:this.constant_values,center:!0,...u})}}},"./src/models/janus/processing_janus.js":(e,r,t)=>{t.r(r),t.d(r,{VLChatProcessor:()=>u});var s=t("./src/base/processing_utils.js"),o=t("./src/models/auto/image_processing_auto.js"),n=t("./src/tokenizers.js"),i=t("./src/utils/core.js"),a=t("./src/utils/tensor.js"),l=t("./src/utils/image.js");class u extends s.Processor{constructor(c,d){super(c,d),this.image_tag=this.config.image_tag,this.image_start_tag=this.config.image_start_tag,this.image_end_tag=this.config.image_end_tag,this.num_image_tokens=this.config.num_image_tokens}async _call(c,{images:d=null,chat_template:_="default"}={}){d?Array.isArray(d)||(d=[d]):d=await Promise.all(c.filter(z=>z.images).flatMap(z=>z.images).map(z=>l.RawImage.read(z)));const f=this.tokenizer,T=f.apply_chat_template(c,{tokenize:!1,add_generation_prompt:!0,chat_template:_}),I=z=>f.encode(z,{add_special_tokens:!1}),g=T.split(this.image_tag),w=g.length-1;if(d.length!==w)throw new Error(`Number of images provided (${d.length}) does not match number of "${this.image_tag}" image tags (${w})`);const[S,E,v]=f.model.convert_tokens_to_ids([this.image_tag,this.image_start_tag,this.image_end_tag]);let M=I(g[0]),y=new Array(M.length).fill(!1);for(let z=1;z<g.length;++z){const K=new Array(this.num_image_tokens).fill(S),q=I(g[z]);M=(0,i.mergeArrays)(M,[E],K,[v],q);const R=new Array(this.num_image_tokens).fill(!0);y=(0,i.mergeArrays)(y,[!1],R,[!1],new Array(q.length).fill(!1))}const C=[1,M.length],F={input_ids:new a.Tensor("int64",M,C),attention_mask:new a.Tensor("int64",new Array(M.length).fill(1),C),images_seq_mask:new a.Tensor("bool",y,C),images_emb_mask:new a.Tensor("bool",new Array(w*this.num_image_tokens).fill(!0),[1,w,this.num_image_tokens])};if(d&&d.length>0){const z=await this.image_processor(d);return z.pixel_values.unsqueeze_(0),{...F,...z}}return F}}Y(u,"image_processor_class",o.AutoImageProcessor),Y(u,"tokenizer_class",n.AutoTokenizer),Y(u,"uses_processor_config",!0)},"./src/models/jina_clip/image_processing_jina_clip.js":(e,r,t)=>{t.r(r),t.d(r,{JinaCLIPImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{constructor(i){const{resize_mode:a,fill_color:l,interpolation:u,size:p,...c}=i,d=a==="squash"?{width:p,height:p}:a==="shortest"?{shortest_edge:p}:{longest_edge:p},_=u==="bicubic"?3:2;super({...c,size:d,resample:_,do_center_crop:!0,crop_size:p,do_normalize:!0})}}},"./src/models/jina_clip/processing_jina_clip.js":(e,r,t)=>{t.r(r),t.d(r,{JinaCLIPProcessor:()=>i});var s=t("./src/base/processing_utils.js"),o=t("./src/models/auto/image_processing_auto.js"),n=t("./src/tokenizers.js");class i extends s.Processor{async _call(l=null,u=null,p={}){if(!l&&!u)throw new Error("Either text or images must be provided");const c=l?this.tokenizer(l,p):{},d=u?await this.image_processor(u,p):{};return{...c,...d}}}Y(i,"tokenizer_class",n.AutoTokenizer),Y(i,"image_processor_class",o.AutoImageProcessor)},"./src/models/llava_onevision/image_processing_llava_onevision.js":(e,r,t)=>{t.r(r),t.d(r,{LlavaOnevisionImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{}},"./src/models/mask2former/image_processing_mask2former.js":(e,r,t)=>{t.r(r),t.d(r,{Mask2FormerImageProcessor:()=>o});var s=t("./src/models/maskformer/image_processing_maskformer.js");class o extends s.MaskFormerImageProcessor{}},"./src/models/maskformer/image_processing_maskformer.js":(e,r,t)=>{t.r(r),t.d(r,{MaskFormerFeatureExtractor:()=>n,MaskFormerImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{post_process_panoptic_segmentation(...a){return(0,s.post_process_panoptic_segmentation)(...a)}post_process_instance_segmentation(...a){return(0,s.post_process_instance_segmentation)(...a)}}class n extends o{}},"./src/models/mgp_str/processing_mgp_str.js":(e,r,t)=>{t.r(r),t.d(r,{MgpstrProcessor:()=>l});var s=t("./src/base/processing_utils.js"),o=t("./src/models/auto/image_processing_auto.js"),n=t("./src/tokenizers.js"),i=t("./src/utils/maths.js");const a={char:["char_decode",1],bpe:["bpe_decode",2],wp:["wp_decode",102]};class l extends s.Processor{get char_tokenizer(){return this.components.char_tokenizer}get bpe_tokenizer(){return this.components.bpe_tokenizer}get wp_tokenizer(){return this.components.wp_tokenizer}_decode_helper(p,c){if(!a.hasOwnProperty(c))throw new Error(`Format ${c} is not supported.`);const[d,_]=a[c],f=this[d].bind(this),[T,I]=p.dims,g=[],w=[],S=p.tolist();for(let v=0;v<T;++v){const M=S[v],y=[],C=[];for(let z=1;z<I;++z){const[K,q]=(0,i.max)((0,i.softmax)(M[z]));if(C.push(K),q==_)break;y.push(q)}const F=C.length>0?C.reduce((z,K)=>z*K,1):0;w.push(y),g.push(F)}return[f(w),g]}char_decode(p){return this.char_tokenizer.batch_decode(p).map(c=>c.replaceAll(" ",""))}bpe_decode(p){return this.bpe_tokenizer.batch_decode(p)}wp_decode(p){return this.wp_tokenizer.batch_decode(p).map(c=>c.replaceAll(" ",""))}batch_decode([p,c,d]){const[_,f]=this._decode_helper(p,"char"),[T,I]=this._decode_helper(c,"bpe"),[g,w]=this._decode_helper(d,"wp"),S=[],E=[];for(let v=0;v<_.length;++v){const[M,y]=(0,i.max)([f[v],I[v],w[v]]);S.push([_[v],T[v],g[v]][y]),E.push(M)}return{generated_text:S,scores:E,char_preds:_,bpe_preds:T,wp_preds:g}}static async from_pretrained(...p){const c=await super.from_pretrained(...p),d=await n.AutoTokenizer.from_pretrained("Xenova/gpt2"),_=await n.AutoTokenizer.from_pretrained("Xenova/bert-base-uncased");return c.components={image_processor:c.image_processor,char_tokenizer:c.tokenizer,bpe_tokenizer:d,wp_tokenizer:_},c}async _call(p,c=null){const d=await this.image_processor(p);return c&&(d.labels=this.tokenizer(c).input_ids),d}}Y(l,"tokenizer_class",n.AutoTokenizer),Y(l,"image_processor_class",o.AutoImageProcessor)},"./src/models/mobilenet_v1/image_processing_mobilenet_v1.js":(e,r,t)=>{t.r(r),t.d(r,{MobileNetV1FeatureExtractor:()=>n,MobileNetV1ImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{}class n extends o{}},"./src/models/mobilenet_v2/image_processing_mobilenet_v2.js":(e,r,t)=>{t.r(r),t.d(r,{MobileNetV2FeatureExtractor:()=>n,MobileNetV2ImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{}class n extends o{}},"./src/models/mobilenet_v3/image_processing_mobilenet_v3.js":(e,r,t)=>{t.r(r),t.d(r,{MobileNetV3FeatureExtractor:()=>n,MobileNetV3ImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{}class n extends o{}},"./src/models/mobilenet_v4/image_processing_mobilenet_v4.js":(e,r,t)=>{t.r(r),t.d(r,{MobileNetV4FeatureExtractor:()=>n,MobileNetV4ImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{}class n extends o{}},"./src/models/mobilevit/image_processing_mobilevit.js":(e,r,t)=>{t.r(r),t.d(r,{MobileViTFeatureExtractor:()=>n,MobileViTImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{}class n extends o{}},"./src/models/moonshine/feature_extraction_moonshine.js":(e,r,t)=>{t.r(r),t.d(r,{MoonshineFeatureExtractor:()=>n});var s=t("./src/base/feature_extraction_utils.js"),o=t("./src/utils/tensor.js");class n extends s.FeatureExtractor{async _call(a){(0,s.validate_audio_inputs)(a,"MoonshineFeatureExtractor"),a instanceof Float64Array&&(a=new Float32Array(a));const l=[1,a.length];return{input_values:new o.Tensor("float32",a,l)}}}},"./src/models/moonshine/processing_moonshine.js":(e,r,t)=>{t.r(r),t.d(r,{MoonshineProcessor:()=>i});var s=t("./src/models/auto/feature_extraction_auto.js"),o=t("./src/tokenizers.js"),n=t("./src/base/processing_utils.js");class i extends n.Processor{async _call(l){return await this.feature_extractor(l)}}Y(i,"tokenizer_class",o.AutoTokenizer),Y(i,"feature_extractor_class",s.AutoFeatureExtractor)},"./src/models/nougat/image_processing_nougat.js":(e,r,t)=>{t.r(r),t.d(r,{NougatImageProcessor:()=>o});var s=t("./src/models/donut/image_processing_donut.js");class o extends s.DonutImageProcessor{}},"./src/models/owlv2/image_processing_owlv2.js":(e,r,t)=>{t.r(r),t.d(r,{Owlv2ImageProcessor:()=>o});var s=t("./src/models/owlvit/image_processing_owlvit.js");class o extends s.OwlViTImageProcessor{}},"./src/models/owlvit/image_processing_owlvit.js":(e,r,t)=>{t.r(r),t.d(r,{OwlViTFeatureExtractor:()=>n,OwlViTImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{post_process_object_detection(...a){return(0,s.post_process_object_detection)(...a)}}class n extends o{}},"./src/models/owlvit/processing_owlvit.js":(e,r,t)=>{t.r(r),t.d(r,{OwlViTProcessor:()=>i});var s=t("./src/base/processing_utils.js"),o=t("./src/models/auto/image_processing_auto.js"),n=t("./src/tokenizers.js");class i extends s.Processor{}Y(i,"tokenizer_class",n.AutoTokenizer),Y(i,"image_processor_class",o.AutoImageProcessor)},"./src/models/paligemma/processing_paligemma.js":(e,r,t)=>{t.r(r),t.d(r,{PaliGemmaProcessor:()=>l});var s=t("./src/base/processing_utils.js"),o=t("./src/models/auto/image_processing_auto.js"),n=t("./src/tokenizers.js");const i="<image>";function a(u,p,c,d,_){return`${d.repeat(c*_)}${p}${u}
`}class l extends s.Processor{async _call(p,c=null,d={}){c||(console.warn("You are using PaliGemma without a text prefix. It will perform as a picture-captioning model."),c=""),Array.isArray(p)||(p=[p]),Array.isArray(c)||(c=[c]);const _=this.tokenizer.bos_token,f=this.image_processor.config.image_seq_length;let T;c.some(w=>w.includes(i))?T=c.map(w=>{const S=w.replaceAll(i,i.repeat(f)),E=S.lastIndexOf(i),v=E===-1?0:E+i.length;return S.slice(0,v)+_+S.slice(v)+`
`}):(console.warn("You are passing both `text` and `images` to `PaliGemmaProcessor`. The processor expects special image tokens in the text, as many tokens as there are images per each text. It is recommended to add `<image>` tokens in the very beginning of your text. For this call, we will infer how many images each text has and add special tokens."),T=c.map(w=>a(w,_,f,i,p.length)));const I=this.tokenizer(T,d);return{...await this.image_processor(p,d),...I}}}Y(l,"tokenizer_class",n.AutoTokenizer),Y(l,"image_processor_class",o.AutoImageProcessor),Y(l,"uses_processor_config",!1)},"./src/models/phi3_v/image_processing_phi3_v.js":(e,r,t)=>{t.r(r),t.d(r,{Phi3VImageProcessor:()=>p});var s=t("./src/base/image_processors_utils.js"),o=t("./src/utils/tensor.js");const n=336,i=[2,3],{ceil:a,floor:l,sqrt:u}=Math;class p extends s.ImageProcessor{constructor(d){super({...d,do_normalize:!0,do_pad:!0,pad_size:"custom",do_convert_rgb:!0,do_resize:!0}),this._num_crops=d.num_crops}calc_num_image_tokens_from_image_size(d,_){const{num_img_tokens:f}=this.config;return l((l(_/n)*l(d/n)+1)*f+1+(l(_/n)+1)*u(f))}get_resize_output_image_size(d,_){const f=this._num_crops,[T,I]=d.size;let g=T/I,w=1;for(;w*Math.ceil(w/g)<=f;)w+=1;w-=1;const S=Math.floor(w*336),E=Math.floor(S/g);return[S,E]}pad_image(d,_,f,T={}){const[I,g]=_,w=n*a(I/n),S=n*a(g/n),E=[1,1,1].map((v,M)=>(v-this.image_mean[M])/this.image_std[M]);return super.pad_image(d,_,{width:S,height:w},{center:!0,constant_values:E,...T})}async _call(d,{num_crops:_=null}={}){if(this._num_crops=_??(_=this.config.num_crops),_<4||u(_)%1!==0)throw new Error("num_crops must be a square number >= 4");Array.isArray(d)||(d=[d]);const f=d.length,T=await Promise.all(d.map(y=>this.preprocess(y))),I=T.map(y=>y.original_size),g=T.map(y=>y.reshaped_input_size),w=[];for(const{pixel_values:y}of T){y.unsqueeze_(0);const[C,F]=y.dims.slice(-2),z=await(0,o.interpolate_4d)(y,{size:[n,n],mode:"bicubic"});if(_>0){const K=[],q=u(_),R=l(F/q),Z=l(C/q);for(let J=0;J<q;++J)for(let Q=0;Q<q;++Q){let se,fe,ae,V;J===q-1?(fe=C-Z,V=C):(fe=J*Z,V=(J+1)*Z),Q===q-1?(se=F-R,ae=F):(se=Q*R,ae=(Q+1)*R);const A=[fe,se],U=[V,ae],ee=await(0,o.slice)(y,A,U,i);K.push(ee)}const H=await(0,o.interpolate_4d)((0,o.cat)(K,0),{size:[n,n],mode:"bicubic"});w.push((0,o.cat)([z,H],0))}else w.push(z)}const S=(0,o.stack)(w,0),E=g.map(y=>y.map(C=>n*a(C/n))),v=new o.Tensor("int64",E.flat(),[f,2]),M=E.map(([y,C])=>this.calc_num_image_tokens_from_image_size(C,y));return{pixel_values:S,original_sizes:I,reshaped_input_sizes:g,image_sizes:v,num_img_tokens:M}}}},"./src/models/phi3_v/processing_phi3_v.js":(e,r,t)=>{t.r(r),t.d(r,{Phi3VProcessor:()=>l});var s=t("./src/base/processing_utils.js"),o=t("./src/models/auto/image_processing_auto.js"),n=t("./src/tokenizers.js");t("./src/utils/image.js");const i="<|image|>",a=/<\|image_\d+\|>/g;class l extends s.Processor{async _call(p,c=null,{padding:d=!0,truncation:_=!0,num_crops:f=null}={}){Array.isArray(p)||(p=[p]);let T,I;if(c){I=await this.image_processor(c,{num_crops:f});const{num_img_tokens:g}=I,w=p.map((E,v)=>E.split(a).join(i.repeat(g[v])));T=this.tokenizer(w,{padding:d,truncation:_});const S=this.tokenizer.model.convert_tokens_to_ids([i])[0];T.input_ids.map_(E=>E==S?-E:E)}else T=this.tokenizer(p);return{...T,...I}}}Y(l,"image_processor_class",o.AutoImageProcessor),Y(l,"tokenizer_class",n.AutoTokenizer)},"./src/models/processors.js":(e,r,t)=>{t.r(r),t.d(r,{Florence2Processor:()=>s.Florence2Processor,GroundingDinoProcessor:()=>o.GroundingDinoProcessor,Idefics3Processor:()=>n.Idefics3Processor,JinaCLIPProcessor:()=>a.JinaCLIPProcessor,MgpstrProcessor:()=>l.MgpstrProcessor,MoonshineProcessor:()=>u.MoonshineProcessor,OwlViTProcessor:()=>p.OwlViTProcessor,PaliGemmaProcessor:()=>d.PaliGemmaProcessor,Phi3VProcessor:()=>c.Phi3VProcessor,PyAnnoteProcessor:()=>_.PyAnnoteProcessor,Qwen2VLProcessor:()=>f.Qwen2VLProcessor,SamProcessor:()=>T.SamProcessor,SmolVLMProcessor:()=>I.SmolVLMProcessor,SpeechT5Processor:()=>g.SpeechT5Processor,UltravoxProcessor:()=>w.UltravoxProcessor,VLChatProcessor:()=>i.VLChatProcessor,Wav2Vec2Processor:()=>S.Wav2Vec2Processor,Wav2Vec2ProcessorWithLM:()=>E.Wav2Vec2ProcessorWithLM,WhisperProcessor:()=>v.WhisperProcessor});var s=t("./src/models/florence2/processing_florence2.js"),o=t("./src/models/grounding_dino/processing_grounding_dino.js"),n=t("./src/models/idefics3/processing_idefics3.js"),i=t("./src/models/janus/processing_janus.js"),a=t("./src/models/jina_clip/processing_jina_clip.js"),l=t("./src/models/mgp_str/processing_mgp_str.js"),u=t("./src/models/moonshine/processing_moonshine.js"),p=t("./src/models/owlvit/processing_owlvit.js"),c=t("./src/models/phi3_v/processing_phi3_v.js"),d=t("./src/models/paligemma/processing_paligemma.js"),_=t("./src/models/pyannote/processing_pyannote.js"),f=t("./src/models/qwen2_vl/processing_qwen2_vl.js"),T=t("./src/models/sam/processing_sam.js"),I=t("./src/models/smolvlm/processing_smolvlm.js"),g=t("./src/models/speecht5/processing_speecht5.js"),w=t("./src/models/ultravox/processing_ultravox.js"),S=t("./src/models/wav2vec2/processing_wav2vec2.js"),E=t("./src/models/wav2vec2_with_lm/processing_wav2vec2_with_lm.js"),v=t("./src/models/whisper/processing_whisper.js")},"./src/models/pvt/image_processing_pvt.js":(e,r,t)=>{t.r(r),t.d(r,{PvtImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{}},"./src/models/pyannote/feature_extraction_pyannote.js":(e,r,t)=>{t.r(r),t.d(r,{PyAnnoteFeatureExtractor:()=>i});var s=t("./src/base/feature_extraction_utils.js"),o=t("./src/utils/tensor.js"),n=t("./src/utils/maths.js");class i extends s.FeatureExtractor{async _call(l){(0,s.validate_audio_inputs)(l,"PyAnnoteFeatureExtractor"),l instanceof Float64Array&&(l=new Float32Array(l));const u=[1,1,l.length];return{input_values:new o.Tensor("float32",l,u)}}samples_to_frames(l){return(l-this.config.offset)/this.config.step}post_process_speaker_diarization(l,u){const p=u/this.samples_to_frames(u)/this.config.sampling_rate,c=[];for(const d of l.tolist()){const _=[];let f=-1;for(let T=0;T<d.length;++T){const I=(0,n.softmax)(d[T]),[g,w]=(0,n.max)(I),[S,E]=[T,T+1];w!==f?(f=w,_.push({id:w,start:S,end:E,score:g})):(_.at(-1).end=E,_.at(-1).score+=g)}c.push(_.map(({id:T,start:I,end:g,score:w})=>({id:T,start:I*p,end:g*p,confidence:w/(g-I)})))}return c}}},"./src/models/pyannote/processing_pyannote.js":(e,r,t)=>{t.r(r),t.d(r,{PyAnnoteProcessor:()=>n});var s=t("./src/base/processing_utils.js"),o=t("./src/models/pyannote/feature_extraction_pyannote.js");class n extends s.Processor{async _call(a){return await this.feature_extractor(a)}post_process_speaker_diarization(...a){return this.feature_extractor.post_process_speaker_diarization(...a)}get sampling_rate(){return this.feature_extractor.config.sampling_rate}}Y(n,"feature_extractor_class",o.PyAnnoteFeatureExtractor)},"./src/models/qwen2_vl/image_processing_qwen2_vl.js":(e,r,t)=>{t.r(r),t.d(r,{Qwen2VLImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js"),o=t("./src/utils/tensor.js");class n extends s.ImageProcessor{async _call(a,...l){const{pixel_values:u,original_sizes:p,reshaped_input_sizes:c}=await super._call(a,...l);let d=u;const{temporal_patch_size:_,merge_size:f,patch_size:T}=this.config;d.dims[0]===1&&(d=(0,o.cat)(Array.from({length:_},()=>d),0));const I=d.dims[0]/_,g=d.dims[1],w=Math.floor(d.dims[2]/T),S=Math.floor(d.dims[3]/T),E=d.view(I,_,g,Math.floor(w/f),f,T,Math.floor(S/f),f,T).permute(0,3,6,4,7,2,1,5,8).view(I*w*S,g*_*T*T),v=new o.Tensor("int64",[I,w,S],[1,3]);return{pixel_values:E,image_grid_thw:v,original_sizes:p,reshaped_input_sizes:c}}}},"./src/models/qwen2_vl/processing_qwen2_vl.js":(e,r,t)=>{t.r(r),t.d(r,{Qwen2VLProcessor:()=>i});var s=t("./src/base/processing_utils.js"),o=t("./src/models/auto/image_processing_auto.js"),n=t("./src/tokenizers.js");t("./src/utils/image.js");class i extends s.Processor{async _call(l,u=null,...p){Array.isArray(l)||(l=[l]);let c,d;if(u&&(c=await this.image_processor(u),d=c.image_grid_thw),d){let f=this.image_processor.config.merge_size**2,T=0;const I=d.tolist();l=l.map(g=>{for(;g.includes("<|image_pad|>");){const w=Number(I[T++].reduce((S,E)=>S*E,1n));g=g.replace("<|image_pad|>","<|placeholder|>".repeat(Math.floor(w/f)))}return g.replaceAll("<|placeholder|>","<|image_pad|>")})}return{...this.tokenizer(l),...c}}}Y(i,"image_processor_class",o.AutoImageProcessor),Y(i,"tokenizer_class",n.AutoTokenizer)},"./src/models/rt_detr/image_processing_rt_detr.js":(e,r,t)=>{t.r(r),t.d(r,{RTDetrImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{post_process_object_detection(...i){return(0,s.post_process_object_detection)(...i)}}},"./src/models/sam/image_processing_sam.js":(e,r,t)=>{t.r(r),t.d(r,{SamImageProcessor:()=>i});var s=t("./src/base/image_processors_utils.js"),o=t("./src/utils/core.js"),n=t("./src/utils/tensor.js");class i extends s.ImageProcessor{reshape_input_points(l,u,p,c=!1){l=structuredClone(l);let d=(0,o.calculateDimensions)(l);if(d.length===3)c||(d=[1,...d]),l=[l];else if(d.length!==4)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");for(let _=0;_<l.length;++_){let f=u[_],T=p[_],I=[T[0]/f[0],T[1]/f[1]];for(let g=0;g<l[_].length;++g)for(let w=0;w<l[_][g].length;++w)for(let S=0;S<l[_][g][w].length;++S)l[_][g][w][S]*=I[S%2]}return new n.Tensor("float32",Float32Array.from(l.flat(1/0)),d)}add_input_labels(l,u){let p=(0,o.calculateDimensions)(l);if(p.length===2)p=[1,...p],l=[l];else if(p.length!==3)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");if(p.some((c,d)=>c!==u.dims[d]))throw Error(`The first ${p.length} dimensions of 'input_points' and 'input_labels' must be the same.`);return new n.Tensor("int64",l.flat(1/0).map(BigInt),p)}async _call(l,{input_points:u=null,input_labels:p=null,input_boxes:c=null}={}){const d=await super._call(l);if(u&&(d.input_points=this.reshape_input_points(u,d.original_sizes,d.reshaped_input_sizes)),p){if(!d.input_points)throw Error("`input_points` must be provided if `input_labels` are provided.");d.input_labels=this.add_input_labels(p,d.input_points)}return c&&(d.input_boxes=this.reshape_input_points(c,d.original_sizes,d.reshaped_input_sizes,!0)),d}async post_process_masks(l,u,p,{mask_threshold:c=0,binarize:d=!0,pad_size:_=null}={}){const f=[];_=_??this.pad_size;const T=[_.height,_.width];for(let I=0;I<u.length;++I){const g=u[I],w=p[I];let S=await(0,n.interpolate_4d)(l[I],{mode:"bilinear",size:T});if(S=S.slice(null,null,[0,w[0]],[0,w[1]]),S=await(0,n.interpolate_4d)(S,{mode:"bilinear",size:g}),d){const E=S.data,v=new Uint8Array(E.length);for(let M=0;M<E.length;++M)E[M]>c&&(v[M]=1);S=new n.Tensor("bool",v,S.dims)}f.push(S)}return f}generate_crop_boxes(l,u,{crop_n_layers:p=0,overlap_ratio:c=512/1500,points_per_crop:d=32,crop_n_points_downscale_factor:_=1}={}){}}},"./src/models/sam/processing_sam.js":(e,r,t)=>{t.r(r),t.d(r,{SamProcessor:()=>n});var s=t("./src/base/processing_utils.js"),o=t("./src/models/auto/image_processing_auto.js");class n extends s.Processor{async _call(...a){return await this.image_processor(...a)}post_process_masks(...a){return this.image_processor.post_process_masks(...a)}reshape_input_points(...a){return this.image_processor.reshape_input_points(...a)}}Y(n,"image_processor_class",o.AutoImageProcessor)},"./src/models/seamless_m4t/feature_extraction_seamless_m4t.js":(e,r,t)=>{t.r(r),t.d(r,{SeamlessM4TFeatureExtractor:()=>i});var s=t("./src/base/feature_extraction_utils.js"),o=t("./src/utils/tensor.js"),n=t("./src/utils/audio.js");class i extends s.FeatureExtractor{constructor(l){super(l);const u=this.config.sampling_rate,p=(0,n.mel_filter_bank)(257,this.config.num_mel_bins,20,Math.floor(u/2),u,null,"kaldi",!0);this.mel_filters=p,this.window=(0,n.window_function)(400,"povey",{periodic:!1})}async _extract_fbank_features(l,u){return l=l.map(p=>p*32768),(0,n.spectrogram)(l,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:u,transpose:!0})}async _call(l,{padding:u=!0,pad_to_multiple_of:p=2,do_normalize_per_mel_bins:c=!0,return_attention_mask:d=!0}={}){(0,s.validate_audio_inputs)(l,"SeamlessM4TFeatureExtractor");let _=await this._extract_fbank_features(l,this.config.max_length);if(c){const[v,M]=_.dims,y=_.data;for(let C=0;C<M;++C){let F=0;for(let R=0;R<v;++R)F+=y[R*M+C];const z=F/v;let K=0;for(let R=0;R<v;++R)K+=(y[R*M+C]-z)**2;K/=v-1;const q=Math.sqrt(K+1e-7);for(let R=0;R<v;++R){const Z=R*M+C;y[Z]=(y[Z]-z)/q}}}let f;if(u){const[v,M]=_.dims,y=_.data,C=v%p;if(C>0){const F=new Float32Array(M*(v+C));F.set(y),F.fill(this.config.padding_value,y.length);const z=v+C;_=new o.Tensor(_.type,F,[z,M]),d&&(f=new o.Tensor("int64",new BigInt64Array(z),[1,z]),f.data.fill(1n,0,v))}}const[T,I]=_.dims,g=this.config.stride;if(T%g!==0)throw new Error(`The number of frames (${T}) must be a multiple of the stride (${g}).`);const S=_.view(1,Math.floor(T/g),I*g),E={input_features:S};if(d){const v=S.dims[1],M=new BigInt64Array(v);if(f){const y=f.data;for(let C=1,F=0;C<T;C+=g,++F)M[F]=y[C]}else M.fill(1n);E.attention_mask=new o.Tensor("int64",M,[1,v])}return E}}},"./src/models/segformer/image_processing_segformer.js":(e,r,t)=>{t.r(r),t.d(r,{SegformerFeatureExtractor:()=>n,SegformerImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{post_process_semantic_segmentation(...a){return(0,s.post_process_semantic_segmentation)(...a)}}class n extends o{}},"./src/models/siglip/image_processing_siglip.js":(e,r,t)=>{t.r(r),t.d(r,{SiglipImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{}},"./src/models/smolvlm/image_processing_smolvlm.js":(e,r,t)=>{t.r(r),t.d(r,{SmolVLMImageProcessor:()=>s.Idefics3ImageProcessor});var s=t("./src/models/idefics3/image_processing_idefics3.js")},"./src/models/smolvlm/processing_smolvlm.js":(e,r,t)=>{t.r(r),t.d(r,{SmolVLMProcessor:()=>s.Idefics3Processor});var s=t("./src/models/idefics3/processing_idefics3.js")},"./src/models/snac/feature_extraction_snac.js":(e,r,t)=>{t.r(r),t.d(r,{SnacFeatureExtractor:()=>o});var s=t("./src/models/dac/feature_extraction_dac.js");class o extends s.DacFeatureExtractor{}},"./src/models/speecht5/feature_extraction_speecht5.js":(e,r,t)=>{t.r(r),t.d(r,{SpeechT5FeatureExtractor:()=>o});var s=t("./src/base/feature_extraction_utils.js");class o extends s.FeatureExtractor{}},"./src/models/speecht5/processing_speecht5.js":(e,r,t)=>{t.r(r),t.d(r,{SpeechT5Processor:()=>i});var s=t("./src/base/processing_utils.js"),o=t("./src/tokenizers.js"),n=t("./src/models/auto/feature_extraction_auto.js");class i extends s.Processor{async _call(l){return await this.feature_extractor(l)}}Y(i,"tokenizer_class",o.AutoTokenizer),Y(i,"feature_extractor_class",n.AutoFeatureExtractor)},"./src/models/swin2sr/image_processing_swin2sr.js":(e,r,t)=>{t.r(r),t.d(r,{Swin2SRImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{pad_image(i,a,l,u={}){const[p,c,d]=a;return super.pad_image(i,a,{width:c+(l-c%l)%l,height:p+(l-p%l)%l},{mode:"symmetric",center:!1,constant_values:-1,...u})}}},"./src/models/ultravox/processing_ultravox.js":(e,r,t)=>{t.r(r),t.d(r,{UltravoxProcessor:()=>i});var s=t("./src/models/auto/feature_extraction_auto.js"),o=t("./src/tokenizers.js"),n=t("./src/base/processing_utils.js");class i extends n.Processor{async _call(l,u=null,p={}){if(Array.isArray(l))throw new Error("Batched inputs are not supported yet.");let c={};if(u){const _=u.length,{input_features:f}=await this.feature_extractor(u,{...p,max_length:_}),T=Math.round(_/this.config.encoder_ds_factor+1e-4),I=1+Math.ceil(T/this.config.stack_factor);c.audio_token_len=[I],c.audio_values=f;const g=this.config.audio_placeholder;if(!l.includes(g))throw new Error(`The input text does not contain the image token ${g}.`);l=l.replaceAll(g,g.repeat(I))}return{...this.tokenizer(l,{add_special_tokens:!1,...p}),...c}}}Y(i,"tokenizer_class",o.AutoTokenizer),Y(i,"feature_extractor_class",s.AutoFeatureExtractor),Y(i,"uses_processor_config",!0)},"./src/models/vit/image_processing_vit.js":(e,r,t)=>{t.r(r),t.d(r,{ViTFeatureExtractor:()=>n,ViTImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{}class n extends o{}},"./src/models/vitmatte/image_processing_vitmatte.js":(e,r,t)=>{t.r(r),t.d(r,{VitMatteImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js"),o=t("./src/utils/tensor.js");class n extends s.ImageProcessor{async _call(a,l){Array.isArray(a)||(a=[a]),Array.isArray(l)||(l=[l]);const u=await Promise.all(a.map(d=>this.preprocess(d))),p=await Promise.all(l.map(d=>this.preprocess(d,{do_normalize:!1,do_convert_rgb:!1,do_convert_grayscale:!0})));return{pixel_values:(0,o.stack)(u.map((d,_)=>(0,o.cat)([d.pixel_values,p[_].pixel_values],0)),0),original_sizes:u.map(d=>d.original_size),reshaped_input_sizes:u.map(d=>d.reshaped_input_size)}}}},"./src/models/vitpose/image_processing_vitpose.js":(e,r,t)=>{t.r(r),t.d(r,{VitPoseImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{post_process_pose_estimation(i,a,{threshold:l=null}={}){const u=i.tolist(),[p,c,d,_]=i.dims,f=[];for(let T=0;T<p;++T){const I=u[T],g=a[T],w=[];for(let S=0;S<g.length;++S){const E=g[S],v=[],M=[],y=[],C=E.at(-2)/_,F=E.at(-1)/d;for(let z=0;z<I.length;++z){let[K,q]=[0,0],R=0,Z=-1/0;const H=I[z];for(let Q=0;Q<H.length;++Q){const se=H[Q];for(let fe=0;fe<se.length;++fe){const ae=se[fe];R+=ae,Z=Math.max(Z,ae),K+=(fe+.5)*ae,q+=Q*ae}}if(l!=null&&Z<l)continue;const J=[C*K/R,F*q/R];v.push(J),y.push(z),M.push(Z)}w.push({bbox:E,scores:M,labels:y,keypoints:v})}f.push(w)}return f}}},"./src/models/wav2vec2/feature_extraction_wav2vec2.js":(e,r,t)=>{t.r(r),t.d(r,{Wav2Vec2FeatureExtractor:()=>n});var s=t("./src/base/feature_extraction_utils.js"),o=t("./src/utils/tensor.js");class n extends s.FeatureExtractor{_zero_mean_unit_var_norm(a){const u=a.reduce((c,d)=>c+d,0)/a.length,p=a.reduce((c,d)=>c+(d-u)**2,0)/a.length;return a.map(c=>(c-u)/Math.sqrt(p+1e-7))}async _call(a){(0,s.validate_audio_inputs)(a,"Wav2Vec2FeatureExtractor"),a instanceof Float64Array&&(a=new Float32Array(a));let l=a;this.config.do_normalize&&(l=this._zero_mean_unit_var_norm(l));const u=[1,l.length];return{input_values:new o.Tensor("float32",l,u),attention_mask:new o.Tensor("int64",new BigInt64Array(l.length).fill(1n),u)}}}},"./src/models/wav2vec2/processing_wav2vec2.js":(e,r,t)=>{t.r(r),t.d(r,{Wav2Vec2Processor:()=>i});var s=t("./src/tokenizers.js"),o=t("./src/models/auto/feature_extraction_auto.js"),n=t("./src/base/processing_utils.js");class i extends n.Processor{async _call(l){return await this.feature_extractor(l)}}Y(i,"tokenizer_class",s.AutoTokenizer),Y(i,"feature_extractor_class",o.AutoFeatureExtractor)},"./src/models/wav2vec2_with_lm/processing_wav2vec2_with_lm.js":(e,r,t)=>{t.r(r),t.d(r,{Wav2Vec2ProcessorWithLM:()=>i});var s=t("./src/tokenizers.js"),o=t("./src/models/auto/feature_extraction_auto.js"),n=t("./src/base/processing_utils.js");class i extends n.Processor{async _call(l){return await this.feature_extractor(l)}}Y(i,"tokenizer_class",s.AutoTokenizer),Y(i,"feature_extractor_class",o.AutoFeatureExtractor)},"./src/models/wespeaker/feature_extraction_wespeaker.js":(e,r,t)=>{t.r(r),t.d(r,{WeSpeakerFeatureExtractor:()=>n});var s=t("./src/base/feature_extraction_utils.js");t("./src/utils/tensor.js");var o=t("./src/utils/audio.js");class n extends s.FeatureExtractor{constructor(a){super(a);const l=this.config.sampling_rate,u=(0,o.mel_filter_bank)(257,this.config.num_mel_bins,20,Math.floor(l/2),l,null,"kaldi",!0);this.mel_filters=u,this.window=(0,o.window_function)(400,"hamming",{periodic:!1}),this.min_num_frames=this.config.min_num_frames}async _extract_fbank_features(a){return a=a.map(l=>l*32768),(0,o.spectrogram)(a,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,transpose:!0,min_num_frames:this.min_num_frames})}async _call(a){(0,s.validate_audio_inputs)(a,"WeSpeakerFeatureExtractor");const l=(await this._extract_fbank_features(a)).unsqueeze_(0);if(this.config.fbank_centering_span===null){const u=l.mean(1).data,p=l.data,[c,d,_]=l.dims;for(let f=0;f<c;++f){const T=f*d*_,I=f*_;for(let g=0;g<d;++g){const w=T+g*_;for(let S=0;S<_;++S)p[w+S]-=u[I+S]}}}return{input_features:l}}}},"./src/models/whisper/common_whisper.js":(e,r,t)=>{t.r(r),t.d(r,{WHISPER_LANGUAGE_MAPPING:()=>o,WHISPER_TO_LANGUAGE_CODE_MAPPING:()=>n,whisper_language_to_code:()=>i});const s=[["en","english"],["zh","chinese"],["de","german"],["es","spanish"],["ru","russian"],["ko","korean"],["fr","french"],["ja","japanese"],["pt","portuguese"],["tr","turkish"],["pl","polish"],["ca","catalan"],["nl","dutch"],["ar","arabic"],["sv","swedish"],["it","italian"],["id","indonesian"],["hi","hindi"],["fi","finnish"],["vi","vietnamese"],["he","hebrew"],["uk","ukrainian"],["el","greek"],["ms","malay"],["cs","czech"],["ro","romanian"],["da","danish"],["hu","hungarian"],["ta","tamil"],["no","norwegian"],["th","thai"],["ur","urdu"],["hr","croatian"],["bg","bulgarian"],["lt","lithuanian"],["la","latin"],["mi","maori"],["ml","malayalam"],["cy","welsh"],["sk","slovak"],["te","telugu"],["fa","persian"],["lv","latvian"],["bn","bengali"],["sr","serbian"],["az","azerbaijani"],["sl","slovenian"],["kn","kannada"],["et","estonian"],["mk","macedonian"],["br","breton"],["eu","basque"],["is","icelandic"],["hy","armenian"],["ne","nepali"],["mn","mongolian"],["bs","bosnian"],["kk","kazakh"],["sq","albanian"],["sw","swahili"],["gl","galician"],["mr","marathi"],["pa","punjabi"],["si","sinhala"],["km","khmer"],["sn","shona"],["yo","yoruba"],["so","somali"],["af","afrikaans"],["oc","occitan"],["ka","georgian"],["be","belarusian"],["tg","tajik"],["sd","sindhi"],["gu","gujarati"],["am","amharic"],["yi","yiddish"],["lo","lao"],["uz","uzbek"],["fo","faroese"],["ht","haitian creole"],["ps","pashto"],["tk","turkmen"],["nn","nynorsk"],["mt","maltese"],["sa","sanskrit"],["lb","luxembourgish"],["my","myanmar"],["bo","tibetan"],["tl","tagalog"],["mg","malagasy"],["as","assamese"],["tt","tatar"],["haw","hawaiian"],["ln","lingala"],["ha","hausa"],["ba","bashkir"],["jw","javanese"],["su","sundanese"]],o=new Map(s),n=new Map([...s.map(([a,l])=>[l,a]),["burmese","my"],["valencian","ca"],["flemish","nl"],["haitian","ht"],["letzeburgesch","lb"],["pushto","ps"],["panjabi","pa"],["moldavian","ro"],["moldovan","ro"],["sinhalese","si"],["castilian","es"]]);function i(a){a=a.toLowerCase();let l=n.get(a);if(l===void 0){const u=a.match(/^<\|([a-z]{2})\|>$/);if(u&&(a=u[1]),o.has(a))l=a;else{const c=a.length===2?o.keys():o.values();throw new Error(`Language "${a}" is not supported. Must be one of: ${JSON.stringify(Array.from(c))}`)}}return l}},"./src/models/whisper/feature_extraction_whisper.js":(e,r,t)=>{t.r(r),t.d(r,{WhisperFeatureExtractor:()=>i});var s=t("./src/base/feature_extraction_utils.js");t("./src/utils/tensor.js");var o=t("./src/utils/audio.js"),n=t("./src/utils/maths.js");class i extends s.FeatureExtractor{constructor(l){var u;super(l),(u=this.config).mel_filters??(u.mel_filters=(0,o.mel_filter_bank)(Math.floor(1+this.config.n_fft/2),this.config.feature_size,0,8e3,this.config.sampling_rate,"slaney","slaney")),this.window=(0,o.window_function)(this.config.n_fft,"hann")}async _extract_fbank_features(l){const u=await(0,o.spectrogram)(l,this.window,this.config.n_fft,this.config.hop_length,{power:2,mel_filters:this.config.mel_filters,log_mel:"log10",max_num_frames:Math.min(Math.floor(l.length/this.config.hop_length),this.config.nb_max_frames)}),p=u.data,c=(0,n.max)(p)[0];for(let d=0;d<p.length;++d)p[d]=(Math.max(p[d],c-8)+4)/4;return u}async _call(l,{max_length:u=null}={}){(0,s.validate_audio_inputs)(l,"WhisperFeatureExtractor");let p;const c=u??this.config.n_samples;return l.length>c?(l.length>this.config.n_samples&&console.warn("Attempting to extract features for audio longer than 30 seconds. If using a pipeline to extract transcript from a long audio clip, remember to specify `chunk_length_s` and/or `stride_length_s`."),p=l.slice(0,c)):(p=new Float32Array(c),p.set(l)),{input_features:(await this._extract_fbank_features(p)).unsqueeze_(0)}}}},"./src/models/whisper/generation_whisper.js":(e,r,t)=>{t.r(r),t.d(r,{WhisperGenerationConfig:()=>o});var s=t("./src/generation/configuration_utils.js");class o extends s.GenerationConfig{constructor(){super(...arguments);Y(this,"return_timestamps",null);Y(this,"return_token_timestamps",null);Y(this,"num_frames",null);Y(this,"alignment_heads",null);Y(this,"task",null);Y(this,"language",null);Y(this,"no_timestamps_token_id",null);Y(this,"prompt_ids",null);Y(this,"is_multilingual",null);Y(this,"lang_to_id",null);Y(this,"task_to_id",null);Y(this,"max_initial_timestamp_index",1)}}},"./src/models/whisper/processing_whisper.js":(e,r,t)=>{t.r(r),t.d(r,{WhisperProcessor:()=>i});var s=t("./src/models/auto/feature_extraction_auto.js"),o=t("./src/tokenizers.js"),n=t("./src/base/processing_utils.js");class i extends n.Processor{async _call(l){return await this.feature_extractor(l)}}Y(i,"tokenizer_class",o.AutoTokenizer),Y(i,"feature_extractor_class",s.AutoFeatureExtractor)},"./src/models/yolos/image_processing_yolos.js":(e,r,t)=>{t.r(r),t.d(r,{YolosFeatureExtractor:()=>n,YolosImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js");class o extends s.ImageProcessor{post_process_object_detection(...a){return(0,s.post_process_object_detection)(...a)}}class n extends o{}},"./src/ops/registry.js":(e,r,t)=>{t.r(r),t.d(r,{TensorOpRegistry:()=>l});var s=t("./src/backends/onnx.js"),o=t("./src/utils/tensor.js"),n=t("./src/env.js");const i=n.apis.IS_BROWSER_ENV||n.apis.IS_WEBWORKER_ENV,a=async(u,p,c)=>{const d=await(0,s.createInferenceSession)(new Uint8Array(u),p);let _=Promise.resolve();return async f=>{const T=(0,s.isONNXProxy)(),I=Object.fromEntries(Object.entries(f).map(([w,S])=>[w,(T?S.clone():S).ort_tensor])),g=await(_=i?_.then(()=>d.run(I)):d.run(I));return Array.isArray(c)?c.map(w=>new o.Tensor(g[w])):new o.Tensor(g[c])}};class l{static get nearest_interpolate_4d(){return this._nearest_interpolate_4d||(this._nearest_interpolate_4d=a([8,10,18,0,58,129,1,10,41,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,18,10,4,109,111,100,101,34,7,110,101,97,114,101,115,116,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,21],this.session_options,"y")),this._nearest_interpolate_4d}static get bilinear_interpolate_4d(){return this._bilinear_interpolate_4d||(this._bilinear_interpolate_4d=a([8,9,18,0,58,128,1,10,40,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,17,10,4,109,111,100,101,34,6,108,105,110,101,97,114,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bilinear_interpolate_4d}static get bicubic_interpolate_4d(){return this._bicubic_interpolate_4d||(this._bicubic_interpolate_4d=a([8,9,18,0,58,127,10,39,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,16,10,4,109,111,100,101,34,5,99,117,98,105,99,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bicubic_interpolate_4d}static get matmul(){return this._matmul||(this._matmul=a([8,9,18,0,58,55,10,17,10,1,97,10,1,98,18,1,99,34,6,77,97,116,77,117,108,18,1,114,90,9,10,1,97,18,4,10,2,8,1,90,9,10,1,98,18,4,10,2,8,1,98,9,10,1,99,18,4,10,2,8,1,66,2,16,20],this.session_options,"c")),this._matmul}static get stft(){return this._stft||(this._stft=a([8,7,18,0,58,148,1,10,38,10,1,115,10,1,106,10,1,119,10,1,108,18,1,111,34,4,83,84,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,115,90,26,10,1,115,18,21,10,19,8,1,18,15,10,3,18,1,98,10,3,18,1,115,10,3,18,1,99,90,11,10,1,106,18,6,10,4,8,7,18,0,90,16,10,1,119,18,11,10,9,8,1,18,5,10,3,18,1,119,90,11,10,1,108,18,6,10,4,8,7,18,0,98,31,10,1,111,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,102,10,3,18,1,100,10,3,18,1,99,66,2,16,17],this.session_options,"o")),this._stft}static get rfft(){return this._rfft||(this._rfft=a([8,9,18,0,58,97,10,33,10,1,120,10,0,10,1,97,18,1,121,34,3,68,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,100,90,21,10,1,120,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,90,11,10,1,97,18,6,10,4,8,7,18,0,98,21,10,1,121,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,66,2,16,20],this.session_options,"y")),this._rfft}static get top_k(){return this._top_k||(this._top_k=a([8,10,18,0,58,73,10,18,10,1,120,10,1,107,18,1,118,18,1,105,34,4,84,111,112,75,18,1,116,90,9,10,1,120,18,4,10,2,8,1,90,15,10,1,107,18,10,10,8,8,7,18,4,10,2,8,1,98,9,10,1,118,18,4,10,2,8,1,98,9,10,1,105,18,4,10,2,8,7,66,2,16,21],this.session_options,["v","i"])),this._top_k}static get slice(){return this._slice||(this._slice=a([8,7,18,0,58,96,10,25,10,1,120,10,1,115,10,1,101,10,1,97,10,1,116,18,1,121,34,5,83,108,105,99,101,18,1,114,90,9,10,1,120,18,4,10,2,8,1,90,9,10,1,115,18,4,10,2,8,7,90,9,10,1,101,18,4,10,2,8,7,90,9,10,1,97,18,4,10,2,8,7,90,9,10,1,116,18,4,10,2,8,7,98,9,10,1,121,18,4,10,2,8,1,66,2,16,13],this.session_options,"y")),this._slice}}Y(l,"session_options",{})},"./src/pipelines.js":(e,r,t)=>{t.r(r),t.d(r,{AudioClassificationPipeline:()=>q,AutomaticSpeechRecognitionPipeline:()=>Z,BackgroundRemovalPipeline:()=>se,DepthEstimationPipeline:()=>_e,DocumentQuestionAnsweringPipeline:()=>A,FeatureExtractionPipeline:()=>z,FillMaskPipeline:()=>S,ImageClassificationPipeline:()=>J,ImageFeatureExtractionPipeline:()=>K,ImageSegmentationPipeline:()=>Q,ImageToImagePipeline:()=>ee,ImageToTextPipeline:()=>H,ObjectDetectionPipeline:()=>ae,Pipeline:()=>T,QuestionAnsweringPipeline:()=>w,SummarizationPipeline:()=>v,Text2TextGenerationPipeline:()=>E,TextClassificationPipeline:()=>I,TextGenerationPipeline:()=>C,TextToAudioPipeline:()=>U,TokenClassificationPipeline:()=>g,TranslationPipeline:()=>M,ZeroShotAudioClassificationPipeline:()=>R,ZeroShotClassificationPipeline:()=>F,ZeroShotImageClassificationPipeline:()=>fe,ZeroShotObjectDetectionPipeline:()=>V,pipeline:()=>ze});var s=t("./src/tokenizers.js"),o=t("./src/models.js"),n=t("./src/models/auto/processing_auto.js");t("./src/base/processing_utils.js");var i=t("./src/utils/generic.js"),a=t("./src/utils/core.js"),l=t("./src/utils/maths.js"),u=t("./src/utils/audio.js"),p=t("./src/utils/tensor.js"),c=t("./src/utils/image.js");async function d(pe){return Array.isArray(pe)||(pe=[pe]),await Promise.all(pe.map(W=>c.RawImage.read(W)))}async function _(pe,W){return Array.isArray(pe)||(pe=[pe]),await Promise.all(pe.map(re=>typeof re=="string"||re instanceof URL?(0,u.read_audio)(re,W):re instanceof Float64Array?new Float32Array(re):re))}function f(pe,W){W&&(pe=pe.map(Se=>Se|0));const[re,G,Me,we]=pe;return{xmin:re,ymin:G,xmax:Me,ymax:we}}class T extends i.Callable{constructor({task:W,model:re,tokenizer:G=null,processor:Me=null}){super(),this.task=W,this.model=re,this.tokenizer=G,this.processor=Me}async dispose(){await this.model.dispose()}}class I extends T{constructor(W){super(W)}async _call(W,{top_k:re=1}={}){const G=this.tokenizer(W,{padding:!0,truncation:!0}),Me=await this.model(G),we=this.model.config.problem_type==="multi_label_classification"?$e=>$e.sigmoid():$e=>new p.Tensor("float32",(0,l.softmax)($e.data),$e.dims),Se=this.model.config.id2label,Pe=[];for(const $e of Me.logits){const Fe=we($e),Be=await(0,p.topk)(Fe,re),He=Be[0].tolist(),Ie=Be[1].tolist().map((Ve,Ze)=>({label:Se?Se[Ve]:`LABEL_${Ve}`,score:He[Ze]}));re===1?Pe.push(...Ie):Pe.push(Ie)}return Array.isArray(W)||re===1?Pe:Pe[0]}}class g extends T{constructor(W){super(W)}async _call(W,{ignore_labels:re=["O"]}={}){const G=Array.isArray(W),Me=this.tokenizer(G?W:[W],{padding:!0,truncation:!0}),Se=(await this.model(Me)).logits,Pe=this.model.config.id2label,$e=[];for(let Fe=0;Fe<Se.dims[0];++Fe){const Be=Me.input_ids[Fe],He=Se[Fe],qe=[];for(let Ie=0;Ie<He.dims[0];++Ie){const Ve=He[Ie],Ze=(0,l.max)(Ve.data)[1],st=Pe?Pe[Ze]:`LABEL_${Ze}`;if(re.includes(st))continue;const at=this.tokenizer.decode([Be[Ie].item()],{skip_special_tokens:!0});if(at==="")continue;const Ge=(0,l.softmax)(Ve.data);qe.push({entity:st,score:Ge[Ze],index:Ie,word:at})}$e.push(qe)}return G?$e:$e[0]}}class w extends T{constructor(W){super(W)}async _call(W,re,{top_k:G=1}={}){const Me=this.tokenizer(W,{text_pair:re,padding:!0,truncation:!0}),{start_logits:we,end_logits:Se}=await this.model(Me),Pe=Me.input_ids.tolist(),$e=Me.attention_mask.tolist(),Fe=this.tokenizer.all_special_ids,Be=[];for(let He=0;He<we.dims[0];++He){const qe=Pe[He],Ie=qe.findIndex(ke=>ke==this.tokenizer.sep_token_id);$e[He].map((ke,pt)=>ke==1&&(pt===0||pt>Ie&&Fe.findIndex(St=>St==qe[pt])===-1));const Ve=we[He].tolist(),Ze=Se[He].tolist();for(let ke=1;ke<Ve.length;++ke)($e[He]==0||ke<=Ie||Fe.findIndex(pt=>pt==qe[ke])!==-1)&&(Ve[ke]=-1/0,Ze[ke]=-1/0);const st=(0,l.softmax)(Ve).map((ke,pt)=>[ke,pt]),at=(0,l.softmax)(Ze).map((ke,pt)=>[ke,pt]);st[0][0]=0,at[0][0]=0;const Ge=(0,a.product)(st,at).filter(ke=>ke[0][1]<=ke[1][1]).map(ke=>[ke[0][1],ke[1][1],ke[0][0]*ke[1][0]]).sort((ke,pt)=>pt[2]-ke[2]);for(let ke=0;ke<Math.min(Ge.length,G);++ke){const[pt,St,Vt]=Ge[ke],zt=qe.slice(pt,St+1),gr=this.tokenizer.decode(zt,{skip_special_tokens:!0});Be.push({answer:gr,score:Vt})}}return G===1?Be[0]:Be}}class S extends T{constructor(W){super(W)}async _call(W,{top_k:re=5}={}){const G=this.tokenizer(W,{padding:!0,truncation:!0}),{logits:Me}=await this.model(G),we=[],Se=G.input_ids.tolist();for(let Pe=0;Pe<Se.length;++Pe){const $e=Se[Pe],Fe=$e.findIndex(Ve=>Ve==this.tokenizer.mask_token_id);if(Fe===-1)throw Error(`Mask token (${this.tokenizer.mask_token}) not found in text.`);const Be=Me[Pe][Fe],He=await(0,p.topk)(new p.Tensor("float32",(0,l.softmax)(Be.data),Be.dims),re),qe=He[0].tolist(),Ie=He[1].tolist();we.push(Ie.map((Ve,Ze)=>{const st=$e.slice();return st[Fe]=Ve,{score:qe[Ze],token:Number(Ve),token_str:this.tokenizer.decode([Ve]),sequence:this.tokenizer.decode(st,{skip_special_tokens:!0})}}))}return Array.isArray(W)?we:we[0]}}class E extends T{constructor(re){super(re);Y(this,"_key","generated_text")}async _call(re,G={}){Array.isArray(re)||(re=[re]),this.model.config.prefix&&(re=re.map(Fe=>this.model.config.prefix+Fe));const Me=this.model.config.task_specific_params;Me&&Me[this.task]&&Me[this.task].prefix&&(re=re.map(Fe=>Me[this.task].prefix+Fe));const we=this.tokenizer,Se={padding:!0,truncation:!0};let Pe;this instanceof M&&"_build_translation_inputs"in we?Pe=we._build_translation_inputs(re,Se,G):Pe=we(re,Se);const $e=await this.model.generate({...Pe,...G});return we.batch_decode($e,{skip_special_tokens:!0}).map(Fe=>({[this._key]:Fe}))}}class v extends E{constructor(re){super(re);Y(this,"_key","summary_text")}}class M extends E{constructor(re){super(re);Y(this,"_key","translation_text")}}function y(pe){return Array.isArray(pe)&&pe.every(W=>"role"in W&&"content"in W)}class C extends T{constructor(W){super(W)}async _call(W,re={}){let G=!1,Me=!1,we;if(typeof W=="string")we=W=[W];else if(Array.isArray(W)&&W.every(Ie=>typeof Ie=="string"))G=!0,we=W;else{if(y(W))W=[W];else if(Array.isArray(W)&&W.every(y))G=!0;else throw new Error("Input must be a string, an array of strings, a Chat, or an array of Chats");Me=!0,we=W.map(Ie=>this.tokenizer.apply_chat_template(Ie,{tokenize:!1,add_generation_prompt:!0}))}const Se=re.add_special_tokens??!1,Pe=Me?!1:re.return_full_text??!0;this.tokenizer.padding_side="left";const $e=this.tokenizer(we,{add_special_tokens:Se,padding:!0,truncation:!0}),Fe=await this.model.generate({...$e,...re}),Be=this.tokenizer.batch_decode(Fe,{skip_special_tokens:!0});let He;!Pe&&$e.input_ids.dims.at(-1)>0&&(He=this.tokenizer.batch_decode($e.input_ids,{skip_special_tokens:!0}).map(Ie=>Ie.length));const qe=Array.from({length:W.length},Ie=>[]);for(let Ie=0;Ie<Be.length;++Ie){const Ve=Math.floor(Ie/Fe.dims[0]*W.length);He&&(Be[Ie]=Be[Ie].slice(He[Ve])),qe[Ve].push({generated_text:Me?[...W[Ve],{role:"assistant",content:Be[Ie]}]:Be[Ie]})}return!G&&qe.length===1?qe[0]:qe}}class F extends T{constructor(W){super(W),this.label2id=Object.fromEntries(Object.entries(this.model.config.label2id).map(([re,G])=>[re.toLowerCase(),G])),this.entailment_id=this.label2id.entailment,this.entailment_id===void 0&&(console.warn("Could not find 'entailment' in label2id mapping. Using 2 as entailment_id."),this.entailment_id=2),this.contradiction_id=this.label2id.contradiction??this.label2id.not_entailment,this.contradiction_id===void 0&&(console.warn("Could not find 'contradiction' in label2id mapping. Using 0 as contradiction_id."),this.contradiction_id=0)}async _call(W,re,{hypothesis_template:G="This example is {}.",multi_label:Me=!1}={}){const we=Array.isArray(W);we||(W=[W]),Array.isArray(re)||(re=[re]);const Se=re.map(Fe=>G.replace("{}",Fe)),Pe=Me||re.length===1,$e=[];for(const Fe of W){const Be=[];for(const Ie of Se){const Ve=this.tokenizer(Fe,{text_pair:Ie,padding:!0,truncation:!0}),Ze=await this.model(Ve);Pe?Be.push([Ze.logits.data[this.contradiction_id],Ze.logits.data[this.entailment_id]]):Be.push(Ze.logits.data[this.entailment_id])}const qe=(Pe?Be.map(Ie=>(0,l.softmax)(Ie)[1]):(0,l.softmax)(Be)).map((Ie,Ve)=>[Ie,Ve]).sort((Ie,Ve)=>Ve[0]-Ie[0]);$e.push({sequence:Fe,labels:qe.map(Ie=>re[Ie[1]]),scores:qe.map(Ie=>Ie[0])})}return we?$e:$e[0]}}class z extends T{constructor(W){super(W)}async _call(W,{pooling:re="none",normalize:G=!1,quantize:Me=!1,precision:we="binary"}={}){const Se=this.tokenizer(W,{padding:!0,truncation:!0}),Pe=await this.model(Se);let $e=Pe.last_hidden_state??Pe.logits??Pe.token_embeddings;if(re!=="none")if(re==="mean")$e=(0,p.mean_pooling)($e,Se.attention_mask);else if(re==="cls")$e=$e.slice(null,0);else throw Error(`Pooling method '${re}' not supported.`);return G&&($e=$e.normalize(2,-1)),Me&&($e=(0,p.quantize_embeddings)($e,we)),$e}}class K extends T{constructor(W){super(W)}async _call(W,{pool:re=null}={}){const G=await d(W),{pixel_values:Me}=await this.processor(G),we=await this.model({pixel_values:Me});let Se;if(re){if(!("pooler_output"in we))throw Error("No pooled output was returned. Make sure the model has a 'pooler' layer when using the 'pool' option.");Se=we.pooler_output}else Se=we.last_hidden_state??we.logits??we.image_embeds;return Se}}class q extends T{constructor(W){super(W)}async _call(W,{top_k:re=5}={}){const G=this.processor.feature_extractor.config.sampling_rate,Me=await _(W,G),we=this.model.config.id2label,Se=[];for(const Pe of Me){const $e=await this.processor(Pe),Be=(await this.model($e)).logits[0],He=await(0,p.topk)(new p.Tensor("float32",(0,l.softmax)(Be.data),Be.dims),re),qe=He[0].tolist(),Ve=He[1].tolist().map((Ze,st)=>({label:we?we[Ze]:`LABEL_${Ze}`,score:qe[st]}));Se.push(Ve)}return Array.isArray(W)?Se:Se[0]}}class R extends T{constructor(W){super(W)}async _call(W,re,{hypothesis_template:G="This is a sound of {}."}={}){const Me=!Array.isArray(W);Me&&(W=[W]);const we=re.map(Be=>G.replace("{}",Be)),Se=this.tokenizer(we,{padding:!0,truncation:!0}),Pe=this.processor.feature_extractor.config.sampling_rate,$e=await _(W,Pe),Fe=[];for(const Be of $e){const He=await this.processor(Be),qe=await this.model({...Se,...He}),Ie=(0,l.softmax)(qe.logits_per_audio.data);Fe.push([...Ie].map((Ve,Ze)=>({score:Ve,label:re[Ze]})))}return Me?Fe[0]:Fe}}class Z extends T{constructor(W){super(W)}async _call(W,re={}){switch(this.model.config.model_type){case"whisper":case"lite-whisper":return this._call_whisper(W,re);case"wav2vec2":case"wav2vec2-bert":case"unispeech":case"unispeech-sat":case"hubert":return this._call_wav2vec2(W,re);case"moonshine":return this._call_moonshine(W,re);default:throw new Error(`AutomaticSpeechRecognitionPipeline does not support model type '${this.model.config.model_type}'.`)}}async _call_wav2vec2(W,re){re.language&&console.warn('`language` parameter is not yet supported for `wav2vec2` models, defaulting to "English".'),re.task&&console.warn('`task` parameter is not yet supported for `wav2vec2` models, defaulting to "transcribe".');const G=!Array.isArray(W);G&&(W=[W]);const Me=this.processor.feature_extractor.config.sampling_rate,we=await _(W,Me),Se=[];for(const Pe of we){const $e=await this.processor(Pe),Be=(await this.model($e)).logits[0],He=[];for(const Ie of Be)He.push((0,l.max)(Ie.data)[1]);const qe=this.tokenizer.decode(He);Se.push({text:qe})}return G?Se[0]:Se}async _call_whisper(W,re){const G=re.return_timestamps??!1,Me=re.chunk_length_s??0,we=re.force_full_sequences??!1;let Se=re.stride_length_s??null;const Pe={...re};G==="word"&&(Pe.return_token_timestamps=!0,Pe.return_timestamps=!1);const $e=!Array.isArray(W);$e&&(W=[W]);const Fe=this.processor.feature_extractor.config.chunk_length/this.model.config.max_source_positions,Be=this.processor.feature_extractor.config.hop_length,He=this.processor.feature_extractor.config.sampling_rate,qe=await _(W,He),Ie=[];for(const Ve of qe){let Ze=[];if(Me>0){if(Se===null)Se=Me/6;else if(Me<=Se)throw Error("`chunk_length_s` must be larger than `stride_length_s`.");const Ge=He*Me,ke=He*Se,pt=Ge-2*ke;let St=0;for(;;){const Vt=St+Ge,zt=Ve.subarray(St,Vt),gr=await this.processor(zt),or=St===0,Mt=Vt>=Ve.length;if(Ze.push({stride:[zt.length,or?0:ke,Mt?0:ke],input_features:gr.input_features,is_last:Mt}),Mt)break;St+=pt}}else Ze=[{stride:[Ve.length,0,0],input_features:(await this.processor(Ve)).input_features,is_last:!0}];for(const Ge of Ze){Pe.num_frames=Math.floor(Ge.stride[0]/Be);const ke=await this.model.generate({inputs:Ge.input_features,...Pe});G==="word"?(Ge.tokens=ke.sequences.tolist()[0],Ge.token_timestamps=ke.token_timestamps.tolist()[0].map(pt=>(0,l.round)(pt,2))):Ge.tokens=ke[0].tolist(),Ge.stride=Ge.stride.map(pt=>pt/He)}const[st,at]=this.tokenizer._decode_asr(Ze,{time_precision:Fe,return_timestamps:G,force_full_sequences:we});Ie.push({text:st,...at})}return $e?Ie[0]:Ie}async _call_moonshine(W,re){const G=!Array.isArray(W);G&&(W=[W]);const Me=this.processor.feature_extractor.config.sampling_rate,we=await _(W,Me),Se=[];for(const Pe of we){const $e=await this.processor(Pe),Fe=Math.floor(Pe.length/Me)*6,Be=await this.model.generate({max_new_tokens:Fe,...re,...$e}),He=this.processor.batch_decode(Be,{skip_special_tokens:!0})[0];Se.push({text:He})}return G?Se[0]:Se}}class H extends T{constructor(W){super(W)}async _call(W,re={}){const G=Array.isArray(W),Me=await d(W),{pixel_values:we}=await this.processor(Me),Se=[];for(const Pe of we){Pe.dims=[1,...Pe.dims];const $e=await this.model.generate({inputs:Pe,...re}),Fe=this.tokenizer.batch_decode($e,{skip_special_tokens:!0}).map(Be=>({generated_text:Be.trim()}));Se.push(Fe)}return G?Se:Se[0]}}class J extends T{constructor(W){super(W)}async _call(W,{top_k:re=5}={}){const G=await d(W),{pixel_values:Me}=await this.processor(G),we=await this.model({pixel_values:Me}),Se=this.model.config.id2label,Pe=[];for(const $e of we.logits){const Fe=await(0,p.topk)(new p.Tensor("float32",(0,l.softmax)($e.data),$e.dims),re),Be=Fe[0].tolist(),qe=Fe[1].tolist().map((Ie,Ve)=>({label:Se?Se[Ie]:`LABEL_${Ie}`,score:Be[Ve]}));Pe.push(qe)}return Array.isArray(W)?Pe:Pe[0]}}class Q extends T{constructor(W){super(W),this.subtasks_mapping={panoptic:"post_process_panoptic_segmentation",instance:"post_process_instance_segmentation",semantic:"post_process_semantic_segmentation"}}async _call(W,{threshold:re=.5,mask_threshold:G=.5,overlap_mask_area_threshold:Me=.8,label_ids_to_fuse:we=null,target_sizes:Se=null,subtask:Pe=null}={}){if(Array.isArray(W)&&W.length!==1)throw Error("Image segmentation pipeline currently only supports a batch size of 1.");const Fe=await d(W),Be=Fe.map(Ge=>[Ge.height,Ge.width]),He=await this.processor(Fe),{inputNames:qe,outputNames:Ie}=this.model.sessions.model;if(!qe.includes("pixel_values")){if(qe.length!==1)throw Error(`Expected a single input name, but got ${qe.length} inputs: ${qe}.`);const Ge=qe[0];if(Ge in He)throw Error(`Input name ${Ge} already exists in the inputs.`);He[Ge]=He.pixel_values}const Ve=await this.model(He);let Ze=null;if(Pe!==null)Ze=this.subtasks_mapping[Pe];else if(this.processor.image_processor){for(const[Ge,ke]of Object.entries(this.subtasks_mapping))if(ke in this.processor.image_processor){Ze=this.processor.image_processor[ke].bind(this.processor.image_processor),Pe=Ge;break}}const st=this.model.config.id2label,at=[];if(Pe)if(Pe==="panoptic"||Pe==="instance"){const Ge=Ze(Ve,re,G,Me,we,Se??Be)[0],ke=Ge.segmentation;for(const pt of Ge.segments_info){const St=new Uint8ClampedArray(ke.data.length);for(let zt=0;zt<ke.data.length;++zt)ke.data[zt]===pt.id&&(St[zt]=255);const Vt=new c.RawImage(St,ke.dims[1],ke.dims[0],1);at.push({score:pt.score,label:st[pt.label_id],mask:Vt})}}else if(Pe==="semantic"){const{segmentation:Ge,labels:ke}=Ze(Ve,Se??Be)[0];for(const pt of ke){const St=new Uint8ClampedArray(Ge.data.length);for(let zt=0;zt<Ge.data.length;++zt)Ge.data[zt]===pt&&(St[zt]=255);const Vt=new c.RawImage(St,Ge.dims[1],Ge.dims[0],1);at.push({score:null,label:st[pt],mask:Vt})}}else throw Error(`Subtask ${Pe} not supported.`);else{const ke=Ve[Ie[0]];for(let pt=0;pt<Be.length;++pt){const St=Be[pt],Vt=ke[pt];Vt.data.some(gr=>gr<-1e-5||gr>1+1e-5)&&Vt.sigmoid_();const zt=await c.RawImage.fromTensor(Vt.mul_(255).to("uint8")).resize(St[1],St[0]);at.push({label:null,score:null,mask:zt})}}return at}}class se extends Q{constructor(W){super(W)}async _call(W,re={}){if(Array.isArray(W)&&W.length!==1)throw Error("Background removal pipeline currently only supports a batch size of 1.");const Me=await d(W),we=await super._call(W,re);return Me.map((Pe,$e)=>{const Fe=Pe.clone();return Fe.putAlpha(we[$e].mask),Fe})}}class fe extends T{constructor(W){super(W)}async _call(W,re,{hypothesis_template:G="This is a photo of {}"}={}){const Me=Array.isArray(W),we=await d(W),Se=re.map(qe=>G.replace("{}",qe)),Pe=this.tokenizer(Se,{padding:this.model.config.model_type==="siglip"?"max_length":!0,truncation:!0}),{pixel_values:$e}=await this.processor(we),Fe=await this.model({...Pe,pixel_values:$e}),Be=this.model.config.model_type==="siglip"?qe=>qe.sigmoid().data:qe=>(0,l.softmax)(qe.data),He=[];for(const qe of Fe.logits_per_image){const Ve=[...Be(qe)].map((Ze,st)=>({score:Ze,label:re[st]}));Ve.sort((Ze,st)=>st.score-Ze.score),He.push(Ve)}return Me?He:He[0]}}class ae extends T{constructor(W){super(W)}async _call(W,{threshold:re=.9,percentage:G=!1}={}){const Me=Array.isArray(W);if(Me&&W.length!==1)throw Error("Object detection pipeline currently only supports a batch size of 1.");const we=await d(W),Se=G?null:we.map(Ie=>[Ie.height,Ie.width]),{pixel_values:Pe,pixel_mask:$e}=await this.processor(we),Fe=await this.model({pixel_values:Pe,pixel_mask:$e}),Be=this.processor.image_processor.post_process_object_detection(Fe,re,Se),He=this.model.config.id2label,qe=Be.map(Ie=>Ie.boxes.map((Ve,Ze)=>({score:Ie.scores[Ze],label:He[Ie.classes[Ze]],box:f(Ve,!G)})));return Me?qe:qe[0]}}class V extends T{constructor(W){super(W)}async _call(W,re,{threshold:G=.1,top_k:Me=null,percentage:we=!1}={}){const Se=Array.isArray(W),Pe=await d(W),$e=this.tokenizer(re,{padding:!0,truncation:!0}),Fe=await this.processor(Pe),Be=[];for(let He=0;He<Pe.length;++He){const qe=Pe[He],Ie=we?null:[[qe.height,qe.width]],Ve=Fe.pixel_values[He].unsqueeze_(0),Ze=await this.model({...$e,pixel_values:Ve});let st;if("post_process_grounded_object_detection"in this.processor){const at=this.processor.post_process_grounded_object_detection(Ze,$e.input_ids,{box_threshold:G,text_threshold:G,target_sizes:Ie})[0];st=at.boxes.map((Ge,ke)=>({score:at.scores[ke],label:at.labels[ke],box:f(Ge,!we)}))}else{const at=this.processor.image_processor.post_process_object_detection(Ze,G,Ie,!0)[0];st=at.boxes.map((Ge,ke)=>({score:at.scores[ke],label:re[at.classes[ke]],box:f(Ge,!we)}))}st.sort((at,Ge)=>Ge.score-at.score),Me!==null&&(st=st.slice(0,Me)),Be.push(st)}return Se?Be:Be[0]}}class A extends T{constructor(W){super(W)}async _call(W,re,G={}){const Me=(await d(W))[0],{pixel_values:we}=await this.processor(Me),Se=`<s_docvqa><s_question>${re}</s_question><s_answer>`,Pe=this.tokenizer(Se,{add_special_tokens:!1,padding:!0,truncation:!0}).input_ids,$e=await this.model.generate({inputs:we,max_length:this.model.config.decoder.max_position_embeddings,decoder_input_ids:Pe,...G}),Be=this.tokenizer.batch_decode($e)[0].match(/<s_answer>(.*?)<\/s_answer>/);let He=null;return Be&&Be.length>=2&&(He=Be[1].trim()),[{answer:He}]}}class U extends T{constructor(re){super(re);Y(this,"DEFAULT_VOCODER_ID","Xenova/speecht5_hifigan");this.vocoder=re.vocoder??null}async _call(re,{speaker_embeddings:G=null}={}){return this.processor?this._call_text_to_spectrogram(re,{speaker_embeddings:G}):this._call_text_to_waveform(re)}async _call_text_to_waveform(re){const G=this.tokenizer(re,{padding:!0,truncation:!0}),{waveform:Me}=await this.model(G),we=this.model.config.sampling_rate;return new u.RawAudio(Me.data,we)}async _call_text_to_spectrogram(re,{speaker_embeddings:G}){if(this.vocoder||(console.log("No vocoder specified, using default HifiGan vocoder."),this.vocoder=await o.AutoModel.from_pretrained(this.DEFAULT_VOCODER_ID,{dtype:"fp32"})),(typeof G=="string"||G instanceof URL)&&(G=new Float32Array(await(await fetch(G)).arrayBuffer())),G instanceof Float32Array)G=new p.Tensor("float32",G,[1,G.length]);else if(!(G instanceof p.Tensor))throw new Error("Speaker embeddings must be a `Tensor`, `Float32Array`, `string`, or `URL`.");const{input_ids:Me}=this.tokenizer(re,{padding:!0,truncation:!0}),{waveform:we}=await this.model.generate_speech(Me,G,{vocoder:this.vocoder}),Se=this.processor.feature_extractor.config.sampling_rate;return new u.RawAudio(we.data,Se)}}class ee extends T{constructor(W){super(W)}async _call(W){const re=await d(W),G=await this.processor(re),Me=await this.model(G),we=[];for(const Se of Me.reconstruction){const Pe=Se.squeeze().clamp_(0,1).mul_(255).round_().to("uint8");we.push(c.RawImage.fromTensor(Pe))}return we.length>1?we:we[0]}}class _e extends T{constructor(W){super(W)}async _call(W){const re=await d(W),G=await this.processor(re),{predicted_depth:Me}=await this.model(G),we=[];for(let Se=0;Se<re.length;++Se){const Pe=Me[Se],[$e,Fe]=Pe.dims.slice(-2),[Be,He]=re[Se].size,qe=(await(0,p.interpolate_4d)(Pe.view(1,1,$e,Fe),{size:[He,Be],mode:"bilinear"})).view(He,Be),Ie=qe.min().item(),Ve=qe.max().item(),Ze=qe.sub(Ie).div_(Ve-Ie).mul_(255).to("uint8").unsqueeze(0),st=c.RawImage.fromTensor(Ze);we.push({predicted_depth:qe,depth:st})}return we.length>1?we:we[0]}}const le=Object.freeze({"text-classification":{tokenizer:s.AutoTokenizer,pipeline:I,model:o.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-finetuned-sst-2-english"},type:"text"},"token-classification":{tokenizer:s.AutoTokenizer,pipeline:g,model:o.AutoModelForTokenClassification,default:{model:"Xenova/bert-base-multilingual-cased-ner-hrl"},type:"text"},"question-answering":{tokenizer:s.AutoTokenizer,pipeline:w,model:o.AutoModelForQuestionAnswering,default:{model:"Xenova/distilbert-base-cased-distilled-squad"},type:"text"},"fill-mask":{tokenizer:s.AutoTokenizer,pipeline:S,model:o.AutoModelForMaskedLM,default:{model:"Xenova/bert-base-uncased"},type:"text"},summarization:{tokenizer:s.AutoTokenizer,pipeline:v,model:o.AutoModelForSeq2SeqLM,default:{model:"Xenova/distilbart-cnn-6-6"},type:"text"},translation:{tokenizer:s.AutoTokenizer,pipeline:M,model:o.AutoModelForSeq2SeqLM,default:{model:"Xenova/t5-small"},type:"text"},"text2text-generation":{tokenizer:s.AutoTokenizer,pipeline:E,model:o.AutoModelForSeq2SeqLM,default:{model:"Xenova/flan-t5-small"},type:"text"},"text-generation":{tokenizer:s.AutoTokenizer,pipeline:C,model:o.AutoModelForCausalLM,default:{model:"Xenova/gpt2"},type:"text"},"zero-shot-classification":{tokenizer:s.AutoTokenizer,pipeline:F,model:o.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-mnli"},type:"text"},"audio-classification":{pipeline:q,model:o.AutoModelForAudioClassification,processor:n.AutoProcessor,default:{model:"Xenova/wav2vec2-base-superb-ks"},type:"audio"},"zero-shot-audio-classification":{tokenizer:s.AutoTokenizer,pipeline:R,model:o.AutoModel,processor:n.AutoProcessor,default:{model:"Xenova/clap-htsat-unfused"},type:"multimodal"},"automatic-speech-recognition":{tokenizer:s.AutoTokenizer,pipeline:Z,model:[o.AutoModelForSpeechSeq2Seq,o.AutoModelForCTC],processor:n.AutoProcessor,default:{model:"Xenova/whisper-tiny.en"},type:"multimodal"},"text-to-audio":{tokenizer:s.AutoTokenizer,pipeline:U,model:[o.AutoModelForTextToWaveform,o.AutoModelForTextToSpectrogram],processor:[n.AutoProcessor,null],default:{model:"Xenova/speecht5_tts"},type:"text"},"image-to-text":{tokenizer:s.AutoTokenizer,pipeline:H,model:o.AutoModelForVision2Seq,processor:n.AutoProcessor,default:{model:"Xenova/vit-gpt2-image-captioning"},type:"multimodal"},"image-classification":{pipeline:J,model:o.AutoModelForImageClassification,processor:n.AutoProcessor,default:{model:"Xenova/vit-base-patch16-224"},type:"multimodal"},"image-segmentation":{pipeline:Q,model:[o.AutoModelForImageSegmentation,o.AutoModelForSemanticSegmentation,o.AutoModelForUniversalSegmentation],processor:n.AutoProcessor,default:{model:"Xenova/detr-resnet-50-panoptic"},type:"multimodal"},"background-removal":{pipeline:se,model:[o.AutoModelForImageSegmentation,o.AutoModelForSemanticSegmentation,o.AutoModelForUniversalSegmentation],processor:n.AutoProcessor,default:{model:"Xenova/modnet"},type:"image"},"zero-shot-image-classification":{tokenizer:s.AutoTokenizer,pipeline:fe,model:o.AutoModel,processor:n.AutoProcessor,default:{model:"Xenova/clip-vit-base-patch32"},type:"multimodal"},"object-detection":{pipeline:ae,model:o.AutoModelForObjectDetection,processor:n.AutoProcessor,default:{model:"Xenova/detr-resnet-50"},type:"multimodal"},"zero-shot-object-detection":{tokenizer:s.AutoTokenizer,pipeline:V,model:o.AutoModelForZeroShotObjectDetection,processor:n.AutoProcessor,default:{model:"Xenova/owlvit-base-patch32"},type:"multimodal"},"document-question-answering":{tokenizer:s.AutoTokenizer,pipeline:A,model:o.AutoModelForDocumentQuestionAnswering,processor:n.AutoProcessor,default:{model:"Xenova/donut-base-finetuned-docvqa"},type:"multimodal"},"image-to-image":{pipeline:ee,model:o.AutoModelForImageToImage,processor:n.AutoProcessor,default:{model:"Xenova/swin2SR-classical-sr-x2-64"},type:"image"},"depth-estimation":{pipeline:_e,model:o.AutoModelForDepthEstimation,processor:n.AutoProcessor,default:{model:"Xenova/dpt-large"},type:"image"},"feature-extraction":{tokenizer:s.AutoTokenizer,pipeline:z,model:o.AutoModel,default:{model:"Xenova/all-MiniLM-L6-v2"},type:"text"},"image-feature-extraction":{processor:n.AutoProcessor,pipeline:K,model:[o.AutoModelForImageFeatureExtraction,o.AutoModel],default:{model:"Xenova/vit-base-patch16-224-in21k"},type:"image"}}),ye=Object.freeze({"sentiment-analysis":"text-classification",ner:"token-classification",asr:"automatic-speech-recognition","text-to-speech":"text-to-audio",embeddings:"feature-extraction"});async function ze(pe,W=null,{progress_callback:re=null,config:G=null,cache_dir:Me=null,local_files_only:we=!1,revision:Se="main",device:Pe=null,dtype:$e=null,subfolder:Fe="onnx",use_external_data_format:Be=null,model_file_name:He=null,session_options:qe={}}={}){pe=ye[pe]??pe;const Ie=le[pe.split("_",1)[0]];if(!Ie)throw Error(`Unsupported pipeline: ${pe}. Must be one of [${Object.keys(le)}]`);W||(W=Ie.default.model,console.log(`No model specified. Using default model: "${W}".`));const Ve={progress_callback:re,config:G,cache_dir:Me,local_files_only:we,revision:Se,device:Pe,dtype:$e,subfolder:Fe,use_external_data_format:Be,model_file_name:He,session_options:qe},Ze=new Map([["tokenizer",Ie.tokenizer],["model",Ie.model],["processor",Ie.processor]]),st=await Ue(Ze,W,Ve);st.task=pe,(0,a.dispatchCallback)(re,{status:"ready",task:pe,model:W});const at=Ie.pipeline;return new at(st)}async function Ue(pe,W,re){const G=Object.create(null),Me=[];for(const[we,Se]of pe.entries()){if(!Se)continue;let Pe;Array.isArray(Se)?Pe=new Promise(async($e,Fe)=>{var He,qe;let Be;for(const Ie of Se){if(Ie===null){$e(null);return}try{$e(await Ie.from_pretrained(W,re));return}catch(Ve){if((He=Ve.message)!=null&&He.includes("Unsupported model type"))Be=Ve;else if((qe=Ve.message)!=null&&qe.includes("Could not locate file"))Be=Ve;else{Fe(Ve);return}}}Fe(Be)}):Pe=Se.from_pretrained(W,re),G[we]=Pe,Me.push(Pe)}await Promise.all(Me);for(const[we,Se]of Object.entries(G))G[we]=await Se;return G}},"./src/tokenizers.js":(e,r,t)=>{t.r(r),t.d(r,{AlbertTokenizer:()=>Ft,AutoTokenizer:()=>As,BartTokenizer:()=>Cs,BertTokenizer:()=>yt,BlenderbotSmallTokenizer:()=>nn,BlenderbotTokenizer:()=>sn,BloomTokenizer:()=>$s,CLIPTokenizer:()=>hs,CamembertTokenizer:()=>Zr,CodeGenTokenizer:()=>ns,CodeLlamaTokenizer:()=>Tr,CohereTokenizer:()=>an,ConvBertTokenizer:()=>wr,DebertaTokenizer:()=>rt,DebertaV2Tokenizer:()=>Bt,DistilBertTokenizer:()=>Or,ElectraTokenizer:()=>es,EsmTokenizer:()=>it,FalconTokenizer:()=>Ae,GPT2Tokenizer:()=>jr,GPTNeoXTokenizer:()=>Je,GemmaTokenizer:()=>ts,Grok1Tokenizer:()=>rs,HerbertTokenizer:()=>Ht,LlamaTokenizer:()=>Is,M2M100Tokenizer:()=>cr,MBart50Tokenizer:()=>ds,MBartTokenizer:()=>Gr,MPNetTokenizer:()=>zr,MarianTokenizer:()=>tn,MgpstrTokenizer:()=>ln,MobileBertTokenizer:()=>ht,NllbTokenizer:()=>ss,NougatTokenizer:()=>js,PreTrainedTokenizer:()=>ve,Qwen2Tokenizer:()=>Rt,RoFormerTokenizer:()=>Xt,RobertaTokenizer:()=>Ss,SiglipTokenizer:()=>en,SpeechT5Tokenizer:()=>ks,SqueezeBertTokenizer:()=>lt,T5Tokenizer:()=>Ps,TokenizerModel:()=>K,VitsTokenizer:()=>on,Wav2Vec2CTCTokenizer:()=>rn,WhisperTokenizer:()=>hr,XLMRobertaTokenizer:()=>ps,XLMTokenizer:()=>cs,is_chinese_char:()=>S});var s=t("./src/utils/generic.js"),o=t("./src/utils/core.js"),n=t("./src/utils/hub.js"),i=t("./src/utils/maths.js"),a=t("./src/utils/tensor.js"),l=t("./src/utils/data-structures.js"),u=t("./node_modules/@huggingface/jinja/dist/index.js"),p=t("./src/models/whisper/common_whisper.js");async function c(de,$){const j=await Promise.all([(0,n.getModelJSON)(de,"tokenizer.json",!0,$),(0,n.getModelJSON)(de,"tokenizer_config.json",!0,$)]);return $.legacy!==null&&(j[1].legacy=$.legacy),j}function d(de,$){const j=[];let X=0;for(const ie of de.matchAll($)){const ce=ie[0];X<ie.index&&j.push(de.slice(X,ie.index)),ce.length>0&&j.push(ce),X=ie.index+ce.length}return X<de.length&&j.push(de.slice(X)),j}function _(de,$=!0){if(de.Regex!==void 0){let j=de.Regex.replace(/\\([#&~])/g,"$1");for(const[X,ie]of F)j=j.replaceAll(X,ie);return new RegExp(j,"gu")}else if(de.String!==void 0){const j=(0,o.escapeRegExp)(de.String);return new RegExp($?j:`(${j})`,"gu")}else return console.warn("Unknown pattern type:",de),null}function f(de){return new Map(Object.entries(de))}function T(de){const $=de.dims;switch($.length){case 1:return de.tolist();case 2:if($[0]!==1)throw new Error("Unable to decode tensor with `batch size !== 1`. Use `tokenizer.batch_decode(...)` for batched inputs.");return de.tolist()[0];default:throw new Error(`Expected tensor to have 1-2 dimensions, got ${$.length}.`)}}function I(de){return de.replace(/ \./g,".").replace(/ \?/g,"?").replace(/ \!/g,"!").replace(/ ,/g,",").replace(/ \' /g,"'").replace(/ n\'t/g,"n't").replace(/ \'m/g,"'m").replace(/ \'s/g,"'s").replace(/ \'ve/g,"'ve").replace(/ \'re/g,"'re")}function g(de){return de.replace(new RegExp("\\p{M}","gu"),"")}function w(de){return g(de.toLowerCase())}function S(de){return de>=19968&&de<=40959||de>=13312&&de<=19903||de>=131072&&de<=173791||de>=173824&&de<=177983||de>=177984&&de<=178207||de>=178208&&de<=183983||de>=63744&&de<=64255||de>=194560&&de<=195103}function E(de,$,j){const X=[];let ie=0;for(;ie<de.length;){if(X.push(de[ie]),($.get(de[ie])??j)!==j){++ie;continue}for(;++ie<de.length&&($.get(de[ie])??j)===j;)$.get(X.at(-1))!==j&&(X[X.length-1]+=de[ie])}return X}function v(de){return de.match(/\S+/g)||[]}const M="\\p{P}\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E",y=new RegExp(`^[${M}]+$`,"gu"),C=".,!?…。，、।۔،",F=new Map([["(?i:'s|'t|'re|'ve|'m|'ll|'d)","(?:'([sS]|[tT]|[rR][eE]|[vV][eE]|[mM]|[lL][lL]|[dD]))"],[` ?[^(\\s|[${C}])]+`,` ?[^\\s${C}]+`]]);class z{constructor($){this.content=$.content,this.id=$.id,this.single_word=$.single_word??!1,this.lstrip=$.lstrip??!1,this.rstrip=$.rstrip??!1,this.special=$.special??!1,this.normalized=$.normalized??null}}class K extends s.Callable{constructor($){super(),this.config=$,this.vocab=[],this.tokens_to_ids=new Map,this.unk_token_id=void 0,this.unk_token=void 0,this.end_of_word_suffix=void 0,this.fuse_unk=this.config.fuse_unk??!1}static fromConfig($,...j){switch($.type){case"WordPiece":return new q($);case"Unigram":return new R($,...j);case"BPE":return new J($);default:if($.vocab)return Array.isArray($.vocab)?new R($,...j):Object.hasOwn($,"continuing_subword_prefix")&&Object.hasOwn($,"unk_token")?Object.hasOwn($,"merges")?new J($):new q($):new Q($,...j);throw new Error(`Unknown TokenizerModel type: ${$.type}`)}}_call($){return $=this.encode($),this.fuse_unk&&($=E($,this.tokens_to_ids,this.unk_token_id)),$}encode($){throw Error("encode should be implemented in subclass.")}convert_tokens_to_ids($){return $.map(j=>this.tokens_to_ids.get(j)??this.unk_token_id)}convert_ids_to_tokens($){return $.map(j=>this.vocab[j]??this.unk_token)}}class q extends K{constructor($){super($),this.tokens_to_ids=f($.vocab),this.unk_token_id=this.tokens_to_ids.get($.unk_token),this.unk_token=$.unk_token,this.max_input_chars_per_word=$.max_input_chars_per_word??100,this.vocab=new Array(this.tokens_to_ids.size);for(const[j,X]of this.tokens_to_ids)this.vocab[X]=j}encode($){const j=[];for(const X of $){const ie=[...X];if(ie.length>this.max_input_chars_per_word){j.push(this.unk_token);continue}let ce=!1,xe=0;const Re=[];for(;xe<ie.length;){let Qe=ie.length,We=null;for(;xe<Qe;){let Ye=ie.slice(xe,Qe).join("");if(xe>0&&(Ye=this.config.continuing_subword_prefix+Ye),this.tokens_to_ids.has(Ye)){We=Ye;break}--Qe}if(We===null){ce=!0;break}Re.push(We),xe=Qe}ce?j.push(this.unk_token):j.push(...Re)}return j}}class R extends K{constructor($,j){super($);const X=$.vocab.length;this.vocab=new Array(X),this.scores=new Array(X);for(let ie=0;ie<X;++ie)[this.vocab[ie],this.scores[ie]]=$.vocab[ie];this.unk_token_id=$.unk_id,this.unk_token=this.vocab[$.unk_id],this.tokens_to_ids=new Map(this.vocab.map((ie,ce)=>[ie,ce])),this.bos_token=" ",this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=j.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.unk_token=this.vocab[this.unk_token_id],this.minScore=(0,i.min)(this.scores)[0],this.unk_score=this.minScore-10,this.scores[this.unk_token_id]=this.unk_score,this.trie=new l.CharTrie,this.trie.extend(this.vocab),this.fuse_unk=!0}populateNodes($){const j=$.chars,X=1;let ie=0;for(;ie<j.length;){let ce=!1;const xe=j.slice(ie).join(""),Re=this.trie.commonPrefixSearch(xe);for(const Qe of Re){const We=this.tokens_to_ids.get(Qe),Ye=this.scores[We],_t=(0,o.len)(Qe);$.insert(ie,_t,Ye,We),!ce&&_t===X&&(ce=!0)}ce||$.insert(ie,X,this.unk_score,this.unk_token_id),ie+=X}}tokenize($){const j=new l.TokenLattice($,this.bos_token_id,this.eos_token_id);return this.populateNodes(j),j.tokens()}encode($){const j=[];for(const X of $){const ie=this.tokenize(X);j.push(...ie)}return j}}const Z=(()=>{const de=[...Array.from({length:94},(ie,ce)=>ce+33),...Array.from({length:12},(ie,ce)=>ce+161),...Array.from({length:82},(ie,ce)=>ce+174)],$=de.slice();let j=0;for(let ie=0;ie<256;++ie)de.includes(ie)||(de.push(ie),$.push(256+j),j+=1);const X=$.map(ie=>String.fromCharCode(ie));return Object.fromEntries(de.map((ie,ce)=>[ie,X[ce]]))})(),H=(0,o.reverseDictionary)(Z);class J extends K{constructor($){super($),this.tokens_to_ids=f($.vocab),this.unk_token_id=this.tokens_to_ids.get($.unk_token),this.unk_token=$.unk_token,this.vocab=new Array(this.tokens_to_ids.size);for(const[X,ie]of this.tokens_to_ids)this.vocab[ie]=X;const j=Array.isArray($.merges[0]);this.merges=j?$.merges:$.merges.map(X=>X.split(" ",2)),this.bpe_ranks=new Map(this.merges.map((X,ie)=>[JSON.stringify(X),ie])),this.end_of_word_suffix=$.end_of_word_suffix,this.continuing_subword_suffix=$.continuing_subword_suffix??null,this.byte_fallback=this.config.byte_fallback??!1,this.byte_fallback&&(this.text_encoder=new TextEncoder),this.ignore_merges=this.config.ignore_merges??!1,this.max_length_to_cache=256,this.cache_capacity=1e4,this.cache=new l.LRUCache(this.cache_capacity)}clear_cache(){this.cache.clear()}bpe($){if($.length===0)return[];const j=this.cache.get($);if(j!==void 0)return j;const X=Array.from($);this.end_of_word_suffix&&(X[X.length-1]+=this.end_of_word_suffix);let ie=[];if(X.length>1){const ce=new l.PriorityQueue((Qe,We)=>Qe.score<We.score);let xe={token:X[0],bias:0,prev:null,next:null},Re=xe;for(let Qe=1;Qe<X.length;++Qe){const We={bias:Qe/X.length,token:X[Qe],prev:Re,next:null};Re.next=We,this._add_node(ce,Re),Re=We}for(;!ce.isEmpty();){const Qe=ce.pop();if(Qe.deleted||!Qe.next||Qe.next.deleted)continue;if(Qe.deleted=!0,Qe.next.deleted=!0,Qe.prev){const Ye={...Qe.prev};Qe.prev.deleted=!0,Qe.prev=Ye,Ye.prev?Ye.prev.next=Ye:xe=Ye}const We={token:Qe.token+Qe.next.token,bias:Qe.bias,prev:Qe.prev,next:Qe.next.next};We.prev?(We.prev.next=We,this._add_node(ce,We.prev)):xe=We,We.next&&(We.next.prev=We,this._add_node(ce,We))}for(let Qe=xe;Qe!==null;Qe=Qe.next)ie.push(Qe.token)}else ie=X;if(this.continuing_subword_suffix)for(let ce=0;ce<ie.length-1;++ce)ie[ce]+=this.continuing_subword_suffix;return $.length<this.max_length_to_cache&&this.cache.put($,ie),ie}_add_node($,j){const X=this.bpe_ranks.get(JSON.stringify([j.token,j.next.token]));X!==void 0&&(j.score=X+j.bias,$.push(j))}encode($){const j=[];for(const X of $){if(this.ignore_merges&&this.tokens_to_ids.has(X)){j.push(X);continue}const ie=this.bpe(X);for(const ce of ie)if(this.tokens_to_ids.has(ce))j.push(ce);else if(this.byte_fallback){const xe=Array.from(this.text_encoder.encode(ce)).map(Re=>`<0x${Re.toString(16).toUpperCase().padStart(2,"0")}>`);xe.every(Re=>this.tokens_to_ids.has(Re))?j.push(...xe):j.push(this.unk_token)}else j.push(this.unk_token)}return j}}class Q extends K{constructor($,j){super($),this.tokens_to_ids=f(j.target_lang?$.vocab[j.target_lang]:$.vocab),this.bos_token=j.bos_token,this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=j.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.pad_token=j.pad_token,this.pad_token_id=this.tokens_to_ids.get(this.pad_token),this.unk_token=j.unk_token,this.unk_token_id=this.tokens_to_ids.get(this.unk_token),this.vocab=new Array(this.tokens_to_ids.size);for(const[X,ie]of this.tokens_to_ids)this.vocab[ie]=X}encode($){return $}}class se extends s.Callable{constructor($){super(),this.config=$}static fromConfig($){if($===null)return null;switch($.type){case"BertNormalizer":return new pe($);case"Precompiled":return new Mt($);case"Sequence":return new Ue($);case"Replace":return new fe($);case"NFC":return new V($);case"NFD":return new A($);case"NFKC":return new U($);case"NFKD":return new ee($);case"Strip":return new _e($);case"StripAccents":return new le($);case"Lowercase":return new ye($);case"Prepend":return new ze($);default:throw new Error(`Unknown Normalizer type: ${$.type}`)}}normalize($){throw Error("normalize should be implemented in subclass.")}_call($){return this.normalize($)}}class fe extends se{normalize($){const j=_(this.config.pattern);return j===null?$:$.replaceAll(j,this.config.content)}}class ae extends se{constructor(){super(...arguments);Y(this,"form")}normalize(j){return j=j.normalize(this.form),j}}class V extends ae{constructor(){super(...arguments);Y(this,"form","NFC")}}class A extends ae{constructor(){super(...arguments);Y(this,"form","NFD")}}class U extends ae{constructor(){super(...arguments);Y(this,"form","NFKC")}}class ee extends ae{constructor(){super(...arguments);Y(this,"form","NFKD")}}class _e extends se{normalize($){return this.config.strip_left&&this.config.strip_right?$=$.trim():(this.config.strip_left&&($=$.trimStart()),this.config.strip_right&&($=$.trimEnd())),$}}class le extends se{normalize($){return $=g($),$}}class ye extends se{normalize($){return $=$.toLowerCase(),$}}class ze extends se{normalize($){return $=this.config.prepend+$,$}}class Ue extends se{constructor($){super($),this.normalizers=$.normalizers.map(j=>se.fromConfig(j))}normalize($){return this.normalizers.reduce((j,X)=>X.normalize(j),$)}}class pe extends se{_tokenize_chinese_chars($){const j=[];for(let X=0;X<$.length;++X){const ie=$[X],ce=ie.charCodeAt(0);S(ce)?(j.push(" "),j.push(ie),j.push(" ")):j.push(ie)}return j.join("")}stripAccents($){return $.normalize("NFD").replace(new RegExp("\\p{Mn}","gu"),"")}_is_control($){switch($){case"	":case`
`:case"\r":return!1;default:return new RegExp("^\\p{Cc}|\\p{Cf}|\\p{Co}|\\p{Cs}$","u").test($)}}_clean_text($){const j=[];for(const X of $){const ie=X.charCodeAt(0);ie===0||ie===65533||this._is_control(X)||(/^\s$/.test(X)?j.push(" "):j.push(X))}return j.join("")}normalize($){return this.config.clean_text&&($=this._clean_text($)),this.config.handle_chinese_chars&&($=this._tokenize_chinese_chars($)),this.config.lowercase?($=$.toLowerCase(),this.config.strip_accents!==!1&&($=this.stripAccents($))):this.config.strip_accents&&($=this.stripAccents($)),$}}class W extends s.Callable{static fromConfig($){if($===null)return null;switch($.type){case"BertPreTokenizer":return new re($);case"Sequence":return new Yr($);case"Whitespace":return new D($);case"WhitespaceSplit":return new oe($);case"Metaspace":return new gr($);case"ByteLevel":return new G($);case"Split":return new Me($);case"Punctuation":return new we($);case"Digits":return new Se($);case"Replace":return new B($);default:throw new Error(`Unknown PreTokenizer type: ${$.type}`)}}pre_tokenize_text($,j){throw Error("pre_tokenize_text should be implemented in subclass.")}pre_tokenize($,j){return(Array.isArray($)?$.map(X=>this.pre_tokenize_text(X,j)):this.pre_tokenize_text($,j)).flat()}_call($,j){return this.pre_tokenize($,j)}}class re extends W{constructor($){super(),this.pattern=new RegExp(`[^\\s${M}]+|[${M}]`,"gu")}pre_tokenize_text($,j){return $.trim().match(this.pattern)||[]}}class G extends W{constructor($){super(),this.config=$,this.add_prefix_space=this.config.add_prefix_space,this.trim_offsets=this.config.trim_offsets,this.use_regex=this.config.use_regex??!0,this.pattern=new RegExp("'s|'t|'re|'ve|'m|'ll|'d| ?\\p{L}+| ?\\p{N}+| ?[^\\s\\p{L}\\p{N}]+|\\s+(?!\\S)|\\s+","gu"),this.byte_encoder=Z,this.text_encoder=new TextEncoder}pre_tokenize_text($,j){return this.add_prefix_space&&!$.startsWith(" ")&&($=" "+$),(this.use_regex?$.match(this.pattern)||[]:[$]).map(ie=>Array.from(this.text_encoder.encode(ie),ce=>this.byte_encoder[ce]).join(""))}}class Me extends W{constructor($){super(),this.config=$,this.pattern=_(this.config.pattern,this.config.invert)}pre_tokenize_text($,j){var X;return this.pattern===null?[]:this.config.invert?$.match(this.pattern)||[]:((X=this.config.behavior)==null?void 0:X.toLowerCase())==="removed"?$.split(this.pattern).filter(ie=>ie):d($,this.pattern)}}class we extends W{constructor($){super(),this.config=$,this.pattern=new RegExp(`[^${M}]+|[${M}]+`,"gu")}pre_tokenize_text($,j){return $.match(this.pattern)||[]}}class Se extends W{constructor($){super(),this.config=$;const j=`[^\\d]+|\\d${this.config.individual_digits?"":"+"}`;this.pattern=new RegExp(j,"gu")}pre_tokenize_text($,j){return $.match(this.pattern)||[]}}class Pe extends s.Callable{constructor($){super(),this.config=$}static fromConfig($){if($===null)return null;switch($.type){case"TemplateProcessing":return new Be($);case"ByteLevel":return new He($);case"RobertaProcessing":return new Fe($);case"BertProcessing":return new $e($);case"Sequence":return new qe($);default:throw new Error(`Unknown PostProcessor type: ${$.type}`)}}post_process($,...j){throw Error("post_process should be implemented in subclass.")}_call($,...j){return this.post_process($,...j)}}class $e extends Pe{constructor($){super($),this.cls=$.cls[0],this.sep=$.sep[0]}post_process($,j=null,{add_special_tokens:X=!0}={}){X&&($=(0,o.mergeArrays)([this.cls],$,[this.sep]));let ie=new Array($.length).fill(0);if(j!==null){const ce=X&&this instanceof Fe?[this.sep]:[],xe=X?[this.sep]:[];$=(0,o.mergeArrays)($,ce,j,xe),ie=(0,o.mergeArrays)(ie,new Array(j.length+ce.length+xe.length).fill(1))}return{tokens:$,token_type_ids:ie}}}class Fe extends $e{}class Be extends Pe{constructor($){super($),this.single=$.single,this.pair=$.pair}post_process($,j=null,{add_special_tokens:X=!0}={}){const ie=j===null?this.single:this.pair;let ce=[],xe=[];for(const Re of ie)"SpecialToken"in Re?X&&(ce.push(Re.SpecialToken.id),xe.push(Re.SpecialToken.type_id)):"Sequence"in Re&&(Re.Sequence.id==="A"?(ce=(0,o.mergeArrays)(ce,$),xe=(0,o.mergeArrays)(xe,new Array($.length).fill(Re.Sequence.type_id))):Re.Sequence.id==="B"&&(ce=(0,o.mergeArrays)(ce,j),xe=(0,o.mergeArrays)(xe,new Array(j.length).fill(Re.Sequence.type_id))));return{tokens:ce,token_type_ids:xe}}}class He extends Pe{post_process($,j=null){return j&&($=(0,o.mergeArrays)($,j)),{tokens:$}}}class qe extends Pe{constructor($){super($),this.processors=$.processors.map(j=>Pe.fromConfig(j))}post_process($,j=null,X={}){let ie;for(const ce of this.processors)if(ce instanceof He)$=ce.post_process($).tokens,j&&(j=ce.post_process(j).tokens);else{const xe=ce.post_process($,j,X);$=xe.tokens,ie=xe.token_type_ids}return{tokens:$,token_type_ids:ie}}}class Ie extends s.Callable{constructor($){super(),this.config=$,this.added_tokens=[],this.end_of_word_suffix=null,this.trim_offsets=$.trim_offsets}static fromConfig($){if($===null)return null;switch($.type){case"WordPiece":return new Ge($);case"Metaspace":return new or($);case"ByteLevel":return new ke($);case"Replace":return new Ve($);case"ByteFallback":return new Ze($);case"Fuse":return new st($);case"Strip":return new at($);case"Sequence":return new St($);case"CTC":return new pt($);case"BPEDecoder":return new Vt($);default:throw new Error(`Unknown Decoder type: ${$.type}`)}}_call($){return this.decode($)}decode($){return this.decode_chain($).join("")}decode_chain($){throw Error("`decode_chain` should be implemented in subclass.")}}class Ve extends Ie{decode_chain($){const j=_(this.config.pattern);return j===null?$:$.map(X=>X.replaceAll(j,this.config.content))}}class Ze extends Ie{constructor($){super($),this.text_decoder=new TextDecoder}decode_chain($){const j=[];let X=[];for(const ie of $){let ce=null;if(ie.length===6&&ie.startsWith("<0x")&&ie.endsWith(">")){const xe=parseInt(ie.slice(3,5),16);isNaN(xe)||(ce=xe)}if(ce!==null)X.push(ce);else{if(X.length>0){const xe=this.text_decoder.decode(Uint8Array.from(X));j.push(xe),X=[]}j.push(ie)}}if(X.length>0){const ie=this.text_decoder.decode(Uint8Array.from(X));j.push(ie),X=[]}return j}}class st extends Ie{decode_chain($){return[$.join("")]}}class at extends Ie{constructor($){super($),this.content=this.config.content,this.start=this.config.start,this.stop=this.config.stop}decode_chain($){return $.map(j=>{let X=0;for(let ce=0;ce<this.start&&j[ce]===this.content;++ce){X=ce+1;continue}let ie=j.length;for(let ce=0;ce<this.stop;++ce){const xe=j.length-ce-1;if(j[xe]===this.content){ie=xe;continue}else break}return j.slice(X,ie)})}}class Ge extends Ie{constructor($){super($),this.cleanup=$.cleanup}decode_chain($){return $.map((j,X)=>(X!==0&&(j.startsWith(this.config.prefix)?j=j.replace(this.config.prefix,""):j=" "+j),this.cleanup&&(j=I(j)),j))}}class ke extends Ie{constructor($){super($),this.byte_decoder=H,this.text_decoder=new TextDecoder("utf-8",{fatal:!1,ignoreBOM:!0}),this.end_of_word_suffix=null}convert_tokens_to_string($){const j=$.join(""),X=new Uint8Array([...j].map(ce=>this.byte_decoder[ce]));return this.text_decoder.decode(X)}decode_chain($){const j=[];let X=[];for(const ie of $)this.added_tokens.find(ce=>ce.content===ie)!==void 0?(X.length>0&&(j.push(this.convert_tokens_to_string(X)),X=[]),j.push(ie)):X.push(ie);return X.length>0&&j.push(this.convert_tokens_to_string(X)),j}}class pt extends Ie{constructor($){super($),this.pad_token=this.config.pad_token,this.word_delimiter_token=this.config.word_delimiter_token,this.cleanup=this.config.cleanup}convert_tokens_to_string($){if($.length===0)return"";const j=[$[0]];for(let ce=1;ce<$.length;++ce)$[ce]!==j.at(-1)&&j.push($[ce]);let ie=j.filter(ce=>ce!==this.pad_token).join("");return this.cleanup&&(ie=I(ie).replaceAll(this.word_delimiter_token," ").trim()),ie}decode_chain($){return[this.convert_tokens_to_string($)]}}class St extends Ie{constructor($){super($),this.decoders=$.decoders.map(j=>Ie.fromConfig(j))}decode_chain($){return this.decoders.reduce((j,X)=>X.decode_chain(j),$)}}class Vt extends Ie{constructor($){super($),this.suffix=this.config.suffix}decode_chain($){return $.map((j,X)=>j.replaceAll(this.suffix,X===$.length-1?"":" "))}}class zt extends Ie{decode_chain($){let j="";for(let X=1;X<$.length;X+=2)j+=$[X];return[j]}}class gr extends W{constructor($){super(),this.addPrefixSpace=$.add_prefix_space,this.replacement=$.replacement,this.strRep=$.str_rep||this.replacement,this.prepend_scheme=$.prepend_scheme??"always"}pre_tokenize_text($,{section_index:j=void 0}={}){let X=$.replaceAll(" ",this.strRep);return this.addPrefixSpace&&!X.startsWith(this.replacement)&&(this.prepend_scheme==="always"||this.prepend_scheme==="first"&&j===0)&&(X=this.strRep+X),[X]}}class or extends Ie{constructor($){super($),this.addPrefixSpace=$.add_prefix_space,this.replacement=$.replacement}decode_chain($){const j=[];for(let X=0;X<$.length;++X){let ie=$[X].replaceAll(this.replacement," ");this.addPrefixSpace&&X==0&&ie.startsWith(" ")&&(ie=ie.substring(1)),j.push(ie)}return j}}class Mt extends se{constructor($){super($),this.charsmap=$.precompiled_charsmap}normalize($){return $=$.replace(/[\u0001-\u0008\u000B\u000E-\u001F\u007F\u008F\u009F]/gm,""),$=$.replace(/[\u0009\u000A\u000C\u000D\u00A0\u1680\u2000-\u200F\u2028\u2029\u202F\u205F\u2581\u3000\uFEFF\uFFFD]/gm," "),$.includes("～")?$=$.split("～").map(X=>X.normalize("NFKC")).join("～"):$=$.normalize("NFKC"),$}}class Yr extends W{constructor($){super(),this.tokenizers=$.pretokenizers.map(j=>W.fromConfig(j))}pre_tokenize_text($,j){return this.tokenizers.reduce((X,ie)=>ie.pre_tokenize(X,j),[$])}}class D extends W{constructor($){super()}pre_tokenize_text($,j){return $.match(/\w+|[^\w\s]+/g)||[]}}class oe extends W{constructor($){super()}pre_tokenize_text($,j){return v($)}}class B extends W{constructor($){super(),this.config=$,this.pattern=_(this.config.pattern),this.content=this.config.content}pre_tokenize_text($,j){return this.pattern===null?[$]:[$.replaceAll(this.pattern,this.config.content)]}}const te=["bos_token","eos_token","unk_token","sep_token","pad_token","cls_token","mask_token"];function me(de,$,j,X){for(const ie of Object.keys(de)){const ce=$-de[ie].length,xe=j(ie),Re=new Array(ce).fill(xe);de[ie]=X==="right"?(0,o.mergeArrays)(de[ie],Re):(0,o.mergeArrays)(Re,de[ie])}}function Oe(de,$){for(const j of Object.keys(de))de[j].length=$}class ve extends s.Callable{constructor(j,X){super();Y(this,"return_token_type_ids",!1);Y(this,"padding_side","right");this._tokenizer_config=X,this.normalizer=se.fromConfig(j.normalizer),this.pre_tokenizer=W.fromConfig(j.pre_tokenizer),this.model=K.fromConfig(j.model,X),this.post_processor=Pe.fromConfig(j.post_processor),this.decoder=Ie.fromConfig(j.decoder),this.special_tokens=[],this.all_special_ids=[],this.added_tokens=[];for(const ie of j.added_tokens){const ce=new z(ie);this.added_tokens.push(ce),this.model.tokens_to_ids.set(ce.content,ce.id),this.model.vocab[ce.id]=ce.content,ce.special&&(this.special_tokens.push(ce.content),this.all_special_ids.push(ce.id))}if(this.additional_special_tokens=X.additional_special_tokens??[],this.special_tokens.push(...this.additional_special_tokens),this.special_tokens=[...new Set(this.special_tokens)],this.decoder&&(this.decoder.added_tokens=this.added_tokens,this.decoder.end_of_word_suffix=this.model.end_of_word_suffix),this.added_tokens_splitter=new l.DictionarySplitter(this.added_tokens.map(ie=>ie.content)),this.added_tokens_map=new Map(this.added_tokens.map(ie=>[ie.content,ie])),this.mask_token=this.getToken("mask_token"),this.mask_token_id=this.model.tokens_to_ids.get(this.mask_token),this.pad_token=this.getToken("pad_token","eos_token"),this.pad_token_id=this.model.tokens_to_ids.get(this.pad_token),this.sep_token=this.getToken("sep_token"),this.sep_token_id=this.model.tokens_to_ids.get(this.sep_token),this.unk_token=this.getToken("unk_token"),this.unk_token_id=this.model.tokens_to_ids.get(this.unk_token),this.bos_token=this.getToken("bos_token"),this.bos_token_id=this.model.tokens_to_ids.get(this.bos_token),this.eos_token=this.getToken("eos_token"),this.eos_token_id=this.model.tokens_to_ids.get(this.eos_token),this.model_max_length=X.model_max_length,this.remove_space=X.remove_space,this.clean_up_tokenization_spaces=X.clean_up_tokenization_spaces??!0,this.do_lowercase_and_remove_accent=X.do_lowercase_and_remove_accent??!1,X.padding_side&&(this.padding_side=X.padding_side),this.legacy=!1,this.chat_template=X.chat_template??null,Array.isArray(this.chat_template)){const ie=Object.create(null);for(const{name:ce,template:xe}of this.chat_template){if(typeof ce!="string"||typeof xe!="string")throw new Error('Chat template must be a list of objects with "name" and "template" properties');ie[ce]=xe}this.chat_template=ie}this._compiled_template_cache=new Map}getToken(...j){for(const X of j){const ie=this._tokenizer_config[X];if(ie)if(typeof ie=="object"){if(ie.__type==="AddedToken")return ie.content;throw Error(`Unknown token: ${ie}`)}else return ie}return null}static async from_pretrained(j,{progress_callback:X=null,config:ie=null,cache_dir:ce=null,local_files_only:xe=!1,revision:Re="main",legacy:Qe=null}={}){const We=await c(j,{progress_callback:X,config:ie,cache_dir:ce,local_files_only:xe,revision:Re,legacy:Qe});return new this(...We)}_call(j,{text_pair:X=null,add_special_tokens:ie=!0,padding:ce=!1,truncation:xe=null,max_length:Re=null,return_tensor:Qe=!0,return_token_type_ids:We=null}={}){const Ye=Array.isArray(j);let _t;if(Ye){if(j.length===0)throw Error("text array must be non-empty");if(X!==null){if(Array.isArray(X)){if(j.length!==X.length)throw Error("text and text_pair must have the same length")}else throw Error("text_pair must also be an array");_t=j.map((At,Jt)=>this._encode_plus(At,{text_pair:X[Jt],add_special_tokens:ie,return_token_type_ids:We}))}else _t=j.map(At=>this._encode_plus(At,{add_special_tokens:ie,return_token_type_ids:We}))}else{if(j==null)throw Error("text may not be null or undefined");if(Array.isArray(X))throw Error("When specifying `text_pair`, since `text` is a string, `text_pair` must also be a string (i.e., not an array).");_t=[this._encode_plus(j,{text_pair:X,add_special_tokens:ie,return_token_type_ids:We})]}if(Re===null?Re=this.model_max_length:xe===null&&(ce===!0?(console.warn("`max_length` is ignored when `padding: true` and there is no truncation strategy. To pad to max length, use `padding: 'max_length'`."),Re=this.model_max_length):ce===!1&&(console.warn("Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation: true` to explicitly truncate examples to max length."),xe=!0)),ce===!0&&(Re=Math.min((0,i.max)(_t.map(At=>At.input_ids.length))[0],Re??1/0)),Re=Math.min(Re,this.model_max_length??1/0),ce||xe)for(let At=0;At<_t.length;++At)_t[At].input_ids.length!==Re&&(_t[At].input_ids.length>Re?xe&&Oe(_t[At],Re):ce&&me(_t[At],Re,Jt=>Jt==="input_ids"?this.pad_token_id:0,this.padding_side));const Ot={};if(Qe){if(!(ce&&xe)&&_t.some(Jt=>{var Ut;for(const mr of Object.keys(Jt))if(Jt[mr].length!==((Ut=_t[0][mr])==null?void 0:Ut.length))return!0;return!1}))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=true' and 'truncation=true' to have batched tensors with the same length.");const At=[_t.length,_t[0].input_ids.length];for(const Jt of Object.keys(_t[0]))Ot[Jt]=new a.Tensor("int64",BigInt64Array.from(_t.flatMap(Ut=>Ut[Jt]).map(BigInt)),At)}else{for(const At of Object.keys(_t[0]))Ot[At]=_t.map(Jt=>Jt[At]);if(!Ye)for(const At of Object.keys(Ot))Ot[At]=Ot[At][0]}return Ot}_encode_text(j){if(j===null)return null;const X=this.added_tokens_splitter.split(j);for(let ce=0;ce<X.length;++ce){const xe=this.added_tokens_map.get(X[ce]);xe&&(xe.lstrip&&ce>0&&(X[ce-1]=X[ce-1].trimEnd()),xe.rstrip&&ce<X.length-1&&(X[ce+1]=X[ce+1].trimStart()))}return X.flatMap((ce,xe)=>{if(ce.length===0)return[];if(this.added_tokens_map.has(ce))return[ce];if(this.remove_space===!0&&(ce=ce.trim().split(/\s+/).join(" ")),this.do_lowercase_and_remove_accent&&(ce=w(ce)),this.normalizer!==null&&(ce=this.normalizer(ce)),ce.length===0)return[];const Re=this.pre_tokenizer!==null?this.pre_tokenizer(ce,{section_index:xe}):[ce];return this.model(Re)})}_encode_plus(j,{text_pair:X=null,add_special_tokens:ie=!0,return_token_type_ids:ce=null}={}){const{tokens:xe,token_type_ids:Re}=this._tokenize_helper(j,{pair:X,add_special_tokens:ie}),Qe=this.model.convert_tokens_to_ids(xe),We={input_ids:Qe,attention_mask:new Array(Qe.length).fill(1)};return(ce??this.return_token_type_ids)&&Re&&(We.token_type_ids=Re),We}_tokenize_helper(j,{pair:X=null,add_special_tokens:ie=!1}={}){const ce=this._encode_text(j),xe=this._encode_text(X);return this.post_processor?this.post_processor(ce,xe,{add_special_tokens:ie}):{tokens:(0,o.mergeArrays)(ce??[],xe??[])}}tokenize(j,{pair:X=null,add_special_tokens:ie=!1}={}){return this._tokenize_helper(j,{pair:X,add_special_tokens:ie}).tokens}encode(j,{text_pair:X=null,add_special_tokens:ie=!0,return_token_type_ids:ce=null}={}){return this._encode_plus(j,{text_pair:X,add_special_tokens:ie,return_token_type_ids:ce}).input_ids}batch_decode(j,X={}){return j instanceof a.Tensor&&(j=j.tolist()),j.map(ie=>this.decode(ie,X))}decode(j,X={}){if(j instanceof a.Tensor&&(j=T(j)),!Array.isArray(j)||j.length===0||!(0,o.isIntegralNumber)(j[0]))throw Error("token_ids must be a non-empty array of integers.");return this.decode_single(j,X)}decode_single(j,{skip_special_tokens:X=!1,clean_up_tokenization_spaces:ie=null}){let ce=this.model.convert_ids_to_tokens(j);X&&(ce=ce.filter(Re=>!this.special_tokens.includes(Re)));let xe=this.decoder?this.decoder(ce):ce.join(" ");return this.decoder&&this.decoder.end_of_word_suffix&&(xe=xe.replaceAll(this.decoder.end_of_word_suffix," "),X&&(xe=xe.trim())),(ie??this.clean_up_tokenization_spaces)&&(xe=I(xe)),xe}get_chat_template({chat_template:j=null,tools:X=null}={}){if(this.chat_template&&typeof this.chat_template=="object"){const ie=this.chat_template;if(j!==null&&Object.hasOwn(ie,j))j=ie[j];else if(j===null)if(X!==null&&"tool_use"in ie)j=ie.tool_use;else if("default"in ie)j=ie.default;else throw Error(`This model has multiple chat templates with no default specified! Please either pass a chat template or the name of the template you wish to use to the 'chat_template' argument. Available template names are ${Object.keys(ie).sort()}.`)}else if(j===null)if(this.chat_template)j=this.chat_template;else throw Error("Cannot use apply_chat_template() because tokenizer.chat_template is not set and no template argument was passed! For information about writing templates and setting the tokenizer.chat_template attribute, please see the documentation at https://huggingface.co/docs/transformers/main/en/chat_templating");return j}apply_chat_template(j,{tools:X=null,documents:ie=null,chat_template:ce=null,add_generation_prompt:xe=!1,tokenize:Re=!0,padding:Qe=!1,truncation:We=!1,max_length:Ye=null,return_tensor:_t=!0,return_dict:Ot=!1,tokenizer_kwargs:At={},...Jt}={}){if(ce=this.get_chat_template({chat_template:ce,tools:X}),typeof ce!="string")throw Error(`chat_template must be a string, but got ${typeof ce}`);let Ut=this._compiled_template_cache.get(ce);Ut===void 0&&(Ut=new u.Template(ce),this._compiled_template_cache.set(ce,Ut));const mr=Object.create(null);for(const Er of te){const Pr=this.getToken(Er);Pr&&(mr[Er]=Pr)}const Mr=Ut.render({messages:j,add_generation_prompt:xe,tools:X,documents:ie,...mr,...Jt});if(Re){const Er=this._call(Mr,{add_special_tokens:!1,padding:Qe,truncation:We,max_length:Ye,return_tensor:_t,...At});return Ot?Er:Er.input_ids}return Mr}}class yt extends ve{constructor(){super(...arguments);Y(this,"return_token_type_ids",!0)}}class Ft extends ve{constructor(){super(...arguments);Y(this,"return_token_type_ids",!0)}}class ht extends ve{constructor(){super(...arguments);Y(this,"return_token_type_ids",!0)}}class lt extends ve{constructor(){super(...arguments);Y(this,"return_token_type_ids",!0)}}class rt extends ve{constructor(){super(...arguments);Y(this,"return_token_type_ids",!0)}}class Bt extends ve{constructor(){super(...arguments);Y(this,"return_token_type_ids",!0)}}class Ht extends ve{constructor(){super(...arguments);Y(this,"return_token_type_ids",!0)}}class wr extends ve{constructor(){super(...arguments);Y(this,"return_token_type_ids",!0)}}class Xt extends ve{constructor(){super(...arguments);Y(this,"return_token_type_ids",!0)}}class Or extends ve{}class Zr extends ve{}class cs extends ve{constructor(j,X){super(j,X);Y(this,"return_token_type_ids",!0);console.warn('WARNING: `XLMTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}}class es extends ve{constructor(){super(...arguments);Y(this,"return_token_type_ids",!0)}}class Ps extends ve{}class jr extends ve{}class Cs extends ve{}class Gr extends ve{constructor($,j){super($,j),this.languageRegex=/^[a-z]{2}_[A-Z]{2}$/,this.language_codes=this.special_tokens.filter(X=>this.languageRegex.test(X)),this.lang_to_token=X=>X}_build_translation_inputs($,j,X){return ur(this,$,j,X)}}class ds extends Gr{}class Ss extends ve{}class $s extends ve{}const ir="▁";class Is extends ve{constructor(j,X){super(j,X);Y(this,"padding_side","left");this.legacy=X.legacy??!0,this.legacy||(this.normalizer=null,this.pre_tokenizer=new gr({replacement:ir,add_prefix_space:!0,prepend_scheme:"first"}))}_encode_text(j){if(j===null)return null;if(this.legacy||j.length===0)return super._encode_text(j);let X=super._encode_text(ir+j.replaceAll(ir," "));return X.length>1&&X[0]===ir&&this.special_tokens.includes(X[1])&&(X=X.slice(1)),X}}class Tr extends ve{}class ps extends ve{}class zr extends ve{}class Ae extends ve{}class Je extends ve{}class it extends ve{}class Rt extends ve{}class ts extends ve{}class rs extends ve{}function ur(de,$,j,X){if(!("language_codes"in de)||!Array.isArray(de.language_codes))throw new Error("Tokenizer must have `language_codes` attribute set and it should be an array of language ids.");if(!("languageRegex"in de)||!(de.languageRegex instanceof RegExp))throw new Error("Tokenizer must have `languageRegex` attribute set and it should be a regular expression.");if(!("lang_to_token"in de)||typeof de.lang_to_token!="function")throw new Error("Tokenizer must have `lang_to_token` attribute set and it should be a function.");const ie=X.src_lang,ce=X.tgt_lang;if(!de.language_codes.includes(ce))throw new Error(`Target language code "${ce}" is not valid. Must be one of: {${de.language_codes.join(", ")}}`);if(ie!==void 0){if(!de.language_codes.includes(ie))throw new Error(`Source language code "${ie}" is not valid. Must be one of: {${de.language_codes.join(", ")}}`);for(const xe of de.post_processor.config.single)if("SpecialToken"in xe&&de.languageRegex.test(xe.SpecialToken.id)){xe.SpecialToken.id=de.lang_to_token(ie);break}}return X.forced_bos_token_id=de.model.convert_tokens_to_ids([de.lang_to_token(ce)])[0],de._call($,j)}class ss extends ve{constructor($,j){super($,j),this.languageRegex=/^[a-z]{3}_[A-Z][a-z]{3}$/,this.language_codes=this.special_tokens.filter(X=>this.languageRegex.test(X)),this.lang_to_token=X=>X}_build_translation_inputs($,j,X){return ur(this,$,j,X)}}class cr extends ve{constructor($,j){super($,j),this.languageRegex=/^__[a-z]{2,3}__$/,this.language_codes=this.special_tokens.filter(X=>this.languageRegex.test(X)).map(X=>X.slice(2,-2)),this.lang_to_token=X=>`__${X}__`}_build_translation_inputs($,j,X){return ur(this,$,j,X)}}class hr extends ve{get timestamp_begin(){return this.model.convert_tokens_to_ids(["<|notimestamps|>"])[0]+1}_decode_asr($,{return_timestamps:j=!1,return_language:X=!1,time_precision:ie=null,force_full_sequences:ce=!0}={}){if(ie===null)throw Error("Must specify time_precision");let xe=null;const Re=j==="word";function Qe(){return{language:xe,timestamp:[null,null],text:""}}const We=[];let Ye=Qe(),_t=0;const Ot=this.timestamp_begin,Jt=Ot+1500;let Ut=[],mr=[],Mr=!1,Er=null;const Pr=new Set(this.all_special_ids);for(const Kt of $){const fr=Kt.tokens,Dr=Re?Kt.token_timestamps:null;let Kr=null,Hr=Ot;if("stride"in Kt){const[br,er,dr]=Kt.stride;if(_t-=er,Er=br-dr,er&&(Hr=er/ie+Ot),dr)for(let pr=fr.length-1;pr>=0;--pr){const kr=Number(fr[pr]);if(kr>=Ot){if(Kr!==null&&(kr-Ot)*ie<Er)break;Kr=kr}}}let Ir=[],Lr=[];for(let br=0;br<fr.length;++br){const er=Number(fr[br]);if(Pr.has(er)){const dr=this.decode([er]),pr=p.WHISPER_LANGUAGE_MAPPING.get(dr.slice(2,-2));if(pr!==void 0){if(xe!==null&&pr!==xe&&!j){Ut.push(Ir);const kr=this.findLongestCommonSequence(Ut)[0],os=this.decode(kr);Ye.text=os,We.push(Ye),Ut=[],Ir=[],Ye=Qe()}xe=Ye.language=pr}}else if(er>=Ot&&er<=Jt){const dr=(er-Ot)*ie+_t,pr=(0,i.round)(dr,2);if(Kr!==null&&er>=Kr)Mr=!0;else if(Mr||Ut.length>0&&er<Hr)Mr=!1;else if(Ye.timestamp[0]===null)Ye.timestamp[0]=pr;else if(pr!==Ye.timestamp[0]){Ye.timestamp[1]=pr,Ut.push(Ir),Re&&mr.push(Lr);const[kr,os]=this.findLongestCommonSequence(Ut,mr),un=this.decode(kr);Ye.text=un,Re&&(Ye.words=this.collateWordTimestamps(kr,os,xe)),We.push(Ye),Ut=[],Ir=[],mr=[],Lr=[],Ye=Qe()}}else if(Ir.push(er),Re){let dr=(0,i.round)(Dr[br]+_t,2),pr;if(br+1<Dr.length){pr=(0,i.round)(Dr[br+1]+_t,2);const kr=this.decode([er]);y.test(kr)&&(pr=(0,i.round)(Math.min(dr+ie,pr),2))}else pr=null;Lr.push([dr,pr])}}if("stride"in Kt){const[br,er,dr]=Kt.stride;_t+=br-dr}Ir.length>0?(Ut.push(Ir),Re&&mr.push(Lr)):Ut.every(br=>br.length===0)&&(Ye=Qe(),Ut=[],Ir=[],mr=[],Lr=[])}if(Ut.length>0){if(ce&&j)throw new Error("Whisper did not predict an ending timestamp, which can happen if audio is cut off in the middle of a word. Also make sure WhisperTimeStampLogitsProcessor was used during generation.");const[Kt,fr]=this.findLongestCommonSequence(Ut,mr),Dr=this.decode(Kt);Ye.text=Dr,Re&&(Ye.words=this.collateWordTimestamps(Kt,fr,xe)),We.push(Ye)}let Zt=Object.create(null);const ms=We.map(Kt=>Kt.text).join("");if(j||X){for(let Kt=0;Kt<We.length;++Kt){const fr=We[Kt];j||delete fr.timestamp,X||delete fr.language}if(Re){const Kt=[];for(const fr of We)for(const Dr of fr.words)Kt.push(Dr);Zt={chunks:Kt}}else Zt={chunks:We}}return[ms,Zt]}findLongestCommonSequence($,j=null){let X=$[0],ie=X.length,ce=[];const xe=Array.isArray(j)&&j.length>0;let Re=xe?[]:null,Qe=xe?j[0]:null;for(let We=1;We<$.length;++We){const Ye=$[We];let _t=0,Ot=[ie,ie,0,0];const At=Ye.length;for(let Zt=1;Zt<ie+At;++Zt){const ms=Math.max(0,ie-Zt),Kt=Math.min(ie,ie+At-Zt),fr=X.slice(ms,Kt),Dr=Math.max(0,Zt-ie),Kr=Math.min(At,Zt),Hr=Ye.slice(Dr,Kr);if(fr.length!==Hr.length)throw new Error("There is a bug within whisper `decode_asr` function, please report it. Dropping to prevent bad inference.");let Ir;xe?Ir=fr.filter((er,dr)=>er===Hr[dr]&&Qe[ms+dr]<=j[We][Dr+dr]).length:Ir=fr.filter((er,dr)=>er===Hr[dr]).length;const Lr=Zt/1e4,br=Ir/Zt+Lr;Ir>1&&br>_t&&(_t=br,Ot=[ms,Kt,Dr,Kr])}const[Jt,Ut,mr,Mr]=Ot,Er=Math.floor((Ut+Jt)/2),Pr=Math.floor((Mr+mr)/2);ce.push(...X.slice(0,Er)),X=Ye.slice(Pr),ie=X.length,xe&&(Re.push(...Qe.slice(0,Er)),Qe=j[We].slice(Pr))}return ce.push(...X),xe?(Re.push(...Qe),[ce,Re]):[ce,[]]}collateWordTimestamps($,j,X){const[ie,ce,xe]=this.combineTokensIntoWords($,X),Re=[];for(let Qe=0;Qe<ie.length;++Qe){const We=xe[Qe];Re.push({text:ie[Qe],timestamp:[j[We.at(0)][0],j[We.at(-1)][1]]})}return Re}combineTokensIntoWords($,j,X=`"'“¡¿([{-`,ie=`"'.。,，!！?？:：”)]}、`){j=j??"english";let ce,xe,Re;return["chinese","japanese","thai","lao","myanmar"].includes(j)?[ce,xe,Re]=this.splitTokensOnUnicode($):[ce,xe,Re]=this.splitTokensOnSpaces($),this.mergePunctuations(ce,xe,Re,X,ie)}decode($,j){let X;return j!=null&&j.decode_with_timestamps?($ instanceof a.Tensor&&($=T($)),X=this.decodeWithTimestamps($,j)):X=super.decode($,j),X}decodeWithTimestamps($,j){const X=(j==null?void 0:j.time_precision)??.02,ie=Array.from(this.all_special_ids).at(-1)+1;let ce=[[]];for(let xe of $)if(xe=Number(xe),xe>=ie){const Re=((xe-ie)*X).toFixed(2);ce.push(`<|${Re}|>`),ce.push([])}else ce[ce.length-1].push(xe);return ce=ce.map(xe=>typeof xe=="string"?xe:super.decode(xe,j)),ce.join("")}splitTokensOnUnicode($){const j=this.decode($,{decode_with_timestamps:!0}),X="�",ie=[],ce=[],xe=[];let Re=[],Qe=[],We=0;for(let Ye=0;Ye<$.length;++Ye){const _t=$[Ye];Re.push(_t),Qe.push(Ye);const Ot=this.decode(Re,{decode_with_timestamps:!0});(!Ot.includes(X)||j[We+Ot.indexOf(X)]===X)&&(ie.push(Ot),ce.push(Re),xe.push(Qe),Re=[],Qe=[],We+=Ot.length)}return[ie,ce,xe]}splitTokensOnSpaces($){const[j,X,ie]=this.splitTokensOnUnicode($),ce=[],xe=[],Re=[],Qe=new RegExp(`^[${M}]$`,"gu");for(let We=0;We<j.length;++We){const Ye=j[We],_t=X[We],Ot=ie[We],At=_t[0]>=this.model.tokens_to_ids.get("<|endoftext|>"),Jt=Ye.startsWith(" "),Ut=Ye.trim(),mr=Qe.test(Ut);if(At||Jt||mr||ce.length===0)ce.push(Ye),xe.push(_t),Re.push(Ot);else{const Mr=ce.length-1;ce[Mr]+=Ye,xe[Mr].push(..._t),Re[Mr].push(...Ot)}}return[ce,xe,Re]}mergePunctuations($,j,X,ie,ce){const xe=structuredClone($),Re=structuredClone(j),Qe=structuredClone(X);let We=xe.length-2,Ye=xe.length-1;for(;We>=0;)xe[We].startsWith(" ")&&ie.includes(xe[We].trim())?(xe[Ye]=xe[We]+xe[Ye],Re[Ye]=(0,o.mergeArrays)(Re[We],Re[Ye]),Qe[Ye]=(0,o.mergeArrays)(Qe[We],Qe[Ye]),xe[We]="",Re[We]=[],Qe[We]=[]):Ye=We,--We;for(We=0,Ye=1;Ye<xe.length;)!xe[We].endsWith(" ")&&ce.includes(xe[Ye])?(xe[We]+=xe[Ye],Re[We]=(0,o.mergeArrays)(Re[We],Re[Ye]),Qe[We]=(0,o.mergeArrays)(Qe[We],Qe[Ye]),xe[Ye]="",Re[Ye]=[],Qe[Ye]=[]):We=Ye,++Ye;return[xe.filter(_t=>_t),Re.filter(_t=>_t.length>0),Qe.filter(_t=>_t.length>0)]}}class ns extends ve{}class hs extends ve{}class en extends ve{}class tn extends ve{constructor($,j){super($,j),this.languageRegex=/^(>>\w+<<)\s*/g,this.supported_language_codes=this.model.vocab.filter(X=>this.languageRegex.test(X)),console.warn('WARNING: `MarianTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}_encode_text($){if($===null)return null;const[j,...X]=$.trim().split(this.languageRegex);if(X.length===0)return super._encode_text(j);if(X.length===2){const[ie,ce]=X;return this.supported_language_codes.includes(ie)||console.warn(`Unsupported language code "${ie}" detected, which may lead to unexpected behavior. Should be one of: ${JSON.stringify(this.supported_language_codes)}`),(0,o.mergeArrays)([ie],super._encode_text(ce))}}}class rn extends ve{}class sn extends ve{}class nn extends ve{}class ks extends ve{}class js extends ve{}class on extends ve{constructor($,j){super($,j),this.decoder=new zt({})}}class an extends ve{}class ln extends ve{}class As{static async from_pretrained($,{progress_callback:j=null,config:X=null,cache_dir:ie=null,local_files_only:ce=!1,revision:xe="main",legacy:Re=null}={}){var Ot;const[Qe,We]=await c($,{progress_callback:j,config:X,cache_dir:ie,local_files_only:ce,revision:xe,legacy:Re}),Ye=((Ot=We.tokenizer_class)==null?void 0:Ot.replace(/Fast$/,""))??"PreTrainedTokenizer";let _t=this.TOKENIZER_CLASS_MAPPING[Ye];return _t||(console.warn(`Unknown tokenizer class "${Ye}", attempting to construct from base class.`),_t=ve),new _t(Qe,We)}}Y(As,"TOKENIZER_CLASS_MAPPING",{T5Tokenizer:Ps,DistilBertTokenizer:Or,CamembertTokenizer:Zr,DebertaTokenizer:rt,DebertaV2Tokenizer:Bt,BertTokenizer:yt,HerbertTokenizer:Ht,ConvBertTokenizer:wr,RoFormerTokenizer:Xt,XLMTokenizer:cs,ElectraTokenizer:es,MobileBertTokenizer:ht,SqueezeBertTokenizer:lt,AlbertTokenizer:Ft,GPT2Tokenizer:jr,BartTokenizer:Cs,MBartTokenizer:Gr,MBart50Tokenizer:ds,RobertaTokenizer:Ss,WhisperTokenizer:hr,CodeGenTokenizer:ns,CLIPTokenizer:hs,SiglipTokenizer:en,MarianTokenizer:tn,BloomTokenizer:$s,NllbTokenizer:ss,M2M100Tokenizer:cr,LlamaTokenizer:Is,CodeLlamaTokenizer:Tr,XLMRobertaTokenizer:ps,MPNetTokenizer:zr,FalconTokenizer:Ae,GPTNeoXTokenizer:Je,EsmTokenizer:it,Wav2Vec2CTCTokenizer:rn,BlenderbotTokenizer:sn,BlenderbotSmallTokenizer:nn,SpeechT5Tokenizer:ks,NougatTokenizer:js,VitsTokenizer:on,Qwen2Tokenizer:Rt,GemmaTokenizer:ts,Grok1Tokenizer:rs,CohereTokenizer:an,MgpstrTokenizer:ln,PreTrainedTokenizer:ve})},"./src/utils/audio.js":(e,r,t)=>{t.r(r),t.d(r,{RawAudio:()=>q,hamming:()=>d,hanning:()=>c,mel_filter_bank:()=>S,read_audio:()=>u,spectrogram:()=>C,window_function:()=>F});var s=t("./src/utils/hub.js"),o=t("./src/utils/maths.js"),n=t("./src/utils/core.js"),i=t("./src/env.js"),a=t("?7a2c"),l=t("./src/utils/tensor.js");async function u(R,Z){if(typeof AudioContext>"u")throw Error("Unable to load audio from path/URL since `AudioContext` is not available in your environment. Instead, audio data should be passed directly to the pipeline/processor. For more information and some example code, see https://huggingface.co/docs/transformers.js/guides/node-audio-processing.");const H=await(await(0,s.getFile)(R)).arrayBuffer(),J=new AudioContext({sampleRate:Z});typeof Z>"u"&&console.warn(`No sampling rate provided, using default of ${J.sampleRate}Hz.`);const Q=await J.decodeAudioData(H);let se;if(Q.numberOfChannels===2){const fe=Math.sqrt(2),ae=Q.getChannelData(0),V=Q.getChannelData(1);se=new Float32Array(ae.length);for(let A=0;A<Q.length;++A)se[A]=fe*(ae[A]+V[A])/2}else se=Q.getChannelData(0);return se}function p(R,Z){if(R<1)return new Float64Array;if(R===1)return new Float64Array([1]);const H=1-Z,J=2*Math.PI/(R-1),Q=new Float64Array(R);for(let se=0;se<R;++se)Q[se]=Z-H*Math.cos(se*J);return Q}function c(R){return p(R,.5)}function d(R){return p(R,.54)}const _={htk:R=>2595*Math.log10(1+R/700),kaldi:R=>1127*Math.log(1+R/700),slaney:(R,Z=1e3,H=15,J=27/Math.log(6.4))=>R>=Z?H+Math.log(R/Z)*J:3*R/200};function f(R,Z="htk"){const H=_[Z];if(!H)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof R=="number"?H(R):R.map(J=>H(J))}const T={htk:R=>700*(10**(R/2595)-1),kaldi:R=>700*(Math.exp(R/1127)-1),slaney:(R,Z=1e3,H=15,J=Math.log(6.4)/27)=>R>=H?Z*Math.exp(J*(R-H)):200*R/3};function I(R,Z="htk"){const H=T[Z];if(!H)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof R=="number"?H(R):R.map(J=>H(J))}function g(R,Z){const H=Float64Array.from({length:Z.length-1},(fe,ae)=>Z[ae+1]-Z[ae]),J=Array.from({length:R.length},()=>new Array(Z.length));for(let fe=0;fe<R.length;++fe){const ae=J[fe];for(let V=0;V<Z.length;++V)ae[V]=Z[V]-R[fe]}const Q=Z.length-2,se=Array.from({length:Q},()=>new Array(R.length));for(let fe=0;fe<R.length;++fe){const ae=J[fe];for(let V=0;V<Q;++V){const A=-ae[V]/H[V],U=ae[V+2]/H[V+1];se[V][fe]=Math.max(0,Math.min(A,U))}}return se}function w(R,Z,H){const J=(Z-R)/(H-1);return Float64Array.from({length:H},(Q,se)=>R+J*se)}function S(R,Z,H,J,Q,se=null,fe="htk",ae=!1){if(se!==null&&se!=="slaney")throw new Error('norm must be one of null or "slaney"');if(R<2)throw new Error(`Require num_frequency_bins: ${R} >= 2`);if(H>J)throw new Error(`Require min_frequency: ${H} <= max_frequency: ${J}`);const V=f(H,fe),A=f(J,fe),U=w(V,A,Z+2);let ee=I(U,fe),_e;if(ae){const ye=Q/((R-1)*2);_e=f(Float64Array.from({length:R},(ze,Ue)=>Ue*ye),fe),ee=U}else _e=w(0,Math.floor(Q/2),R);const le=g(_e,ee);if(se!==null&&se==="slaney")for(let ye=0;ye<Z;++ye){const ze=le[ye],Ue=2/(ee[ye+2]-ee[ye]);for(let pe=0;pe<R;++pe)ze[pe]*=Ue}return le}function E(R,Z,H){const J=new R.constructor(R.length+Z+H),Q=R.length-1;for(let se=0;se<R.length;++se)J[Z+se]=R[se];for(let se=1;se<=Z;++se)J[Z-se]=R[(0,n.calculateReflectOffset)(se,Q)];for(let se=1;se<=H;++se)J[Q+Z+se]=R[(0,n.calculateReflectOffset)(Q-se,Q)];return J}function v(R,Z,H,J,Q){if(H<=0)throw new Error("reference must be greater than zero");if(J<=0)throw new Error("min_value must be greater than zero");H=Math.max(J,H);const se=Math.log10(H);for(let fe=0;fe<R.length;++fe)R[fe]=Z*Math.log10(Math.max(J,R[fe])-se);if(Q!==null){if(Q<=0)throw new Error("db_range must be greater than zero");const fe=(0,o.max)(R)[0]-Q;for(let ae=0;ae<R.length;++ae)R[ae]=Math.max(R[ae],fe)}return R}function M(R,Z=1,H=1e-5,J=null){return v(R,20,Z,H,J)}function y(R,Z=1,H=1e-10,J=null){return v(R,10,Z,H,J)}async function C(R,Z,H,J,{fft_length:Q=null,power:se=1,center:fe=!0,pad_mode:ae="reflect",onesided:V=!0,preemphasis:A=null,mel_filters:U=null,mel_floor:ee=1e-10,log_mel:_e=null,reference:le=1,min_value:ye=1e-10,db_range:ze=null,remove_dc_offset:Ue=null,min_num_frames:pe=null,max_num_frames:W=null,do_pad:re=!0,transpose:G=!1}={}){const Me=Z.length;if(Q===null&&(Q=H),H>Q)throw Error(`frame_length (${H}) may not be larger than fft_length (${Q})`);if(Me!==H)throw new Error(`Length of the window (${Me}) must equal frame_length (${H})`);if(J<=0)throw new Error("hop_length must be greater than zero");if(se===null&&U!==null)throw new Error("You have provided `mel_filters` but `power` is `None`. Mel spectrogram computation is not yet supported for complex-valued spectrogram. Specify `power` to fix this issue.");if(fe){if(ae!=="reflect")throw new Error(`pad_mode="${ae}" not implemented yet.`);const st=Math.floor((Q-1)/2)+1;R=E(R,st,st)}let we=Math.floor(1+Math.floor((R.length-H)/J));pe!==null&&we<pe&&(we=pe);const Se=V?Math.floor(Q/2)+1:Q;let Pe=we,$e=we;W!==null&&(W>we?re&&($e=W):$e=Pe=W);const Fe=new o.FFT(Q),Be=new Float64Array(Q),He=new Float64Array(Fe.outputBufferSize),qe=new Float32Array(Se*$e);for(let st=0;st<Pe;++st){const at=st*J,Ge=Math.min(R.length-at,H);Ge!==H&&Be.fill(0,0,H);for(let ke=0;ke<Ge;++ke)Be[ke]=R[at+ke];if(Ue){let ke=0;for(let St=0;St<Ge;++St)ke+=Be[St];const pt=ke/Ge;for(let St=0;St<Ge;++St)Be[St]-=pt}if(A!==null){for(let ke=Ge-1;ke>=1;--ke)Be[ke]-=A*Be[ke-1];Be[0]*=1-A}for(let ke=0;ke<Z.length;++ke)Be[ke]*=Z[ke];Fe.realTransform(He,Be);for(let ke=0;ke<Se;++ke){const pt=ke<<1;qe[ke*$e+st]=He[pt]**2+He[pt+1]**2}}if(se!==null&&se!==2){const st=2/se;for(let at=0;at<qe.length;++at)qe[at]**=st}const Ie=U.length;let Ve=await(0,l.matmul)(new l.Tensor("float32",U.flat(),[Ie,Se]),new l.Tensor("float32",qe,[Se,$e]));G&&(Ve=Ve.transpose(1,0));const Ze=Ve.data;for(let st=0;st<Ze.length;++st)Ze[st]=Math.max(ee,Ze[st]);if(se!==null&&_e!==null){const st=Math.min(Ze.length,Pe*Ie);switch(_e){case"log":for(let at=0;at<st;++at)Ze[at]=Math.log(Ze[at]);break;case"log10":for(let at=0;at<st;++at)Ze[at]=Math.log10(Ze[at]);break;case"dB":if(se===1)M(Ze,le,ye,ze);else if(se===2)y(Ze,le,ye,ze);else throw new Error(`Cannot use log_mel option '${_e}' with power ${se}`);break;default:throw new Error(`log_mel must be one of null, 'log', 'log10' or 'dB'. Got '${_e}'`)}}return Ve}function F(R,Z,{periodic:H=!0,frame_length:J=null,center:Q=!0}={}){const se=H?R+1:R;let fe;switch(Z){case"boxcar":fe=new Float64Array(se).fill(1);break;case"hann":case"hann_window":fe=c(se);break;case"hamming":fe=d(se);break;case"povey":fe=c(se).map(ae=>Math.pow(ae,.85));break;default:throw new Error(`Unknown window type ${Z}.`)}if(H&&(fe=fe.subarray(0,R)),J===null)return fe;if(R>J)throw new Error(`Length of the window (${R}) may not be larger than frame_length (${J})`);return fe}function z(R,Z){let H=44;const J=new ArrayBuffer(H+R.length*4),Q=new DataView(J);K(Q,0,"RIFF"),Q.setUint32(4,36+R.length*4,!0),K(Q,8,"WAVE"),K(Q,12,"fmt "),Q.setUint32(16,16,!0),Q.setUint16(20,3,!0),Q.setUint16(22,1,!0),Q.setUint32(24,Z,!0),Q.setUint32(28,Z*4,!0),Q.setUint16(32,4,!0),Q.setUint16(34,32,!0),K(Q,36,"data"),Q.setUint32(40,R.length*4,!0);for(let se=0;se<R.length;++se,H+=4)Q.setFloat32(H,R[se],!0);return J}function K(R,Z,H){for(let J=0;J<H.length;++J)R.setUint8(Z+J,H.charCodeAt(J))}class q{constructor(Z,H){this.audio=Z,this.sampling_rate=H}toWav(){return z(this.audio,this.sampling_rate)}toBlob(){const Z=this.toWav();return new Blob([Z],{type:"audio/wav"})}async save(Z){let H;if(i.apis.IS_BROWSER_ENV){if(i.apis.IS_WEBWORKER_ENV)throw new Error("Unable to save a file from a Web Worker.");H=n.saveBlob}else if(i.apis.IS_FS_AVAILABLE)H=async(J,Q)=>{let se=await Q.arrayBuffer();a.writeFileSync(J,Buffer.from(se))};else throw new Error("Unable to save because filesystem is disabled in this environment.");await H(Z,this.toBlob())}}},"./src/utils/constants.js":(e,r,t)=>{t.r(r),t.d(r,{CHAT_TEMPLATE_NAME:()=>l,CONFIG_NAME:()=>o,FEATURE_EXTRACTOR_NAME:()=>n,GENERATION_CONFIG_NAME:()=>u,GITHUB_ISSUE_URL:()=>s,IMAGE_PROCESSOR_NAME:()=>i,PROCESSOR_NAME:()=>a});const s="https://github.com/huggingface/transformers.js/issues/new/choose",o="config.json",n="preprocessor_config.json",i=n,a="processor_config.json",l="chat_template.json",u="generation_config.json"},"./src/utils/core.js":(e,r,t)=>{t.r(r),t.d(r,{calculateDimensions:()=>u,calculateReflectOffset:()=>_,count:()=>g,dispatchCallback:()=>s,escapeRegExp:()=>n,isIntegralNumber:()=>a,isNullishDimension:()=>l,isTypedArray:()=>i,len:()=>I,mergeArrays:()=>c,pick:()=>T,pop:()=>p,product:()=>d,reverseDictionary:()=>o,saveBlob:()=>f});function s(w,S){w&&w(S)}function o(w){return Object.fromEntries(Object.entries(w).map(([S,E])=>[E,S]))}function n(w){return w.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function i(w){var S,E,v;return((v=(E=(S=w==null?void 0:w.prototype)==null?void 0:S.__proto__)==null?void 0:E.constructor)==null?void 0:v.name)==="TypedArray"}function a(w){return Number.isInteger(w)||typeof w=="bigint"}function l(w){return w==null||w===-1}function u(w){const S=[];let E=w;for(;Array.isArray(E);)S.push(E.length),E=E[0];return S}function p(w,S,E=void 0){const v=w[S];if(v!==void 0)return delete w[S],v;if(E===void 0)throw Error(`Key ${S} does not exist in object.`);return E}function c(...w){return Array.prototype.concat.apply([],w)}function d(...w){return w.reduce((S,E)=>S.flatMap(v=>E.map(M=>[v,M])))}function _(w,S){return Math.abs((w+S)%(2*S)-S)}function f(w,S){const E=URL.createObjectURL(S),v=document.createElement("a");v.href=E,v.download=w,v.click(),v.remove(),URL.revokeObjectURL(E)}function T(w,S){return Object.assign({},...S.map(E=>{if(w[E]!==void 0)return{[E]:w[E]}}))}function I(w){let S=0;for(const E of w)++S;return S}function g(w,S){let E=0;for(const v of w)v===S&&++E;return E}},"./src/utils/data-structures.js":(e,r,t)=>{t.r(r),t.d(r,{CharTrie:()=>o,DictionarySplitter:()=>l,LRUCache:()=>u,PriorityQueue:()=>s,TokenLattice:()=>i});class s{constructor(c=(_,f)=>_>f,d=1/0){this._heap=[],this._comparator=c,this._maxSize=d}get size(){return this._heap.length}isEmpty(){return this.size===0}peek(){return this._heap[0]}push(...c){return this.extend(c)}extend(c){for(const d of c)if(this.size<this._maxSize)this._heap.push(d),this._siftUp();else{const _=this._smallest();this._comparator(d,this._heap[_])&&(this._heap[_]=d,this._siftUpFrom(_))}return this.size}pop(){const c=this.peek(),d=this.size-1;return d>0&&this._swap(0,d),this._heap.pop(),this._siftDown(),c}replace(c){const d=this.peek();return this._heap[0]=c,this._siftDown(),d}_parent(c){return(c+1>>>1)-1}_left(c){return(c<<1)+1}_right(c){return c+1<<1}_greater(c,d){return this._comparator(this._heap[c],this._heap[d])}_swap(c,d){const _=this._heap[c];this._heap[c]=this._heap[d],this._heap[d]=_}_siftUp(){this._siftUpFrom(this.size-1)}_siftUpFrom(c){for(;c>0&&this._greater(c,this._parent(c));)this._swap(c,this._parent(c)),c=this._parent(c)}_siftDown(){let c=0;for(;this._left(c)<this.size&&this._greater(this._left(c),c)||this._right(c)<this.size&&this._greater(this._right(c),c);){const d=this._right(c)<this.size&&this._greater(this._right(c),this._left(c))?this._right(c):this._left(c);this._swap(c,d),c=d}}_smallest(){return 2**Math.floor(Math.log2(this.size))-1}}class o{constructor(){this.root=n.default()}extend(c){for(const d of c)this.push(d)}push(c){let d=this.root;for(const _ of c){let f=d.children.get(_);f===void 0&&(f=n.default(),d.children.set(_,f)),d=f}d.isLeaf=!0}*commonPrefixSearch(c){let d=this.root;if(d===void 0)return;let _="";for(const f of c){if(_+=f,d=d.children.get(f),d===void 0)return;d.isLeaf&&(yield _)}}}class n{constructor(c,d){this.isLeaf=c,this.children=d}static default(){return new n(!1,new Map)}}class i{constructor(c,d,_){this.chars=Array.from(c),this.len=this.chars.length,this.bosTokenId=d,this.eosTokenId=_,this.nodes=[],this.beginNodes=Array.from({length:this.len+1},()=>[]),this.endNodes=Array.from({length:this.len+1},()=>[]);const f=new a(this.bosTokenId,0,0,0,0),T=new a(this.eosTokenId,1,this.len,0,0);this.nodes.push(f.clone()),this.nodes.push(T.clone()),this.beginNodes[this.len].push(T),this.endNodes[0].push(f)}insert(c,d,_,f){const T=this.nodes.length,I=new a(f,T,c,d,_);this.beginNodes[c].push(I),this.endNodes[c+d].push(I),this.nodes.push(I)}viterbi(){const c=this.len;let d=0;for(;d<=c;){if(this.beginNodes[d].length==0)return[];for(let g of this.beginNodes[d]){g.prev=null;let w=0,S=null;for(let E of this.endNodes[d]){const v=E.backtraceScore+g.score;(S===null||v>w)&&(S=E.clone(),w=v)}if(S!==null)g.prev=S,g.backtraceScore=w;else return[]}++d}const _=[],T=this.beginNodes[c][0].prev;if(T===null)return[];let I=T.clone();for(;I.prev!==null;)_.push(I.clone()),I=I.clone().prev.clone();return _.reverse(),_}piece(c){return this.chars.slice(c.pos,c.pos+c.length).join("")}tokens(){return this.viterbi().map(d=>this.piece(d))}tokenIds(){return this.viterbi().map(d=>d.tokenId)}}class a{constructor(c,d,_,f,T){this.tokenId=c,this.nodeId=d,this.pos=_,this.length=f,this.score=T,this.prev=null,this.backtraceScore=0}clone(){const c=new a(this.tokenId,this.nodeId,this.pos,this.length,this.score);return c.prev=this.prev,c.backtraceScore=this.backtraceScore,c}}class l{constructor(c){this.trie=this._buildTrie(c)}_buildTrie(c){var _;const d=Object.create(null);for(const f of c){let T=d;for(let I=0;I<f.length;++I)T=T[_=f[I]]??(T[_]=Object.create(null));T.end=f}return d}split(c){const d=[],_=c.length;let f=0,T=0;for(;T<_;){let I=this.trie,g=null,w=T;for(;w<_&&(I=I[c[w]]);)I.end&&(g=I.end),++w;g?(T>f&&d.push(c.slice(f,T)),d.push(g),T+=g.length,f=T):++T}return f<_&&d.push(c.slice(f)),d}}class u{constructor(c){this.capacity=c,this.cache=new Map}get(c){if(!this.cache.has(c))return;const d=this.cache.get(c);return this.cache.delete(c),this.cache.set(c,d),d}put(c,d){this.cache.has(c)&&this.cache.delete(c),this.cache.set(c,d),this.cache.size>this.capacity&&this.cache.delete(this.cache.keys().next().value)}clear(){this.cache.clear()}}},"./src/utils/devices.js":(e,r,t)=>{t.r(r),t.d(r,{DEVICE_TYPES:()=>s});const s=Object.freeze({auto:"auto",gpu:"gpu",cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:"webnn","webnn-npu":"webnn-npu","webnn-gpu":"webnn-gpu","webnn-cpu":"webnn-cpu"})},"./src/utils/dtypes.js":(e,r,t)=>{t.r(r),t.d(r,{DATA_TYPES:()=>i,DEFAULT_DEVICE_DTYPE_MAPPING:()=>a,DEFAULT_DTYPE_SUFFIX_MAPPING:()=>l,isWebGpuFp16Supported:()=>n});var s=t("./src/env.js"),o=t("./src/utils/devices.js");const n=function(){let u;return async function(){if(u===void 0)if(!s.apis.IS_WEBGPU_AVAILABLE)u=!1;else try{u=(await navigator.gpu.requestAdapter()).features.has("shader-f16")}catch{u=!1}return u}}(),i=Object.freeze({auto:"auto",fp32:"fp32",fp16:"fp16",q8:"q8",int8:"int8",uint8:"uint8",q4:"q4",bnb4:"bnb4",q4f16:"q4f16"}),a=Object.freeze({[o.DEVICE_TYPES.wasm]:i.q8}),l=Object.freeze({[i.fp32]:"",[i.fp16]:"_fp16",[i.int8]:"_int8",[i.uint8]:"_uint8",[i.q8]:"_quantized",[i.q4]:"_q4",[i.q4f16]:"_q4f16",[i.bnb4]:"_bnb4"})},"./src/utils/generic.js":(e,r,t)=>{t.r(r),t.d(r,{Callable:()=>s});const s=class{constructor(){let o=function(...n){return o._call(...n)};return Object.setPrototypeOf(o,new.target.prototype)}_call(...o){throw Error("Must implement _call method in subclass")}}},"./src/utils/hub.js":(e,r,t)=>{t.r(r),t.d(r,{MAX_EXTERNAL_DATA_CHUNKS:()=>a,getFile:()=>_,getModelFile:()=>w,getModelJSON:()=>S});var s=t("?7a2c"),o=t("?a42a"),n=t("./src/env.js"),i=t("./src/utils/core.js");const a=100,l={txt:"text/plain",html:"text/html",css:"text/css",js:"text/javascript",json:"application/json",png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif"};class u{constructor(y){if(this.filePath=y,this.headers=new Headers,this.exists=s.existsSync(y),this.exists){this.status=200,this.statusText="OK";let C=s.statSync(y);this.headers.set("content-length",C.size.toString()),this.updateContentType();const F=s.createReadStream(y);this.body=new ReadableStream({start(z){F.on("data",K=>z.enqueue(K)),F.on("end",()=>z.close()),F.on("error",K=>z.error(K))},cancel(){F.destroy()}})}else this.status=404,this.statusText="Not Found",this.body=null}updateContentType(){const y=this.filePath.toString().split(".").pop().toLowerCase();this.headers.set("content-type",l[y]??"application/octet-stream")}clone(){let y=new u(this.filePath);return y.exists=this.exists,y.status=this.status,y.statusText=this.statusText,y.headers=new Headers(this.headers),y}async arrayBuffer(){return(await s.promises.readFile(this.filePath)).buffer}async blob(){const y=await s.promises.readFile(this.filePath);return new Blob([y],{type:this.headers.get("content-type")})}async text(){return await s.promises.readFile(this.filePath,"utf8")}async json(){return JSON.parse(await this.text())}}function p(M,y=null,C=null){let F;try{F=new URL(M)}catch{return!1}return!(y&&!y.includes(F.protocol)||C&&!C.includes(F.hostname))}const c=/^(\b[\w\-.]+\b\/)?\b[\w\-.]{1,96}\b$/;function d(M){return!(!c.test(M)||M.includes("..")||M.includes("--")||M.endsWith(".git")||M.endsWith(".ipynb"))}async function _(M){var y;if(n.env.useFS&&!p(M,["http:","https:","blob:"]))return new u(M instanceof URL?M.protocol==="file:"?M.pathname:M.toString():M);if(typeof process<"u"&&((y=process==null?void 0:process.release)==null?void 0:y.name)==="node"){const C=!!(zs!=null&&zs.TESTING_REMOTELY),F=n.env.version,z=new Headers;if(z.set("User-Agent",`transformers.js/${F}; is_ci/${C};`),p(M,["http:","https:"],["huggingface.co","hf.co"])){const q=(zs==null?void 0:zs.HF_TOKEN)??(zs==null?void 0:zs.HF_ACCESS_TOKEN);q&&z.set("Authorization",`Bearer ${q}`)}return fetch(M,{headers:z})}else return fetch(M)}const f={400:"Bad request error occurred while trying to load file",401:"Unauthorized access to file",403:"Forbidden access to file",404:"Could not locate file",408:"Request timeout error occurred while trying to load file",500:"Internal server error error occurred while trying to load file",502:"Bad gateway error occurred while trying to load file",503:"Service unavailable error occurred while trying to load file",504:"Gateway timeout error occurred while trying to load file"};function T(M,y,C){if(!C)return null;const F=f[M]??`Error (${M}) occurred while trying to load file`;throw Error(`${F}: "${y}".`)}class I{constructor(y){this.path=y}async match(y){let C=o.join(this.path,y),F=new u(C);if(F.exists)return F}async put(y,C,F=void 0){let z=o.join(this.path,y);try{const K=C.headers.get("Content-Length"),q=parseInt(K??"0");let R=0;await s.promises.mkdir(o.dirname(z),{recursive:!0});const Z=s.createWriteStream(z),H=C.body.getReader();for(;;){const{done:J,value:Q}=await H.read();if(J)break;await new Promise((fe,ae)=>{Z.write(Q,V=>{if(V){ae(V);return}fe()})}),R+=Q.length;const se=q?R/q*100:0;F==null||F({progress:se,loaded:R,total:q})}Z.close()}catch(K){try{await s.promises.unlink(z)}catch{}throw K}}}async function g(M,...y){for(let C of y)try{let F=await M.match(C);if(F)return F}catch{continue}}async function w(M,y,C=!0,F={},z=!1){if(!n.env.allowLocalModels){if(F.local_files_only)throw Error("Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).");if(!n.env.allowRemoteModels)throw Error("Invalid configuration detected: both local and remote models are disabled. Fix by setting `env.allowLocalModels` or `env.allowRemoteModels` to `true`.")}(0,i.dispatchCallback)(F.progress_callback,{status:"initiate",name:M,file:y});let K;if(!K&&n.env.useCustomCache){if(!n.env.customCache)throw Error("`env.useCustomCache=true`, but `env.customCache` is not defined.");if(!n.env.customCache.match||!n.env.customCache.put)throw new Error("`env.customCache` must be an object which implements the `match` and `put` functions of the Web Cache API. For more information, see https://developer.mozilla.org/en-US/docs/Web/API/Cache");K=n.env.customCache}if(!K&&n.env.useBrowserCache){if(typeof caches>"u")throw Error("Browser cache is not available in this environment.");try{K=await caches.open("transformers-cache")}catch(ee){console.warn("An error occurred while opening the browser cache:",ee)}}if(!K&&n.env.useFSCache){if(!n.apis.IS_FS_AVAILABLE)throw Error("File System Cache is not available in this environment.");K=new I(F.cache_dir??n.env.cacheDir)}const q=F.revision??"main",R=v(M,y),Z=d(M),H=Z?v(n.env.localModelPath,R):R,J=v(n.env.remoteHost,n.env.remotePathTemplate.replaceAll("{model}",M).replaceAll("{revision}",encodeURIComponent(q)),y);let Q;const se=K instanceof I?q==="main"?R:v(M,q,y):J;let fe=!1,ae;K&&(ae=await g(K,H,se));const V=ae!==void 0;if(ae===void 0){if(n.env.allowLocalModels)if(p(R,["http:","https:"])){if(F.local_files_only)throw new Error(`\`local_files_only=true\`, but attempted to load a remote file from: ${R}.`);if(!n.env.allowRemoteModels)throw new Error(`\`env.allowRemoteModels=false\`, but attempted to load a remote file from: ${R}.`)}else try{ae=await _(H),Q=H}catch(_e){console.warn(`Unable to load from local path "${H}": "${_e}"`)}if(ae===void 0||ae.status===404){if(F.local_files_only||!n.env.allowRemoteModels){if(C)throw Error(`\`local_files_only=true\` or \`env.allowRemoteModels=false\` and file was not found locally at "${H}".`);return null}if(!Z)throw Error(`Local file missing at "${H}" and download aborted due to invalid model ID "${M}".`);if(ae=await _(J),ae.status!==200)return T(ae.status,J,C);Q=se}fe=K&&typeof Response<"u"&&ae instanceof Response&&ae.status===200}(0,i.dispatchCallback)(F.progress_callback,{status:"download",name:M,file:y});let A;if(!(n.apis.IS_NODE_ENV&&z)){let ee;F.progress_callback?V&&typeof navigator<"u"&&/firefox/i.test(navigator.userAgent)?(ee=new Uint8Array(await ae.arrayBuffer()),(0,i.dispatchCallback)(F.progress_callback,{status:"progress",name:M,file:y,progress:100,loaded:ee.length,total:ee.length})):ee=await E(ae,_e=>{(0,i.dispatchCallback)(F.progress_callback,{status:"progress",name:M,file:y,..._e})}):ee=new Uint8Array(await ae.arrayBuffer()),A=ee}if(fe&&Q&&await K.match(Q)===void 0&&(A?await K.put(Q,new Response(A,{headers:ae.headers})).catch(ee=>{console.warn(`Unable to add response to browser cache: ${ee}.`)}):await K.put(Q,ae,F.progress_callback)),(0,i.dispatchCallback)(F.progress_callback,{status:"done",name:M,file:y}),A){if(!n.apis.IS_NODE_ENV&&z)throw new Error("Cannot return path in a browser environment.");return A}if(ae instanceof u)return ae.filePath;const U=await(K==null?void 0:K.match(Q));if(U instanceof u)return U.filePath;if(U instanceof Response)return new Uint8Array(await U.arrayBuffer());if(typeof U=="string")return U;throw new Error("Unable to get model file path or buffer.")}async function S(M,y,C=!0,F={}){const z=await w(M,y,C,F,!1);if(z===null)return{};const q=new TextDecoder("utf-8").decode(z);return JSON.parse(q)}async function E(M,y){const C=M.headers.get("Content-Length");C===null&&console.warn("Unable to determine content-length from response headers. Will expand buffer when needed.");let F=parseInt(C??"0"),z=new Uint8Array(F),K=0;const q=M.body.getReader();async function R(){const{done:Z,value:H}=await q.read();if(Z)return;const J=K+H.length;if(J>F){F=J;const se=new Uint8Array(F);se.set(z),z=se}z.set(H,K),K=J;const Q=K/F*100;return y({progress:Q,loaded:K,total:F}),R()}return await R(),z}function v(...M){return M=M.map((y,C)=>(C&&(y=y.replace(new RegExp("^/"),"")),C!==M.length-1&&(y=y.replace(new RegExp("/$"),"")),y)),M.join("/")}},"./src/utils/image.js":(e,r,t)=>{t.r(r),t.d(r,{RawImage:()=>f,load_image:()=>T});var s=t("./src/utils/core.js"),o=t("./src/utils/hub.js"),n=t("./src/env.js"),i=t("./src/utils/tensor.js"),a=t("?2b25");let l,u,p;const c=n.apis.IS_BROWSER_ENV||n.apis.IS_WEBWORKER_ENV;if(c)l=(I,g)=>{if(!self.OffscreenCanvas)throw new Error("OffscreenCanvas not supported by this browser.");return new self.OffscreenCanvas(I,g)},p=self.createImageBitmap,u=self.ImageData;else if(a)p=async I=>{const w=(await I.metadata()).channels,{data:S,info:E}=await I.rotate().raw().toBuffer({resolveWithObject:!0}),v=new f(new Uint8ClampedArray(S),E.width,E.height,E.channels);return w!==void 0&&w!==E.channels&&v.convert(w),v};else throw new Error("Unable to load image processing library.");const d={0:"nearest",1:"lanczos",2:"bilinear",3:"bicubic",4:"box",5:"hamming"},_=new Map([["png","image/png"],["jpg","image/jpeg"],["jpeg","image/jpeg"],["gif","image/gif"]]);class f{constructor(g,w,S,E){this.data=g,this.width=w,this.height=S,this.channels=E}get size(){return[this.width,this.height]}static async read(g){if(g instanceof f)return g;if(typeof g=="string"||g instanceof URL)return await this.fromURL(g);if(g instanceof Blob)return await this.fromBlob(g);if(typeof HTMLCanvasElement<"u"&&g instanceof HTMLCanvasElement||typeof OffscreenCanvas<"u"&&g instanceof OffscreenCanvas)return this.fromCanvas(g);throw new Error(`Unsupported input type: ${typeof g}`)}static fromCanvas(g){if(!c)throw new Error("fromCanvas() is only supported in browser environments.");const S=g.getContext("2d").getImageData(0,0,g.width,g.height).data;return new f(S,g.width,g.height,4)}static async fromURL(g){const w=await(0,o.getFile)(g);if(w.status!==200)throw new Error(`Unable to read image from "${g}" (${w.status} ${w.statusText})`);const S=await w.blob();return this.fromBlob(S)}static async fromBlob(g){if(c){const w=await p(g),S=l(w.width,w.height).getContext("2d");return S.drawImage(w,0,0),new this(S.getImageData(0,0,w.width,w.height).data,w.width,w.height,4)}else{const w=a(await g.arrayBuffer());return await p(w)}}static fromTensor(g,w="CHW"){if(g.dims.length!==3)throw new Error(`Tensor should have 3 dimensions, but has ${g.dims.length} dimensions.`);if(w==="CHW")g=g.transpose(1,2,0);else if(w!=="HWC")throw new Error(`Unsupported channel format: ${w}`);if(!(g.data instanceof Uint8ClampedArray||g.data instanceof Uint8Array))throw new Error(`Unsupported tensor type: ${g.type}`);switch(g.dims[2]){case 1:case 2:case 3:case 4:return new f(g.data,g.dims[1],g.dims[0],g.dims[2]);default:throw new Error(`Unsupported number of channels: ${g.dims[2]}`)}}grayscale(){if(this.channels===1)return this;const g=new Uint8ClampedArray(this.width*this.height*1);switch(this.channels){case 3:case 4:for(let w=0,S=0;w<this.data.length;w+=this.channels){const E=this.data[w],v=this.data[w+1],M=this.data[w+2];g[S++]=Math.round(.2989*E+.587*v+.114*M)}break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(g,this.width,this.height,1)}rgb(){if(this.channels===3)return this;const g=new Uint8ClampedArray(this.width*this.height*3);switch(this.channels){case 1:for(let w=0,S=0;w<this.data.length;++w)g[S++]=this.data[w],g[S++]=this.data[w],g[S++]=this.data[w];break;case 4:for(let w=0,S=0;w<this.data.length;w+=4)g[S++]=this.data[w],g[S++]=this.data[w+1],g[S++]=this.data[w+2];break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(g,this.width,this.height,3)}rgba(){if(this.channels===4)return this;const g=new Uint8ClampedArray(this.width*this.height*4);switch(this.channels){case 1:for(let w=0,S=0;w<this.data.length;++w)g[S++]=this.data[w],g[S++]=this.data[w],g[S++]=this.data[w],g[S++]=255;break;case 3:for(let w=0,S=0;w<this.data.length;w+=3)g[S++]=this.data[w],g[S++]=this.data[w+1],g[S++]=this.data[w+2],g[S++]=255;break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(g,this.width,this.height,4)}putAlpha(g){if(g.width!==this.width||g.height!==this.height)throw new Error(`Expected mask size to be ${this.width}x${this.height}, but got ${g.width}x${g.height}`);if(g.channels!==1)throw new Error(`Expected mask to have 1 channel, but got ${g.channels}`);const w=this.data,S=g.data,E=this.width*this.height;if(this.channels===3){const v=new Uint8ClampedArray(E*4);for(let M=0,y=0,C=0;M<E;++M)v[C++]=w[y++],v[C++]=w[y++],v[C++]=w[y++],v[C++]=S[M];return this._update(v,this.width,this.height,4)}else if(this.channels===4){for(let v=0;v<E;++v)w[4*v+3]=S[v];return this}throw new Error(`Expected image to have 3 or 4 channels, but got ${this.channels}`)}async resize(g,w,{resample:S=2}={}){if(this.width===g&&this.height===w)return this;let E=d[S]??S;const v=(0,s.isNullishDimension)(g),M=(0,s.isNullishDimension)(w);if(v&&M)return this;if(v?g=w/this.height*this.width:M&&(w=g/this.width*this.height),c){const y=this.channels,C=this.toCanvas(),F=l(g,w).getContext("2d");return F.drawImage(C,0,0,g,w),new f(F.getImageData(0,0,g,w).data,g,w,4).convert(y)}else{let y=this.toSharp();switch(E){case"box":case"hamming":(E==="box"||E==="hamming")&&(console.warn(`Resampling method ${E} is not yet supported. Using bilinear instead.`),E="bilinear");case"nearest":case"bilinear":case"bicubic":y=y.affine([g/this.width,0,0,w/this.height],{interpolator:E});break;case"lanczos":y=y.resize({width:g,height:w,fit:"fill",kernel:"lanczos3"});break;default:throw new Error(`Resampling method ${E} is not supported.`)}return await p(y)}}async pad([g,w,S,E]){if(g=Math.max(g,0),w=Math.max(w,0),S=Math.max(S,0),E=Math.max(E,0),g===0&&w===0&&S===0&&E===0)return this;if(c){const v=this.channels,M=this.toCanvas(),y=this.width+g+w,C=this.height+S+E,F=l(y,C).getContext("2d");return F.drawImage(M,0,0,this.width,this.height,g,S,this.width,this.height),new f(F.getImageData(0,0,y,C).data,y,C,4).convert(v)}else{const v=this.toSharp().extend({left:g,right:w,top:S,bottom:E});return await p(v)}}async crop([g,w,S,E]){if(g=Math.max(g,0),w=Math.max(w,0),S=Math.min(S,this.width-1),E=Math.min(E,this.height-1),g===0&&w===0&&S===this.width-1&&E===this.height-1)return this;const v=S-g+1,M=E-w+1;if(c){const y=this.channels,C=this.toCanvas(),F=l(v,M).getContext("2d");return F.drawImage(C,g,w,v,M,0,0,v,M),new f(F.getImageData(0,0,v,M).data,v,M,4).convert(y)}else{const y=this.toSharp().extract({left:g,top:w,width:v,height:M});return await p(y)}}async center_crop(g,w){if(this.width===g&&this.height===w)return this;const S=(this.width-g)/2,E=(this.height-w)/2;if(c){const v=this.channels,M=this.toCanvas(),y=l(g,w).getContext("2d");let C=0,F=0,z=0,K=0;return S>=0?C=S:z=-S,E>=0?F=E:K=-E,y.drawImage(M,C,F,g,w,z,K,g,w),new f(y.getImageData(0,0,g,w).data,g,w,4).convert(v)}else{let v=this.toSharp();if(S>=0&&E>=0)v=v.extract({left:Math.floor(S),top:Math.floor(E),width:g,height:w});else if(S<=0&&E<=0){const M=Math.floor(-E),y=Math.floor(-S);v=v.extend({top:M,left:y,right:g-this.width-y,bottom:w-this.height-M})}else{let M=[0,0],y=0;E<0?(M[0]=Math.floor(-E),M[1]=w-this.height-M[0]):y=Math.floor(E);let C=[0,0],F=0;S<0?(C[0]=Math.floor(-S),C[1]=g-this.width-C[0]):F=Math.floor(S),v=v.extend({top:M[0],bottom:M[1],left:C[0],right:C[1]}).extract({left:F,top:y,width:g,height:w})}return await p(v)}}async toBlob(g="image/png",w=1){if(!c)throw new Error("toBlob() is only supported in browser environments.");return await this.toCanvas().convertToBlob({type:g,quality:w})}toTensor(g="CHW"){let w=new i.Tensor("uint8",new Uint8Array(this.data),[this.height,this.width,this.channels]);if(g!=="HWC")if(g==="CHW")w=w.permute(2,0,1);else throw new Error(`Unsupported channel format: ${g}`);return w}toCanvas(){if(!c)throw new Error("toCanvas() is only supported in browser environments.");const g=this.clone().rgba(),w=l(g.width,g.height),S=new u(g.data,g.width,g.height);return w.getContext("2d").putImageData(S,0,0),w}split(){const{data:g,width:w,height:S,channels:E}=this,v=g.constructor,M=g.length/E,y=Array.from({length:E},()=>new v(M));for(let C=0;C<M;++C){const F=E*C;for(let z=0;z<E;++z)y[z][C]=g[F+z]}return y.map(C=>new f(C,w,S,1))}_update(g,w,S,E=null){return this.data=g,this.width=w,this.height=S,E!==null&&(this.channels=E),this}clone(){return new f(this.data.slice(),this.width,this.height,this.channels)}convert(g){if(this.channels===g)return this;switch(g){case 1:this.grayscale();break;case 3:this.rgb();break;case 4:this.rgba();break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this}async save(g){if(c){if(n.apis.IS_WEBWORKER_ENV)throw new Error("Unable to save an image from a Web Worker.");const w=g.split(".").pop().toLowerCase(),S=_.get(w)??"image/png",E=await this.toBlob(S);(0,s.saveBlob)(g,E)}else{if(n.apis.IS_FS_AVAILABLE)return await this.toSharp().toFile(g);throw new Error("Unable to save the image because filesystem is disabled in this environment.")}}toSharp(){if(c)throw new Error("toSharp() is only supported in server-side environments.");return a(this.data,{raw:{width:this.width,height:this.height,channels:this.channels}})}}const T=f.read.bind(f)},"./src/utils/maths.js":(e,r,t)=>{t.r(r),t.d(r,{FFT:()=>T,bankers_round:()=>w,cos_sim:()=>l,dot:()=>a,dynamic_time_warping:()=>S,interpolate_data:()=>s,log_softmax:()=>i,magnitude:()=>u,max:()=>c,medianFilter:()=>I,min:()=>p,permute_data:()=>o,round:()=>g,softmax:()=>n});function s(E,[v,M,y],[C,F],z="bilinear",K=!1){const q=F/y,R=C/M,Z=new E.constructor(C*F*v),H=M*y,J=C*F;for(let Q=0;Q<C;++Q)for(let se=0;se<F;++se){const fe=Q*F+se,ae=(se+.5)/q-.5,V=(Q+.5)/R-.5;let A=Math.floor(ae),U=Math.floor(V);const ee=Math.min(A+1,y-1),_e=Math.min(U+1,M-1);A=Math.max(A,0),U=Math.max(U,0);const le=ae-A,ye=V-U,ze=(1-le)*(1-ye),Ue=le*(1-ye),pe=(1-le)*ye,W=le*ye,re=U*y,G=_e*y,Me=re+A,we=re+ee,Se=G+A,Pe=G+ee;for(let $e=0;$e<v;++$e){const Fe=$e*H;Z[$e*J+fe]=ze*E[Fe+Me]+Ue*E[Fe+we]+pe*E[Fe+Se]+W*E[Fe+Pe]}}return Z}function o(E,v,M){const y=new Array(M.length),C=new Array(M.length);for(let K=M.length-1,q=1;K>=0;--K)C[K]=q,y[K]=v[M[K]],q*=y[K];const F=M.map((K,q)=>C[M.indexOf(q)]),z=new E.constructor(E.length);for(let K=0;K<E.length;++K){let q=0;for(let R=v.length-1,Z=K;R>=0;--R)q+=Z%v[R]*F[R],Z=Math.floor(Z/v[R]);z[q]=E[K]}return[z,y]}function n(E){const v=c(E)[0],M=E.map(F=>Math.exp(F-v)),y=M.reduce((F,z)=>F+z,0);return M.map(F=>F/y)}function i(E){const v=c(E)[0];let M=0;for(let F=0;F<E.length;++F)M+=Math.exp(E[F]-v);const y=Math.log(M);return E.map(F=>F-v-y)}function a(E,v){let M=0;for(let y=0;y<E.length;++y)M+=E[y]*v[y];return M}function l(E,v){const M=a(E,v),y=u(E),C=u(v);return M/(y*C)}function u(E){return Math.sqrt(E.reduce((v,M)=>v+M*M,0))}function p(E){if(E.length===0)throw Error("Array must not be empty");let v=E[0],M=0;for(let y=1;y<E.length;++y)E[y]<v&&(v=E[y],M=y);return[v,M]}function c(E){if(E.length===0)throw Error("Array must not be empty");let v=E[0],M=0;for(let y=1;y<E.length;++y)E[y]>v&&(v=E[y],M=y);return[v,M]}function d(E){return E>0&&(E&E-1)===0}class _{constructor(v){if(this.size=v|0,this.size<=1||!d(this.size))throw new Error("FFT size must be a power of two larger than 1");this._csize=v<<1,this.table=new Float64Array(this.size*2);for(let y=0;y<this.table.length;y+=2){const C=Math.PI*y/this.size;this.table[y]=Math.cos(C),this.table[y+1]=-Math.sin(C)}let M=0;for(let y=1;this.size>y;y<<=1)++M;this._width=M%2===0?M-1:M,this._bitrev=new Int32Array(1<<this._width);for(let y=0;y<this._bitrev.length;++y){this._bitrev[y]=0;for(let C=0;C<this._width;C+=2){const F=this._width-C-2;this._bitrev[y]|=(y>>>C&3)<<F}}}createComplexArray(){return new Float64Array(this._csize)}fromComplexArray(v,M){const y=M||new Array(v.length>>>1);for(let C=0;C<v.length;C+=2)y[C>>>1]=v[C];return y}toComplexArray(v,M){const y=M||this.createComplexArray();for(let C=0;C<y.length;C+=2)y[C]=v[C>>>1],y[C+1]=0;return y}transform(v,M){if(v===M)throw new Error("Input and output buffers must be different");this._transform4(v,M,1)}realTransform(v,M){if(v===M)throw new Error("Input and output buffers must be different");this._realTransform4(v,M,1)}inverseTransform(v,M){if(v===M)throw new Error("Input and output buffers must be different");this._transform4(v,M,-1);for(let y=0;y<v.length;++y)v[y]/=this.size}_transform4(v,M,y){const C=this._csize;let z=1<<this._width,K=C/z<<1,q,R;const Z=this._bitrev;if(K===4)for(q=0,R=0;q<C;q+=K,++R){const J=Z[R];this._singleTransform2(M,v,q,J,z)}else for(q=0,R=0;q<C;q+=K,++R){const J=Z[R];this._singleTransform4(M,v,q,J,z,y)}const H=this.table;for(z>>=2;z>=2;z>>=2){K=C/z<<1;const J=K>>>2;for(q=0;q<C;q+=K){const Q=q+J-1;for(let se=q,fe=0;se<Q;se+=2,fe+=z){const ae=se,V=ae+J,A=V+J,U=A+J,ee=v[ae],_e=v[ae+1],le=v[V],ye=v[V+1],ze=v[A],Ue=v[A+1],pe=v[U],W=v[U+1],re=H[fe],G=y*H[fe+1],Me=le*re-ye*G,we=le*G+ye*re,Se=H[2*fe],Pe=y*H[2*fe+1],$e=ze*Se-Ue*Pe,Fe=ze*Pe+Ue*Se,Be=H[3*fe],He=y*H[3*fe+1],qe=pe*Be-W*He,Ie=pe*He+W*Be,Ve=ee+$e,Ze=_e+Fe,st=ee-$e,at=_e-Fe,Ge=Me+qe,ke=we+Ie,pt=y*(Me-qe),St=y*(we-Ie);v[ae]=Ve+Ge,v[ae+1]=Ze+ke,v[V]=st+St,v[V+1]=at-pt,v[A]=Ve-Ge,v[A+1]=Ze-ke,v[U]=st-St,v[U+1]=at+pt}}}}_singleTransform2(v,M,y,C,F){const z=v[C],K=v[C+1],q=v[C+F],R=v[C+F+1];M[y]=z+q,M[y+1]=K+R,M[y+2]=z-q,M[y+3]=K-R}_singleTransform4(v,M,y,C,F,z){const K=F*2,q=F*3,R=v[C],Z=v[C+1],H=v[C+F],J=v[C+F+1],Q=v[C+K],se=v[C+K+1],fe=v[C+q],ae=v[C+q+1],V=R+Q,A=Z+se,U=R-Q,ee=Z-se,_e=H+fe,le=J+ae,ye=z*(H-fe),ze=z*(J-ae);M[y]=V+_e,M[y+1]=A+le,M[y+2]=U+ze,M[y+3]=ee-ye,M[y+4]=V-_e,M[y+5]=A-le,M[y+6]=U-ze,M[y+7]=ee+ye}_realTransform4(v,M,y){const C=this._csize;let z=1<<this._width,K=C/z<<1,q,R;const Z=this._bitrev;if(K===4)for(q=0,R=0;q<C;q+=K,++R){const Q=Z[R];this._singleRealTransform2(M,v,q,Q>>>1,z>>>1)}else for(q=0,R=0;q<C;q+=K,++R){const Q=Z[R];this._singleRealTransform4(M,v,q,Q>>>1,z>>>1,y)}const H=this.table;for(z>>=2;z>=2;z>>=2){K=C/z<<1;const Q=K>>>1,se=Q>>>1,fe=se>>>1;for(q=0;q<C;q+=K)for(let ae=0,V=0;ae<=fe;ae+=2,V+=z){const A=q+ae,U=A+se,ee=U+se,_e=ee+se,le=v[A],ye=v[A+1],ze=v[U],Ue=v[U+1],pe=v[ee],W=v[ee+1],re=v[_e],G=v[_e+1],Me=le,we=ye,Se=H[V],Pe=y*H[V+1],$e=ze*Se-Ue*Pe,Fe=ze*Pe+Ue*Se,Be=H[2*V],He=y*H[2*V+1],qe=pe*Be-W*He,Ie=pe*He+W*Be,Ve=H[3*V],Ze=y*H[3*V+1],st=re*Ve-G*Ze,at=re*Ze+G*Ve,Ge=Me+qe,ke=we+Ie,pt=Me-qe,St=we-Ie,Vt=$e+st,zt=Fe+at,gr=y*($e-st),or=y*(Fe-at);if(v[A]=Ge+Vt,v[A+1]=ke+zt,v[U]=pt+or,v[U+1]=St-gr,ae===0){v[ee]=Ge-Vt,v[ee+1]=ke-zt;continue}if(ae===fe)continue;const Mt=q+se-ae,Yr=q+Q-ae;v[Mt]=pt-y*or,v[Mt+1]=-St-y*gr,v[Yr]=Ge-y*Vt,v[Yr+1]=-ke+y*zt}}const J=C>>>1;for(let Q=2;Q<J;Q+=2)v[C-Q]=v[Q],v[C-Q+1]=-v[Q+1]}_singleRealTransform2(v,M,y,C,F){const z=v[C],K=v[C+F];M[y]=z+K,M[y+1]=0,M[y+2]=z-K,M[y+3]=0}_singleRealTransform4(v,M,y,C,F,z){const K=F*2,q=F*3,R=v[C],Z=v[C+F],H=v[C+K],J=v[C+q],Q=R+H,se=R-H,fe=Z+J,ae=z*(Z-J);M[y]=Q+fe,M[y+1]=0,M[y+2]=se,M[y+3]=-ae,M[y+4]=Q-fe,M[y+5]=0,M[y+6]=se,M[y+7]=ae}}class f{constructor(v){const M=2*(v-1),y=2*(2*v-1),C=2**Math.ceil(Math.log2(y));this.bufferSize=C,this._a=M;const F=new Float64Array(y),z=new Float64Array(C);this._chirpBuffer=new Float64Array(C),this._buffer1=new Float64Array(C),this._buffer2=new Float64Array(C),this._outBuffer1=new Float64Array(C),this._outBuffer2=new Float64Array(C);const K=-2*Math.PI/v,q=Math.cos(K),R=Math.sin(K);for(let Z=0;Z<y>>1;++Z){const H=(Z+1-v)**2/2,J=Math.sqrt(q**2+R**2)**H,Q=H*Math.atan2(R,q),se=2*Z;F[se]=J*Math.cos(Q),F[se+1]=J*Math.sin(Q),z[se]=F[se],z[se+1]=-F[se+1]}this._slicedChirpBuffer=F.subarray(M,y),this._f=new _(C>>1),this._f.transform(this._chirpBuffer,z)}_transform(v,M,y){const C=this._buffer1,F=this._buffer2,z=this._outBuffer1,K=this._outBuffer2,q=this._chirpBuffer,R=this._slicedChirpBuffer,Z=this._a;if(y)for(let H=0;H<R.length;H+=2){const J=H+1,Q=H>>1,se=M[Q];C[H]=se*R[H],C[J]=se*R[J]}else for(let H=0;H<R.length;H+=2){const J=H+1;C[H]=M[H]*R[H]-M[J]*R[J],C[J]=M[H]*R[J]+M[J]*R[H]}this._f.transform(z,C);for(let H=0;H<q.length;H+=2){const J=H+1;F[H]=z[H]*q[H]-z[J]*q[J],F[J]=z[H]*q[J]+z[J]*q[H]}this._f.inverseTransform(K,F);for(let H=0;H<K.length;H+=2){const J=K[H+Z],Q=K[H+Z+1],se=R[H],fe=R[H+1];v[H]=J*se-Q*fe,v[H+1]=J*fe+Q*se}}transform(v,M){this._transform(v,M,!1)}realTransform(v,M){this._transform(v,M,!0)}}class T{constructor(v){this.fft_length=v,this.isPowerOfTwo=d(v),this.isPowerOfTwo?(this.fft=new _(v),this.outputBufferSize=2*v):(this.fft=new f(v),this.outputBufferSize=this.fft.bufferSize)}realTransform(v,M){this.fft.realTransform(v,M)}transform(v,M){this.fft.transform(v,M)}}function I(E,v){if(v%2===0||v<=0)throw new Error("Window size must be a positive odd number");const M=new E.constructor(E.length),y=new E.constructor(v),C=Math.floor(v/2);for(let F=0;F<E.length;++F){let z=0;for(let K=-C;K<=C;++K){let q=F+K;q<0?q=Math.abs(q):q>=E.length&&(q=2*(E.length-1)-q),y[z++]=E[q]}y.sort(),M[F]=y[C]}return M}function g(E,v){const M=Math.pow(10,v);return Math.round(E*M)/M}function w(E){const v=Math.round(E);return Math.abs(E)%1===.5?v%2===0?v:v-1:v}function S(E){const v=E.length,M=E[0].length,y=[v+1,M+1],C=Array.from({length:y[0]},()=>Array(y[1]).fill(1/0));C[0][0]=0;const F=Array.from({length:y[0]},()=>Array(y[1]).fill(-1));for(let Z=1;Z<y[1];++Z)for(let H=1;H<y[0];++H){const J=C[H-1][Z-1],Q=C[H-1][Z],se=C[H][Z-1];let fe,ae;J<Q&&J<se?(fe=J,ae=0):Q<J&&Q<se?(fe=Q,ae=1):(fe=se,ae=2),C[H][Z]=E[H-1][Z-1]+fe,F[H][Z]=ae}for(let Z=0;Z<y[1];++Z)F[0][Z]=2;for(let Z=0;Z<y[0];++Z)F[Z][0]=1;let z=v,K=M,q=[],R=[];for(;z>0||K>0;)switch(q.push(z-1),R.push(K-1),F[z][K]){case 0:--z,--K;break;case 1:--z;break;case 2:--K;break;default:throw new Error(`Internal error in dynamic time warping. Unexpected trace[${z}, ${K}]. Please file a bug report.`)}return q.reverse(),R.reverse(),[q,R]}},"./src/utils/tensor.js":(e,r,t)=>{t.r(r),t.d(r,{DataTypeMap:()=>i,Tensor:()=>a,cat:()=>M,full:()=>R,full_like:()=>Z,interpolate:()=>p,interpolate_4d:()=>c,layer_norm:()=>w,matmul:()=>d,mean:()=>z,mean_pooling:()=>g,ones:()=>H,ones_like:()=>J,permute:()=>u,quantize_embeddings:()=>ae,rand:()=>fe,rfft:()=>_,slice:()=>I,stack:()=>y,std_mean:()=>F,topk:()=>f,zeros:()=>Q,zeros_like:()=>se});var s=t("./src/utils/maths.js"),o=t("./src/backends/onnx.js"),n=t("./src/ops/registry.js");const i=Object.freeze({float32:Float32Array,float16:typeof Float16Array<"u"?Float16Array:Uint16Array,float64:Float64Array,string:Array,int8:Int8Array,uint8:Uint8Array,int16:Int16Array,uint16:Uint16Array,int32:Int32Array,uint32:Uint32Array,int64:BigInt64Array,uint64:BigUint64Array,bool:Uint8Array,uint4:Uint8Array,int4:Int8Array});class a{constructor(...A){Y(this,"ort_tensor");return(0,o.isONNXTensor)(A[0])?this.ort_tensor=A[0]:this.ort_tensor=new o.Tensor(A[0],A[1],A[2]),new Proxy(this,{get:(U,ee)=>{if(typeof ee=="string"){let _e=Number(ee);if(Number.isInteger(_e))return U._getitem(_e)}return U[ee]},set:(U,ee,_e)=>U[ee]=_e})}get dims(){return this.ort_tensor.dims}set dims(A){this.ort_tensor.dims=A}get type(){return this.ort_tensor.type}get data(){return this.ort_tensor.data}get size(){return this.ort_tensor.size}get location(){return this.ort_tensor.location}dispose(){this.ort_tensor.dispose()}*[Symbol.iterator](){const[A,...U]=this.dims;if(U.length>0){const ee=U.reduce((_e,le)=>_e*le);for(let _e=0;_e<A;++_e)yield this._subarray(_e,ee,U)}else yield*this.data}_getitem(A){const[U,...ee]=this.dims;if(A=v(A,U),ee.length>0){const _e=ee.reduce((le,ye)=>le*ye);return this._subarray(A,_e,ee)}else return new a(this.type,[this.data[A]],ee)}indexOf(A){const U=this.data;for(let ee=0;ee<U.length;++ee)if(U[ee]==A)return ee;return-1}_subarray(A,U,ee){const _e=A*U,le=(A+1)*U,ye="subarray"in this.data?this.data.subarray(_e,le):this.data.slice(_e,le);return new a(this.type,ye,ee)}item(){const A=this.data;if(A.length!==1)throw new Error(`a Tensor with ${A.length} elements cannot be converted to Scalar`);return A[0]}tolist(){return l(this.data,this.dims)}sigmoid(){return this.clone().sigmoid_()}sigmoid_(){const A=this.data;for(let U=0;U<A.length;++U)A[U]=1/(1+Math.exp(-A[U]));return this}map(A){return this.clone().map_(A)}map_(A){const U=this.data;for(let ee=0;ee<U.length;++ee)U[ee]=A(U[ee],ee,U);return this}mul(A){return this.clone().mul_(A)}mul_(A){const U=this.data;for(let ee=0;ee<U.length;++ee)U[ee]*=A;return this}div(A){return this.clone().div_(A)}div_(A){const U=this.data;for(let ee=0;ee<U.length;++ee)U[ee]/=A;return this}add(A){return this.clone().add_(A)}add_(A){const U=this.data;for(let ee=0;ee<U.length;++ee)U[ee]+=A;return this}sub(A){return this.clone().sub_(A)}sub_(A){const U=this.data;for(let ee=0;ee<U.length;++ee)U[ee]-=A;return this}clone(){return new a(this.type,this.data.slice(),this.dims.slice())}slice(...A){const U=[],ee=[];for(let pe=0;pe<this.dims.length;++pe){let W=A[pe];if(W==null)ee.push([0,this.dims[pe]]),U.push(this.dims[pe]);else if(typeof W=="number")W=v(W,this.dims[pe],pe),ee.push([W,W+1]);else if(Array.isArray(W)&&W.length===2){let[re,G]=W;if(re=re===null?0:v(re,this.dims[pe],pe,!1),G=G===null?this.dims[pe]:v(G,this.dims[pe],pe,!1),re>G)throw new Error(`Invalid slice: ${W}`);const Me=[Math.max(re,0),Math.min(G,this.dims[pe])];ee.push(Me),U.push(Me[1]-Me[0])}else throw new Error(`Invalid slice: ${W}`)}const _e=ee.map(([pe,W])=>W-pe),le=_e.reduce((pe,W)=>pe*W),ye=this.data,ze=new ye.constructor(le),Ue=this.stride();for(let pe=0;pe<le;++pe){let W=0;for(let re=_e.length-1,G=pe;re>=0;--re){const Me=_e[re];W+=(G%Me+ee[re][0])*Ue[re],G=Math.floor(G/Me)}ze[pe]=ye[W]}return new a(this.type,ze,U)}permute(...A){return u(this,A)}transpose(...A){return this.permute(...A)}sum(A=null,U=!1){return this.norm(1,A,U)}norm(A="fro",U=null,ee=!1){if(A==="fro")A=2;else if(typeof A=="string")throw Error(`Unsupported norm: ${A}`);const _e=this.data,le=(pe,W)=>pe+W**A;if(U===null){const pe=_e.reduce(le,0)**(1/A);return new a(this.type,[pe],[])}const[ye,ze,Ue]=C(le,this,U,ee);if(A!==1)for(let pe=0;pe<ze.length;++pe)ze[pe]=ze[pe]**(1/A);return new a(ye,ze,Ue)}normalize_(A=2,U=1){U=v(U,this.dims.length);const ee=this.norm(A,U,!0),_e=this.data,le=ee.data;for(let ye=0;ye<_e.length;++ye){let ze=0;for(let Ue=this.dims.length-1,pe=ye,W=1;Ue>=0;--Ue){const re=this.dims[Ue];if(Ue!==U){const G=pe%re;ze+=G*W,W*=this.dims[Ue]}pe=Math.floor(pe/re)}_e[ye]/=le[ze]}return this}normalize(A=2,U=1){return this.clone().normalize_(A,U)}stride(){return K(this.dims)}squeeze(A=null){return new a(this.type,this.data,S(this.dims,A))}squeeze_(A=null){return this.dims=S(this.dims,A),this}unsqueeze(A=null){return new a(this.type,this.data,E(this.dims,A))}unsqueeze_(A=null){return this.dims=E(this.dims,A),this}flatten_(A=0,U=-1){U=(U+this.dims.length)%this.dims.length;let ee=this.dims.slice(0,A),_e=this.dims.slice(A,U+1),le=this.dims.slice(U+1);return this.dims=[...ee,_e.reduce((ye,ze)=>ye*ze,1),...le],this}flatten(A=0,U=-1){return this.clone().flatten_(A,U)}view(...A){let U=-1;for(let _e=0;_e<A.length;++_e)if(A[_e]===-1){if(U!==-1)throw new Error("Only one dimension can be inferred");U=_e}const ee=this.data;if(U!==-1){const _e=A.reduce((le,ye,ze)=>ze!==U?le*ye:le,1);A[U]=ee.length/_e}return new a(this.type,ee,A)}neg_(){const A=this.data;for(let U=0;U<A.length;++U)A[U]=-A[U];return this}neg(){return this.clone().neg_()}gt(A){const U=new Uint8Array(this.data.length),ee=this.data;for(let _e=0;_e<ee.length;++_e)U[_e]=ee[_e]>A?1:0;return new a("bool",U,this.dims)}lt(A){const U=new Uint8Array(this.data.length),ee=this.data;for(let _e=0;_e<ee.length;++_e)U[_e]=ee[_e]<A?1:0;return new a("bool",U,this.dims)}clamp_(A,U){const ee=this.data;for(let _e=0;_e<ee.length;++_e)ee[_e]=Math.min(Math.max(ee[_e],A),U);return this}clamp(A,U){return this.clone().clamp_(A,U)}round_(){const A=this.data;for(let U=0;U<A.length;++U)A[U]=Math.round(A[U]);return this}round(){return this.clone().round_()}mean(A=null,U=!1){return z(this,A,U)}min(A=null,U=!1){if(A===null){const ye=(0,s.min)(this.data)[0];return new a(this.type,[ye],[])}const[ee,_e,le]=C((ye,ze)=>Math.min(ye,ze),this,A,U,1/0);return new a(ee,_e,le)}max(A=null,U=!1){if(A===null){const ye=(0,s.max)(this.data)[0];return new a(this.type,[ye],[])}const[ee,_e,le]=C((ye,ze)=>Math.max(ye,ze),this,A,U,-1/0);return new a(ee,_e,le)}argmin(A=null,U=!1){if(A!==null)throw new Error("`dim !== null` not yet implemented.");const ee=(0,s.min)(this.data)[1];return new a("int64",[BigInt(ee)],[])}argmax(A=null,U=!1){if(A!==null)throw new Error("`dim !== null` not yet implemented.");const ee=(0,s.max)(this.data)[1];return new a("int64",[BigInt(ee)],[])}to(A){if(this.type===A)return this;if(!i.hasOwnProperty(A))throw new Error(`Unsupported type: ${A}`);let U;const ee=["int64","uint64"].includes(this.type),_e=["int64","uint64"].includes(A);return ee&&!_e?U=Number:!ee&&_e&&(U=BigInt),new a(A,i[A].from(this.data,U),this.dims)}}function l(V,A){const U=V.length,ee=A.reduce((le,ye)=>le*ye);if(U!==ee)throw Error(`cannot reshape array of size ${U} into shape (${A})`);let _e=V;for(let le=A.length-1;le>=0;le--)_e=_e.reduce((ye,ze)=>{let Ue=ye[ye.length-1];return Ue.length<A[le]?Ue.push(ze):ye.push([ze]),ye},[[]]);return _e[0]}function u(V,A){const[U,ee]=(0,s.permute_data)(V.data,V.dims,A);return new a(V.type,U,ee)}function p(V,[A,U],ee="bilinear",_e=!1){const le=V.dims.at(-3)??1,ye=V.dims.at(-2),ze=V.dims.at(-1);let Ue=(0,s.interpolate_data)(V.data,[le,ye,ze],[A,U],ee,_e);return new a(V.type,Ue,[le,A,U])}async function c(V,{size:A=null,mode:U="bilinear"}={}){if(V.dims.length!==4)throw new Error("`interpolate_4d` currently only supports 4D input.");if(!A)throw new Error("`interpolate_4d` requires a `size` argument.");let ee;if(A.length===2)ee=[...V.dims.slice(0,2),...A];else if(A.length===3)ee=[V.dims[0],...A];else if(A.length===4)ee=A;else throw new Error("`size` must be of length 2, 3, or 4.");let _e;if(U==="nearest")_e=await n.TensorOpRegistry.nearest_interpolate_4d;else if(U==="bilinear")_e=await n.TensorOpRegistry.bilinear_interpolate_4d;else if(U==="bicubic")_e=await n.TensorOpRegistry.bicubic_interpolate_4d;else throw new Error(`Unsupported mode: ${U}`);const le=new a("int64",new BigInt64Array(ee.map(BigInt)),[ee.length]);return await _e({x:V,s:le})}async function d(V,A){return await(await n.TensorOpRegistry.matmul)({a:V,b:A})}async function _(V,A){return await(await n.TensorOpRegistry.rfft)({x:V,a:A})}async function f(V,A){const U=await n.TensorOpRegistry.top_k;return A==null?A=V.dims.at(-1):A=Math.min(A,V.dims.at(-1)),await U({x:V,k:new a("int64",[BigInt(A)],[1])})}const T=V=>new a("int64",V,[V.length]);async function I(V,A,U,ee,_e){return await(await n.TensorOpRegistry.slice)({x:V,s:T(A),e:T(U),a:T(ee),t:T(_e??new Array(ee.length).fill(1))})}function g(V,A){const U=V.data,ee=A.data,_e=[V.dims[0],V.dims[2]],le=new U.constructor(_e[0]*_e[1]),[ye,ze,Ue]=V.dims;let pe=0;for(let W=0;W<ye;++W){const re=W*Ue*ze;for(let G=0;G<Ue;++G){let Me=0,we=0;const Se=W*ze,Pe=re+G;for(let Fe=0;Fe<ze;++Fe){const Be=Number(ee[Se+Fe]);we+=Be,Me+=U[Pe+Fe*Ue]*Be}const $e=Me/we;le[pe++]=$e}}return new a(V.type,le,_e)}function w(V,A,{eps:U=1e-5}={}){if(V.dims.length!==2)throw new Error("`layer_norm` currently only supports 2D input.");const[ee,_e]=V.dims;if(A.length!==1&&A[0]!==_e)throw new Error("`normalized_shape` must be a 1D array with shape `[input.dims[1]]`.");const[le,ye]=F(V,1,0,!0),ze=le.data,Ue=ye.data,pe=V.data,W=new pe.constructor(pe.length);for(let re=0;re<ee;++re){const G=re*_e;for(let Me=0;Me<_e;++Me){const we=G+Me;W[we]=(pe[we]-Ue[re])/(ze[re]+U)}}return new a(V.type,W,V.dims)}function S(V,A){return V=V.slice(),A===null?V=V.filter(U=>U!==1):typeof A=="number"?V[A]===1&&V.splice(A,1):Array.isArray(A)&&(V=V.filter((U,ee)=>U!==1||!A.includes(ee))),V}function E(V,A){return A=v(A,V.length+1),V=V.slice(),V.splice(A,0,1),V}function v(V,A,U=null,ee=!0){if(V<-A||V>=A){if(ee)throw new Error(`IndexError: index ${V} is out of bounds for dimension${U===null?"":" "+U} with size ${A}`);return V<-A?0:A}return V<0&&(V=(V%A+A)%A),V}function M(V,A=0){A=v(A,V[0].dims.length);const U=V[0].dims.slice();U[A]=V.reduce((ye,ze)=>ye+ze.dims[A],0);const ee=U.reduce((ye,ze)=>ye*ze,1),_e=new V[0].data.constructor(ee),le=V[0].type;if(A===0){let ye=0;for(const ze of V){const Ue=ze.data;_e.set(Ue,ye),ye+=Ue.length}}else{let ye=0;for(let ze=0;ze<V.length;++ze){const{data:Ue,dims:pe}=V[ze];for(let W=0;W<Ue.length;++W){let re=0;for(let G=pe.length-1,Me=W,we=1;G>=0;--G){const Se=pe[G];let Pe=Me%Se;G===A&&(Pe+=ye),re+=Pe*we,we*=U[G],Me=Math.floor(Me/Se)}_e[re]=Ue[W]}ye+=pe[A]}}return new a(le,_e,U)}function y(V,A=0){return M(V.map(U=>U.unsqueeze(A)),A)}function C(V,A,U=null,ee=!1,_e=null){const le=A.data,ye=A.dims;U=v(U,ye.length);const ze=ye.slice();ze[U]=1;const Ue=new le.constructor(le.length/ye[U]);_e!==null&&Ue.fill(_e);for(let pe=0;pe<le.length;++pe){let W=0;for(let re=ye.length-1,G=pe,Me=1;re>=0;--re){const we=ye[re];if(re!==U){const Se=G%we;W+=Se*Me,Me*=ze[re]}G=Math.floor(G/we)}Ue[W]=V(Ue[W],le[pe],pe,W)}return ee||ze.splice(U,1),[A.type,Ue,ze]}function F(V,A=null,U=1,ee=!1){const _e=V.data,le=V.dims;if(A===null){const Me=_e.reduce(($e,Fe)=>$e+Fe,0)/_e.length,we=Math.sqrt(_e.reduce(($e,Fe)=>$e+(Fe-Me)**2,0)/(_e.length-U)),Se=new a(V.type,[Me],[]);return[new a(V.type,[we],[]),Se]}A=v(A,le.length);const ye=z(V,A,ee),ze=ye.data,[Ue,pe,W]=C((G,Me,we,Se)=>G+(Me-ze[Se])**2,V,A,ee);for(let G=0;G<pe.length;++G)pe[G]=Math.sqrt(pe[G]/(le[A]-U));return[new a(Ue,pe,W),ye]}function z(V,A=null,U=!1){const ee=V.dims,_e=V.data;if(A===null){const Ue=_e.reduce((pe,W)=>pe+W,0);return new a(V.type,[Ue/_e.length],[])}A=v(A,ee.length);const[le,ye,ze]=C((Ue,pe)=>Ue+pe,V,A,U);if(ee[A]!==1)for(let Ue=0;Ue<ye.length;++Ue)ye[Ue]/=ee[A];return new a(le,ye,ze)}function K(V){const A=new Array(V.length);for(let U=V.length-1,ee=1;U>=0;--U)A[U]=ee,ee*=V[U];return A}function q(V,A,U,ee){const _e=V.reduce((le,ye)=>le*ye,1);return new a(U,new ee(_e).fill(A),V)}function R(V,A){let U,ee;if(typeof A=="number")U="float32",ee=Float32Array;else if(typeof A=="bigint")U="int64",ee=BigInt64Array;else if(typeof A=="boolean")U="bool",ee=Uint8Array;else throw new Error(`Unsupported data type: ${typeof A}`);return q(V,A,U,ee)}function Z(V,A){return R(V.dims,A)}function H(V){return q(V,1n,"int64",BigInt64Array)}function J(V){return H(V.dims)}function Q(V){return q(V,0n,"int64",BigInt64Array)}function se(V){return Q(V.dims)}function fe(V){const A=V.reduce((U,ee)=>U*ee,1);return new a("float32",Float32Array.from({length:A},()=>Math.random()),V)}function ae(V,A){if(V.dims.length!==2)throw new Error("The tensor must have 2 dimensions");if(V.dims.at(-1)%8!==0)throw new Error("The last dimension of the tensor must be a multiple of 8");if(!["binary","ubinary"].includes(A))throw new Error("The precision must be either 'binary' or 'ubinary'");const U=A==="binary",ee=U?"int8":"uint8",_e=U?Int8Array:Uint8Array,le=V.data,ye=new _e(le.length/8);for(let ze=0;ze<le.length;++ze){const Ue=le[ze]>0?1:0,pe=Math.floor(ze/8),W=ze%8;ye[pe]|=Ue<<7-W,U&&W===0&&(ye[pe]-=128)}return new a(ee,ye,[V.dims[0],V.dims[1]/8])}},"./src/utils/video.js":(e,r,t)=>{t.r(r),t.d(r,{RawVideo:()=>i,RawVideoFrame:()=>n,load_video:()=>a});var s=t("./src/utils/image.js"),o=t("./src/env.js");class n{constructor(u,p){this.image=u,this.timestamp=p}}class i{constructor(u,p){u.length>0&&u[0]instanceof s.RawImage&&(u=u.map((c,d)=>new n(c,(d+1)/(u.length+1)*p))),this.frames=u,this.duration=p}get width(){return this.frames[0].image.width}get height(){return this.frames[0].image.height}get fps(){return this.frames.length/this.duration}}async function a(l,{num_frames:u=null,fps:p=null}={}){if(!o.apis.IS_BROWSER_ENV)throw new Error("`load_video` is currently only supported in browser environments.");if(u==null&&p==null)throw new Error("Either num_frames or fps must be provided.");const c=[],d=document.createElement("video");if(d.crossOrigin="anonymous",d.muted=!0,typeof l=="string")d.src=l;else if(l instanceof Blob)d.src=URL.createObjectURL(l);else if(l instanceof HTMLVideoElement)d.src=l.src;else throw new Error("Invalid URL or video element provided.");if(await new Promise(S=>d.onloadedmetadata=S),d.seekable.start(0)===d.seekable.end(0)){const E=await(await fetch(d.src)).blob();d.src=URL.createObjectURL(E),await new Promise(v=>d.onloadedmetadata=v)}const _=d.duration;let f,T;u!=null?(f=u,T=u===1?0:_/(u-1)):(T=1/p,f=Math.floor(_/T));let I=[];for(let S=0;S<f;++S)I.push(u===1?_/2:S*T);const g=document.createElement("canvas");g.width=d.videoWidth,g.height=d.videoHeight;const w=g.getContext("2d",{willReadFrequently:!0});for(const S of I){d.currentTime=S,await new Promise(y=>{d.onseeked=y}),w.drawImage(d,0,0,g.width,g.height);const E=w.getImageData(0,0,g.width,g.height),v=new s.RawImage(E.data,g.width,g.height,4),M=new n(v,S);c.push(M)}return d.remove(),new i(c,_)}}},tM={};function jt(e){var r=tM[e];if(r!==void 0)return r.exports;var t=tM[e]={exports:{}};return qx[e](t,t.exports,jt),t.exports}(()=>{var e=Object.getPrototypeOf?t=>Object.getPrototypeOf(t):t=>t.__proto__,r;jt.t=function(t,s){if(s&1&&(t=this(t)),s&8||typeof t=="object"&&t&&(s&4&&t.__esModule||s&16&&typeof t.then=="function"))return t;var o=Object.create(null);jt.r(o);var n={};r=r||[null,e({}),e([]),e(e)];for(var i=s&2&&t;typeof i=="object"&&!~r.indexOf(i);i=e(i))Object.getOwnPropertyNames(i).forEach(a=>n[a]=()=>t[a]);return n.default=()=>t,jt.d(o,n),o}})();jt.d=(e,r)=>{for(var t in r)jt.o(r,t)&&!jt.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})};jt.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r);jt.r=e=>{typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var m={};(()=>{/*!*****************************!*\
  !*** ./src/transformers.js ***!
  \*****************************/jt.r(m),jt.d(m,{ASTFeatureExtractor:()=>c.ASTFeatureExtractor,ASTForAudioClassification:()=>t.ASTForAudioClassification,ASTModel:()=>t.ASTModel,ASTPreTrainedModel:()=>t.ASTPreTrainedModel,AlbertForMaskedLM:()=>t.AlbertForMaskedLM,AlbertForQuestionAnswering:()=>t.AlbertForQuestionAnswering,AlbertForSequenceClassification:()=>t.AlbertForSequenceClassification,AlbertModel:()=>t.AlbertModel,AlbertPreTrainedModel:()=>t.AlbertPreTrainedModel,AlbertTokenizer:()=>s.AlbertTokenizer,AudioClassificationPipeline:()=>r.AudioClassificationPipeline,AutoConfig:()=>o.AutoConfig,AutoFeatureExtractor:()=>d.AutoFeatureExtractor,AutoImageProcessor:()=>T.AutoImageProcessor,AutoModel:()=>t.AutoModel,AutoModelForAudioClassification:()=>t.AutoModelForAudioClassification,AutoModelForAudioFrameClassification:()=>t.AutoModelForAudioFrameClassification,AutoModelForAudioTextToText:()=>t.AutoModelForAudioTextToText,AutoModelForCTC:()=>t.AutoModelForCTC,AutoModelForCausalLM:()=>t.AutoModelForCausalLM,AutoModelForDepthEstimation:()=>t.AutoModelForDepthEstimation,AutoModelForDocumentQuestionAnswering:()=>t.AutoModelForDocumentQuestionAnswering,AutoModelForImageClassification:()=>t.AutoModelForImageClassification,AutoModelForImageFeatureExtraction:()=>t.AutoModelForImageFeatureExtraction,AutoModelForImageMatting:()=>t.AutoModelForImageMatting,AutoModelForImageSegmentation:()=>t.AutoModelForImageSegmentation,AutoModelForImageTextToText:()=>t.AutoModelForImageTextToText,AutoModelForImageToImage:()=>t.AutoModelForImageToImage,AutoModelForMaskGeneration:()=>t.AutoModelForMaskGeneration,AutoModelForMaskedLM:()=>t.AutoModelForMaskedLM,AutoModelForNormalEstimation:()=>t.AutoModelForNormalEstimation,AutoModelForObjectDetection:()=>t.AutoModelForObjectDetection,AutoModelForPoseEstimation:()=>t.AutoModelForPoseEstimation,AutoModelForQuestionAnswering:()=>t.AutoModelForQuestionAnswering,AutoModelForSemanticSegmentation:()=>t.AutoModelForSemanticSegmentation,AutoModelForSeq2SeqLM:()=>t.AutoModelForSeq2SeqLM,AutoModelForSequenceClassification:()=>t.AutoModelForSequenceClassification,AutoModelForSpeechSeq2Seq:()=>t.AutoModelForSpeechSeq2Seq,AutoModelForTextToSpectrogram:()=>t.AutoModelForTextToSpectrogram,AutoModelForTextToWaveform:()=>t.AutoModelForTextToWaveform,AutoModelForTokenClassification:()=>t.AutoModelForTokenClassification,AutoModelForUniversalSegmentation:()=>t.AutoModelForUniversalSegmentation,AutoModelForVision2Seq:()=>t.AutoModelForVision2Seq,AutoModelForXVector:()=>t.AutoModelForXVector,AutoModelForZeroShotObjectDetection:()=>t.AutoModelForZeroShotObjectDetection,AutoProcessor:()=>w.AutoProcessor,AutoTokenizer:()=>s.AutoTokenizer,AutomaticSpeechRecognitionPipeline:()=>r.AutomaticSpeechRecognitionPipeline,BackgroundRemovalPipeline:()=>r.BackgroundRemovalPipeline,BartForConditionalGeneration:()=>t.BartForConditionalGeneration,BartForSequenceClassification:()=>t.BartForSequenceClassification,BartModel:()=>t.BartModel,BartPretrainedModel:()=>t.BartPretrainedModel,BartTokenizer:()=>s.BartTokenizer,BaseModelOutput:()=>t.BaseModelOutput,BaseStreamer:()=>S.BaseStreamer,BeitFeatureExtractor:()=>f.BeitFeatureExtractor,BeitForImageClassification:()=>t.BeitForImageClassification,BeitModel:()=>t.BeitModel,BeitPreTrainedModel:()=>t.BeitPreTrainedModel,BertForMaskedLM:()=>t.BertForMaskedLM,BertForQuestionAnswering:()=>t.BertForQuestionAnswering,BertForSequenceClassification:()=>t.BertForSequenceClassification,BertForTokenClassification:()=>t.BertForTokenClassification,BertModel:()=>t.BertModel,BertPreTrainedModel:()=>t.BertPreTrainedModel,BertTokenizer:()=>s.BertTokenizer,BitImageProcessor:()=>f.BitImageProcessor,BlenderbotForConditionalGeneration:()=>t.BlenderbotForConditionalGeneration,BlenderbotModel:()=>t.BlenderbotModel,BlenderbotPreTrainedModel:()=>t.BlenderbotPreTrainedModel,BlenderbotSmallForConditionalGeneration:()=>t.BlenderbotSmallForConditionalGeneration,BlenderbotSmallModel:()=>t.BlenderbotSmallModel,BlenderbotSmallPreTrainedModel:()=>t.BlenderbotSmallPreTrainedModel,BlenderbotSmallTokenizer:()=>s.BlenderbotSmallTokenizer,BlenderbotTokenizer:()=>s.BlenderbotTokenizer,BloomForCausalLM:()=>t.BloomForCausalLM,BloomModel:()=>t.BloomModel,BloomPreTrainedModel:()=>t.BloomPreTrainedModel,BloomTokenizer:()=>s.BloomTokenizer,CLIPFeatureExtractor:()=>f.CLIPFeatureExtractor,CLIPImageProcessor:()=>f.CLIPImageProcessor,CLIPModel:()=>t.CLIPModel,CLIPPreTrainedModel:()=>t.CLIPPreTrainedModel,CLIPSegForImageSegmentation:()=>t.CLIPSegForImageSegmentation,CLIPSegModel:()=>t.CLIPSegModel,CLIPSegPreTrainedModel:()=>t.CLIPSegPreTrainedModel,CLIPTextModel:()=>t.CLIPTextModel,CLIPTextModelWithProjection:()=>t.CLIPTextModelWithProjection,CLIPTokenizer:()=>s.CLIPTokenizer,CLIPVisionModel:()=>t.CLIPVisionModel,CLIPVisionModelWithProjection:()=>t.CLIPVisionModelWithProjection,CamembertForMaskedLM:()=>t.CamembertForMaskedLM,CamembertForQuestionAnswering:()=>t.CamembertForQuestionAnswering,CamembertForSequenceClassification:()=>t.CamembertForSequenceClassification,CamembertForTokenClassification:()=>t.CamembertForTokenClassification,CamembertModel:()=>t.CamembertModel,CamembertPreTrainedModel:()=>t.CamembertPreTrainedModel,CamembertTokenizer:()=>s.CamembertTokenizer,CausalLMOutput:()=>t.CausalLMOutput,CausalLMOutputWithPast:()=>t.CausalLMOutputWithPast,ChineseCLIPFeatureExtractor:()=>f.ChineseCLIPFeatureExtractor,ChineseCLIPModel:()=>t.ChineseCLIPModel,ChineseCLIPPreTrainedModel:()=>t.ChineseCLIPPreTrainedModel,ClapAudioModelWithProjection:()=>t.ClapAudioModelWithProjection,ClapFeatureExtractor:()=>c.ClapFeatureExtractor,ClapModel:()=>t.ClapModel,ClapPreTrainedModel:()=>t.ClapPreTrainedModel,ClapTextModelWithProjection:()=>t.ClapTextModelWithProjection,ClassifierFreeGuidanceLogitsProcessor:()=>v.ClassifierFreeGuidanceLogitsProcessor,CodeGenForCausalLM:()=>t.CodeGenForCausalLM,CodeGenModel:()=>t.CodeGenModel,CodeGenPreTrainedModel:()=>t.CodeGenPreTrainedModel,CodeGenTokenizer:()=>s.CodeGenTokenizer,CodeLlamaTokenizer:()=>s.CodeLlamaTokenizer,CohereForCausalLM:()=>t.CohereForCausalLM,CohereModel:()=>t.CohereModel,CoherePreTrainedModel:()=>t.CoherePreTrainedModel,CohereTokenizer:()=>s.CohereTokenizer,ConvBertForMaskedLM:()=>t.ConvBertForMaskedLM,ConvBertForQuestionAnswering:()=>t.ConvBertForQuestionAnswering,ConvBertForSequenceClassification:()=>t.ConvBertForSequenceClassification,ConvBertForTokenClassification:()=>t.ConvBertForTokenClassification,ConvBertModel:()=>t.ConvBertModel,ConvBertPreTrainedModel:()=>t.ConvBertPreTrainedModel,ConvBertTokenizer:()=>s.ConvBertTokenizer,ConvNextFeatureExtractor:()=>f.ConvNextFeatureExtractor,ConvNextForImageClassification:()=>t.ConvNextForImageClassification,ConvNextImageProcessor:()=>f.ConvNextImageProcessor,ConvNextModel:()=>t.ConvNextModel,ConvNextPreTrainedModel:()=>t.ConvNextPreTrainedModel,ConvNextV2ForImageClassification:()=>t.ConvNextV2ForImageClassification,ConvNextV2Model:()=>t.ConvNextV2Model,ConvNextV2PreTrainedModel:()=>t.ConvNextV2PreTrainedModel,DFineForObjectDetection:()=>t.DFineForObjectDetection,DFineModel:()=>t.DFineModel,DFinePreTrainedModel:()=>t.DFinePreTrainedModel,DPTFeatureExtractor:()=>f.DPTFeatureExtractor,DPTForDepthEstimation:()=>t.DPTForDepthEstimation,DPTImageProcessor:()=>f.DPTImageProcessor,DPTModel:()=>t.DPTModel,DPTPreTrainedModel:()=>t.DPTPreTrainedModel,DacDecoderModel:()=>t.DacDecoderModel,DacDecoderOutput:()=>t.DacDecoderOutput,DacEncoderModel:()=>t.DacEncoderModel,DacEncoderOutput:()=>t.DacEncoderOutput,DacFeatureExtractor:()=>c.DacFeatureExtractor,DacModel:()=>t.DacModel,DacPreTrainedModel:()=>t.DacPreTrainedModel,DataTypeMap:()=>l.DataTypeMap,DebertaForMaskedLM:()=>t.DebertaForMaskedLM,DebertaForQuestionAnswering:()=>t.DebertaForQuestionAnswering,DebertaForSequenceClassification:()=>t.DebertaForSequenceClassification,DebertaForTokenClassification:()=>t.DebertaForTokenClassification,DebertaModel:()=>t.DebertaModel,DebertaPreTrainedModel:()=>t.DebertaPreTrainedModel,DebertaTokenizer:()=>s.DebertaTokenizer,DebertaV2ForMaskedLM:()=>t.DebertaV2ForMaskedLM,DebertaV2ForQuestionAnswering:()=>t.DebertaV2ForQuestionAnswering,DebertaV2ForSequenceClassification:()=>t.DebertaV2ForSequenceClassification,DebertaV2ForTokenClassification:()=>t.DebertaV2ForTokenClassification,DebertaV2Model:()=>t.DebertaV2Model,DebertaV2PreTrainedModel:()=>t.DebertaV2PreTrainedModel,DebertaV2Tokenizer:()=>s.DebertaV2Tokenizer,DecisionTransformerModel:()=>t.DecisionTransformerModel,DecisionTransformerPreTrainedModel:()=>t.DecisionTransformerPreTrainedModel,DeiTFeatureExtractor:()=>f.DeiTFeatureExtractor,DeiTForImageClassification:()=>t.DeiTForImageClassification,DeiTImageProcessor:()=>f.DeiTImageProcessor,DeiTModel:()=>t.DeiTModel,DeiTPreTrainedModel:()=>t.DeiTPreTrainedModel,DepthAnythingForDepthEstimation:()=>t.DepthAnythingForDepthEstimation,DepthAnythingPreTrainedModel:()=>t.DepthAnythingPreTrainedModel,DepthEstimationPipeline:()=>r.DepthEstimationPipeline,DepthProForDepthEstimation:()=>t.DepthProForDepthEstimation,DepthProPreTrainedModel:()=>t.DepthProPreTrainedModel,DetrFeatureExtractor:()=>f.DetrFeatureExtractor,DetrForObjectDetection:()=>t.DetrForObjectDetection,DetrForSegmentation:()=>t.DetrForSegmentation,DetrImageProcessor:()=>f.DetrImageProcessor,DetrModel:()=>t.DetrModel,DetrObjectDetectionOutput:()=>t.DetrObjectDetectionOutput,DetrPreTrainedModel:()=>t.DetrPreTrainedModel,DetrSegmentationOutput:()=>t.DetrSegmentationOutput,Dinov2ForImageClassification:()=>t.Dinov2ForImageClassification,Dinov2Model:()=>t.Dinov2Model,Dinov2PreTrainedModel:()=>t.Dinov2PreTrainedModel,Dinov2WithRegistersForImageClassification:()=>t.Dinov2WithRegistersForImageClassification,Dinov2WithRegistersModel:()=>t.Dinov2WithRegistersModel,Dinov2WithRegistersPreTrainedModel:()=>t.Dinov2WithRegistersPreTrainedModel,DistilBertForMaskedLM:()=>t.DistilBertForMaskedLM,DistilBertForQuestionAnswering:()=>t.DistilBertForQuestionAnswering,DistilBertForSequenceClassification:()=>t.DistilBertForSequenceClassification,DistilBertForTokenClassification:()=>t.DistilBertForTokenClassification,DistilBertModel:()=>t.DistilBertModel,DistilBertPreTrainedModel:()=>t.DistilBertPreTrainedModel,DistilBertTokenizer:()=>s.DistilBertTokenizer,DocumentQuestionAnsweringPipeline:()=>r.DocumentQuestionAnsweringPipeline,DonutFeatureExtractor:()=>f.DonutFeatureExtractor,DonutImageProcessor:()=>f.DonutImageProcessor,DonutSwinModel:()=>t.DonutSwinModel,DonutSwinPreTrainedModel:()=>t.DonutSwinPreTrainedModel,EfficientNetForImageClassification:()=>t.EfficientNetForImageClassification,EfficientNetImageProcessor:()=>f.EfficientNetImageProcessor,EfficientNetModel:()=>t.EfficientNetModel,EfficientNetPreTrainedModel:()=>t.EfficientNetPreTrainedModel,ElectraForMaskedLM:()=>t.ElectraForMaskedLM,ElectraForQuestionAnswering:()=>t.ElectraForQuestionAnswering,ElectraForSequenceClassification:()=>t.ElectraForSequenceClassification,ElectraForTokenClassification:()=>t.ElectraForTokenClassification,ElectraModel:()=>t.ElectraModel,ElectraPreTrainedModel:()=>t.ElectraPreTrainedModel,ElectraTokenizer:()=>s.ElectraTokenizer,EncodecFeatureExtractor:()=>c.EncodecFeatureExtractor,EosTokenCriteria:()=>E.EosTokenCriteria,EsmForMaskedLM:()=>t.EsmForMaskedLM,EsmForSequenceClassification:()=>t.EsmForSequenceClassification,EsmForTokenClassification:()=>t.EsmForTokenClassification,EsmModel:()=>t.EsmModel,EsmPreTrainedModel:()=>t.EsmPreTrainedModel,EsmTokenizer:()=>s.EsmTokenizer,ExaoneForCausalLM:()=>t.ExaoneForCausalLM,ExaoneModel:()=>t.ExaoneModel,ExaonePreTrainedModel:()=>t.ExaonePreTrainedModel,FFT:()=>u.FFT,FalconForCausalLM:()=>t.FalconForCausalLM,FalconModel:()=>t.FalconModel,FalconPreTrainedModel:()=>t.FalconPreTrainedModel,FalconTokenizer:()=>s.FalconTokenizer,FastViTForImageClassification:()=>t.FastViTForImageClassification,FastViTModel:()=>t.FastViTModel,FastViTPreTrainedModel:()=>t.FastViTPreTrainedModel,FeatureExtractionPipeline:()=>r.FeatureExtractionPipeline,FeatureExtractor:()=>p.FeatureExtractor,FillMaskPipeline:()=>r.FillMaskPipeline,Florence2ForConditionalGeneration:()=>t.Florence2ForConditionalGeneration,Florence2PreTrainedModel:()=>t.Florence2PreTrainedModel,Florence2Processor:()=>g.Florence2Processor,ForcedBOSTokenLogitsProcessor:()=>v.ForcedBOSTokenLogitsProcessor,ForcedEOSTokenLogitsProcessor:()=>v.ForcedEOSTokenLogitsProcessor,GLPNFeatureExtractor:()=>f.GLPNFeatureExtractor,GLPNForDepthEstimation:()=>t.GLPNForDepthEstimation,GLPNModel:()=>t.GLPNModel,GLPNPreTrainedModel:()=>t.GLPNPreTrainedModel,GPT2LMHeadModel:()=>t.GPT2LMHeadModel,GPT2Model:()=>t.GPT2Model,GPT2PreTrainedModel:()=>t.GPT2PreTrainedModel,GPT2Tokenizer:()=>s.GPT2Tokenizer,GPTBigCodeForCausalLM:()=>t.GPTBigCodeForCausalLM,GPTBigCodeModel:()=>t.GPTBigCodeModel,GPTBigCodePreTrainedModel:()=>t.GPTBigCodePreTrainedModel,GPTJForCausalLM:()=>t.GPTJForCausalLM,GPTJModel:()=>t.GPTJModel,GPTJPreTrainedModel:()=>t.GPTJPreTrainedModel,GPTNeoForCausalLM:()=>t.GPTNeoForCausalLM,GPTNeoModel:()=>t.GPTNeoModel,GPTNeoPreTrainedModel:()=>t.GPTNeoPreTrainedModel,GPTNeoXForCausalLM:()=>t.GPTNeoXForCausalLM,GPTNeoXModel:()=>t.GPTNeoXModel,GPTNeoXPreTrainedModel:()=>t.GPTNeoXPreTrainedModel,GPTNeoXTokenizer:()=>s.GPTNeoXTokenizer,Gemma2ForCausalLM:()=>t.Gemma2ForCausalLM,Gemma2Model:()=>t.Gemma2Model,Gemma2PreTrainedModel:()=>t.Gemma2PreTrainedModel,Gemma3ForCausalLM:()=>t.Gemma3ForCausalLM,Gemma3Model:()=>t.Gemma3Model,Gemma3PreTrainedModel:()=>t.Gemma3PreTrainedModel,GemmaForCausalLM:()=>t.GemmaForCausalLM,GemmaModel:()=>t.GemmaModel,GemmaPreTrainedModel:()=>t.GemmaPreTrainedModel,GemmaTokenizer:()=>s.GemmaTokenizer,GlmForCausalLM:()=>t.GlmForCausalLM,GlmModel:()=>t.GlmModel,GlmPreTrainedModel:()=>t.GlmPreTrainedModel,GraniteForCausalLM:()=>t.GraniteForCausalLM,GraniteModel:()=>t.GraniteModel,GranitePreTrainedModel:()=>t.GranitePreTrainedModel,Grok1Tokenizer:()=>s.Grok1Tokenizer,GroundingDinoForObjectDetection:()=>t.GroundingDinoForObjectDetection,GroundingDinoImageProcessor:()=>f.GroundingDinoImageProcessor,GroundingDinoPreTrainedModel:()=>t.GroundingDinoPreTrainedModel,GroundingDinoProcessor:()=>g.GroundingDinoProcessor,GroupViTModel:()=>t.GroupViTModel,GroupViTPreTrainedModel:()=>t.GroupViTPreTrainedModel,HeliumForCausalLM:()=>t.HeliumForCausalLM,HeliumModel:()=>t.HeliumModel,HeliumPreTrainedModel:()=>t.HeliumPreTrainedModel,HerbertTokenizer:()=>s.HerbertTokenizer,HieraForImageClassification:()=>t.HieraForImageClassification,HieraModel:()=>t.HieraModel,HieraPreTrainedModel:()=>t.HieraPreTrainedModel,HubertForCTC:()=>t.HubertForCTC,HubertForSequenceClassification:()=>t.HubertForSequenceClassification,HubertModel:()=>t.HubertModel,HubertPreTrainedModel:()=>t.HubertPreTrainedModel,IJepaForImageClassification:()=>t.IJepaForImageClassification,IJepaModel:()=>t.IJepaModel,IJepaPreTrainedModel:()=>t.IJepaPreTrainedModel,Idefics3ForConditionalGeneration:()=>t.Idefics3ForConditionalGeneration,Idefics3ImageProcessor:()=>f.Idefics3ImageProcessor,Idefics3PreTrainedModel:()=>t.Idefics3PreTrainedModel,Idefics3Processor:()=>g.Idefics3Processor,ImageClassificationPipeline:()=>r.ImageClassificationPipeline,ImageFeatureExtractionPipeline:()=>r.ImageFeatureExtractionPipeline,ImageFeatureExtractor:()=>c.ImageFeatureExtractor,ImageMattingOutput:()=>t.ImageMattingOutput,ImageProcessor:()=>_.ImageProcessor,ImageSegmentationPipeline:()=>r.ImageSegmentationPipeline,ImageToImagePipeline:()=>r.ImageToImagePipeline,ImageToTextPipeline:()=>r.ImageToTextPipeline,InterruptableStoppingCriteria:()=>E.InterruptableStoppingCriteria,JAISLMHeadModel:()=>t.JAISLMHeadModel,JAISModel:()=>t.JAISModel,JAISPreTrainedModel:()=>t.JAISPreTrainedModel,JinaCLIPImageProcessor:()=>f.JinaCLIPImageProcessor,JinaCLIPModel:()=>t.JinaCLIPModel,JinaCLIPPreTrainedModel:()=>t.JinaCLIPPreTrainedModel,JinaCLIPProcessor:()=>g.JinaCLIPProcessor,JinaCLIPTextModel:()=>t.JinaCLIPTextModel,JinaCLIPVisionModel:()=>t.JinaCLIPVisionModel,LiteWhisperForConditionalGeneration:()=>t.LiteWhisperForConditionalGeneration,LlamaForCausalLM:()=>t.LlamaForCausalLM,LlamaModel:()=>t.LlamaModel,LlamaPreTrainedModel:()=>t.LlamaPreTrainedModel,LlamaTokenizer:()=>s.LlamaTokenizer,LlavaForConditionalGeneration:()=>t.LlavaForConditionalGeneration,LlavaOnevisionForConditionalGeneration:()=>t.LlavaOnevisionForConditionalGeneration,LlavaOnevisionImageProcessor:()=>f.LlavaOnevisionImageProcessor,LlavaPreTrainedModel:()=>t.LlavaPreTrainedModel,LogitsProcessor:()=>v.LogitsProcessor,LogitsProcessorList:()=>v.LogitsProcessorList,LogitsWarper:()=>v.LogitsWarper,LongT5ForConditionalGeneration:()=>t.LongT5ForConditionalGeneration,LongT5Model:()=>t.LongT5Model,LongT5PreTrainedModel:()=>t.LongT5PreTrainedModel,M2M100ForConditionalGeneration:()=>t.M2M100ForConditionalGeneration,M2M100Model:()=>t.M2M100Model,M2M100PreTrainedModel:()=>t.M2M100PreTrainedModel,M2M100Tokenizer:()=>s.M2M100Tokenizer,MBart50Tokenizer:()=>s.MBart50Tokenizer,MBartForCausalLM:()=>t.MBartForCausalLM,MBartForConditionalGeneration:()=>t.MBartForConditionalGeneration,MBartForSequenceClassification:()=>t.MBartForSequenceClassification,MBartModel:()=>t.MBartModel,MBartPreTrainedModel:()=>t.MBartPreTrainedModel,MBartTokenizer:()=>s.MBartTokenizer,MPNetForMaskedLM:()=>t.MPNetForMaskedLM,MPNetForQuestionAnswering:()=>t.MPNetForQuestionAnswering,MPNetForSequenceClassification:()=>t.MPNetForSequenceClassification,MPNetForTokenClassification:()=>t.MPNetForTokenClassification,MPNetModel:()=>t.MPNetModel,MPNetPreTrainedModel:()=>t.MPNetPreTrainedModel,MPNetTokenizer:()=>s.MPNetTokenizer,MT5ForConditionalGeneration:()=>t.MT5ForConditionalGeneration,MT5Model:()=>t.MT5Model,MT5PreTrainedModel:()=>t.MT5PreTrainedModel,MarianMTModel:()=>t.MarianMTModel,MarianModel:()=>t.MarianModel,MarianPreTrainedModel:()=>t.MarianPreTrainedModel,MarianTokenizer:()=>s.MarianTokenizer,Mask2FormerImageProcessor:()=>f.Mask2FormerImageProcessor,MaskFormerFeatureExtractor:()=>f.MaskFormerFeatureExtractor,MaskFormerForInstanceSegmentation:()=>t.MaskFormerForInstanceSegmentation,MaskFormerImageProcessor:()=>f.MaskFormerImageProcessor,MaskFormerModel:()=>t.MaskFormerModel,MaskFormerPreTrainedModel:()=>t.MaskFormerPreTrainedModel,MaskedLMOutput:()=>t.MaskedLMOutput,MaxLengthCriteria:()=>E.MaxLengthCriteria,Metric3DForDepthEstimation:()=>t.Metric3DForDepthEstimation,Metric3DPreTrainedModel:()=>t.Metric3DPreTrainedModel,Metric3Dv2ForDepthEstimation:()=>t.Metric3Dv2ForDepthEstimation,Metric3Dv2PreTrainedModel:()=>t.Metric3Dv2PreTrainedModel,MgpstrForSceneTextRecognition:()=>t.MgpstrForSceneTextRecognition,MgpstrModelOutput:()=>t.MgpstrModelOutput,MgpstrPreTrainedModel:()=>t.MgpstrPreTrainedModel,MgpstrProcessor:()=>g.MgpstrProcessor,MgpstrTokenizer:()=>s.MgpstrTokenizer,MimiDecoderModel:()=>t.MimiDecoderModel,MimiDecoderOutput:()=>t.MimiDecoderOutput,MimiEncoderModel:()=>t.MimiEncoderModel,MimiEncoderOutput:()=>t.MimiEncoderOutput,MimiModel:()=>t.MimiModel,MimiPreTrainedModel:()=>t.MimiPreTrainedModel,MinLengthLogitsProcessor:()=>v.MinLengthLogitsProcessor,MinNewTokensLengthLogitsProcessor:()=>v.MinNewTokensLengthLogitsProcessor,MistralForCausalLM:()=>t.MistralForCausalLM,MistralModel:()=>t.MistralModel,MistralPreTrainedModel:()=>t.MistralPreTrainedModel,MobileBertForMaskedLM:()=>t.MobileBertForMaskedLM,MobileBertForQuestionAnswering:()=>t.MobileBertForQuestionAnswering,MobileBertForSequenceClassification:()=>t.MobileBertForSequenceClassification,MobileBertModel:()=>t.MobileBertModel,MobileBertPreTrainedModel:()=>t.MobileBertPreTrainedModel,MobileBertTokenizer:()=>s.MobileBertTokenizer,MobileLLMForCausalLM:()=>t.MobileLLMForCausalLM,MobileLLMModel:()=>t.MobileLLMModel,MobileLLMPreTrainedModel:()=>t.MobileLLMPreTrainedModel,MobileNetV1FeatureExtractor:()=>f.MobileNetV1FeatureExtractor,MobileNetV1ForImageClassification:()=>t.MobileNetV1ForImageClassification,MobileNetV1ForSemanticSegmentation:()=>t.MobileNetV1ForSemanticSegmentation,MobileNetV1ImageProcessor:()=>f.MobileNetV1ImageProcessor,MobileNetV1Model:()=>t.MobileNetV1Model,MobileNetV1PreTrainedModel:()=>t.MobileNetV1PreTrainedModel,MobileNetV2FeatureExtractor:()=>f.MobileNetV2FeatureExtractor,MobileNetV2ForImageClassification:()=>t.MobileNetV2ForImageClassification,MobileNetV2ForSemanticSegmentation:()=>t.MobileNetV2ForSemanticSegmentation,MobileNetV2ImageProcessor:()=>f.MobileNetV2ImageProcessor,MobileNetV2Model:()=>t.MobileNetV2Model,MobileNetV2PreTrainedModel:()=>t.MobileNetV2PreTrainedModel,MobileNetV3FeatureExtractor:()=>f.MobileNetV3FeatureExtractor,MobileNetV3ForImageClassification:()=>t.MobileNetV3ForImageClassification,MobileNetV3ForSemanticSegmentation:()=>t.MobileNetV3ForSemanticSegmentation,MobileNetV3ImageProcessor:()=>f.MobileNetV3ImageProcessor,MobileNetV3Model:()=>t.MobileNetV3Model,MobileNetV3PreTrainedModel:()=>t.MobileNetV3PreTrainedModel,MobileNetV4FeatureExtractor:()=>f.MobileNetV4FeatureExtractor,MobileNetV4ForImageClassification:()=>t.MobileNetV4ForImageClassification,MobileNetV4ForSemanticSegmentation:()=>t.MobileNetV4ForSemanticSegmentation,MobileNetV4ImageProcessor:()=>f.MobileNetV4ImageProcessor,MobileNetV4Model:()=>t.MobileNetV4Model,MobileNetV4PreTrainedModel:()=>t.MobileNetV4PreTrainedModel,MobileViTFeatureExtractor:()=>f.MobileViTFeatureExtractor,MobileViTForImageClassification:()=>t.MobileViTForImageClassification,MobileViTImageProcessor:()=>f.MobileViTImageProcessor,MobileViTModel:()=>t.MobileViTModel,MobileViTPreTrainedModel:()=>t.MobileViTPreTrainedModel,MobileViTV2ForImageClassification:()=>t.MobileViTV2ForImageClassification,MobileViTV2Model:()=>t.MobileViTV2Model,MobileViTV2PreTrainedModel:()=>t.MobileViTV2PreTrainedModel,ModelOutput:()=>t.ModelOutput,ModernBertForMaskedLM:()=>t.ModernBertForMaskedLM,ModernBertForSequenceClassification:()=>t.ModernBertForSequenceClassification,ModernBertForTokenClassification:()=>t.ModernBertForTokenClassification,ModernBertModel:()=>t.ModernBertModel,ModernBertPreTrainedModel:()=>t.ModernBertPreTrainedModel,Moondream1ForConditionalGeneration:()=>t.Moondream1ForConditionalGeneration,MoonshineFeatureExtractor:()=>c.MoonshineFeatureExtractor,MoonshineForConditionalGeneration:()=>t.MoonshineForConditionalGeneration,MoonshineModel:()=>t.MoonshineModel,MoonshinePreTrainedModel:()=>t.MoonshinePreTrainedModel,MoonshineProcessor:()=>g.MoonshineProcessor,MptForCausalLM:()=>t.MptForCausalLM,MptModel:()=>t.MptModel,MptPreTrainedModel:()=>t.MptPreTrainedModel,MultiModalityCausalLM:()=>t.MultiModalityCausalLM,MultiModalityPreTrainedModel:()=>t.MultiModalityPreTrainedModel,MusicgenForCausalLM:()=>t.MusicgenForCausalLM,MusicgenForConditionalGeneration:()=>t.MusicgenForConditionalGeneration,MusicgenModel:()=>t.MusicgenModel,MusicgenPreTrainedModel:()=>t.MusicgenPreTrainedModel,NllbTokenizer:()=>s.NllbTokenizer,NoBadWordsLogitsProcessor:()=>v.NoBadWordsLogitsProcessor,NoRepeatNGramLogitsProcessor:()=>v.NoRepeatNGramLogitsProcessor,NomicBertModel:()=>t.NomicBertModel,NomicBertPreTrainedModel:()=>t.NomicBertPreTrainedModel,NougatImageProcessor:()=>f.NougatImageProcessor,NougatTokenizer:()=>s.NougatTokenizer,OPTForCausalLM:()=>t.OPTForCausalLM,OPTModel:()=>t.OPTModel,OPTPreTrainedModel:()=>t.OPTPreTrainedModel,ObjectDetectionPipeline:()=>r.ObjectDetectionPipeline,Olmo2ForCausalLM:()=>t.Olmo2ForCausalLM,Olmo2Model:()=>t.Olmo2Model,Olmo2PreTrainedModel:()=>t.Olmo2PreTrainedModel,OlmoForCausalLM:()=>t.OlmoForCausalLM,OlmoModel:()=>t.OlmoModel,OlmoPreTrainedModel:()=>t.OlmoPreTrainedModel,OpenELMForCausalLM:()=>t.OpenELMForCausalLM,OpenELMModel:()=>t.OpenELMModel,OpenELMPreTrainedModel:()=>t.OpenELMPreTrainedModel,OwlViTFeatureExtractor:()=>f.OwlViTFeatureExtractor,OwlViTForObjectDetection:()=>t.OwlViTForObjectDetection,OwlViTImageProcessor:()=>f.OwlViTImageProcessor,OwlViTModel:()=>t.OwlViTModel,OwlViTPreTrainedModel:()=>t.OwlViTPreTrainedModel,OwlViTProcessor:()=>g.OwlViTProcessor,Owlv2ForObjectDetection:()=>t.Owlv2ForObjectDetection,Owlv2ImageProcessor:()=>f.Owlv2ImageProcessor,Owlv2Model:()=>t.Owlv2Model,Owlv2PreTrainedModel:()=>t.Owlv2PreTrainedModel,PaliGemmaForConditionalGeneration:()=>t.PaliGemmaForConditionalGeneration,PaliGemmaPreTrainedModel:()=>t.PaliGemmaPreTrainedModel,PaliGemmaProcessor:()=>g.PaliGemmaProcessor,PatchTSMixerForPrediction:()=>t.PatchTSMixerForPrediction,PatchTSMixerModel:()=>t.PatchTSMixerModel,PatchTSMixerPreTrainedModel:()=>t.PatchTSMixerPreTrainedModel,PatchTSTForPrediction:()=>t.PatchTSTForPrediction,PatchTSTModel:()=>t.PatchTSTModel,PatchTSTPreTrainedModel:()=>t.PatchTSTPreTrainedModel,Phi3ForCausalLM:()=>t.Phi3ForCausalLM,Phi3Model:()=>t.Phi3Model,Phi3PreTrainedModel:()=>t.Phi3PreTrainedModel,Phi3VForCausalLM:()=>t.Phi3VForCausalLM,Phi3VImageProcessor:()=>f.Phi3VImageProcessor,Phi3VPreTrainedModel:()=>t.Phi3VPreTrainedModel,Phi3VProcessor:()=>g.Phi3VProcessor,PhiForCausalLM:()=>t.PhiForCausalLM,PhiModel:()=>t.PhiModel,PhiPreTrainedModel:()=>t.PhiPreTrainedModel,Pipeline:()=>r.Pipeline,PreTrainedModel:()=>t.PreTrainedModel,PreTrainedTokenizer:()=>s.PreTrainedTokenizer,PretrainedConfig:()=>o.PretrainedConfig,PretrainedMixin:()=>t.PretrainedMixin,Processor:()=>I.Processor,PvtForImageClassification:()=>t.PvtForImageClassification,PvtImageProcessor:()=>f.PvtImageProcessor,PvtModel:()=>t.PvtModel,PvtPreTrainedModel:()=>t.PvtPreTrainedModel,PyAnnoteFeatureExtractor:()=>c.PyAnnoteFeatureExtractor,PyAnnoteForAudioFrameClassification:()=>t.PyAnnoteForAudioFrameClassification,PyAnnoteModel:()=>t.PyAnnoteModel,PyAnnotePreTrainedModel:()=>t.PyAnnotePreTrainedModel,PyAnnoteProcessor:()=>g.PyAnnoteProcessor,QuestionAnsweringModelOutput:()=>t.QuestionAnsweringModelOutput,QuestionAnsweringPipeline:()=>r.QuestionAnsweringPipeline,Qwen2ForCausalLM:()=>t.Qwen2ForCausalLM,Qwen2Model:()=>t.Qwen2Model,Qwen2PreTrainedModel:()=>t.Qwen2PreTrainedModel,Qwen2Tokenizer:()=>s.Qwen2Tokenizer,Qwen2VLForConditionalGeneration:()=>t.Qwen2VLForConditionalGeneration,Qwen2VLImageProcessor:()=>f.Qwen2VLImageProcessor,Qwen2VLPreTrainedModel:()=>t.Qwen2VLPreTrainedModel,Qwen2VLProcessor:()=>g.Qwen2VLProcessor,Qwen3ForCausalLM:()=>t.Qwen3ForCausalLM,Qwen3Model:()=>t.Qwen3Model,Qwen3PreTrainedModel:()=>t.Qwen3PreTrainedModel,RFDetrForObjectDetection:()=>t.RFDetrForObjectDetection,RFDetrModel:()=>t.RFDetrModel,RFDetrObjectDetectionOutput:()=>t.RFDetrObjectDetectionOutput,RFDetrPreTrainedModel:()=>t.RFDetrPreTrainedModel,RTDetrForObjectDetection:()=>t.RTDetrForObjectDetection,RTDetrImageProcessor:()=>f.RTDetrImageProcessor,RTDetrModel:()=>t.RTDetrModel,RTDetrObjectDetectionOutput:()=>t.RTDetrObjectDetectionOutput,RTDetrPreTrainedModel:()=>t.RTDetrPreTrainedModel,RTDetrV2ForObjectDetection:()=>t.RTDetrV2ForObjectDetection,RTDetrV2Model:()=>t.RTDetrV2Model,RTDetrV2ObjectDetectionOutput:()=>t.RTDetrV2ObjectDetectionOutput,RTDetrV2PreTrainedModel:()=>t.RTDetrV2PreTrainedModel,RawAudio:()=>n.RawAudio,RawImage:()=>i.RawImage,RawVideo:()=>a.RawVideo,RawVideoFrame:()=>a.RawVideoFrame,RepetitionPenaltyLogitsProcessor:()=>v.RepetitionPenaltyLogitsProcessor,ResNetForImageClassification:()=>t.ResNetForImageClassification,ResNetModel:()=>t.ResNetModel,ResNetPreTrainedModel:()=>t.ResNetPreTrainedModel,RoFormerForMaskedLM:()=>t.RoFormerForMaskedLM,RoFormerForQuestionAnswering:()=>t.RoFormerForQuestionAnswering,RoFormerForSequenceClassification:()=>t.RoFormerForSequenceClassification,RoFormerForTokenClassification:()=>t.RoFormerForTokenClassification,RoFormerModel:()=>t.RoFormerModel,RoFormerPreTrainedModel:()=>t.RoFormerPreTrainedModel,RoFormerTokenizer:()=>s.RoFormerTokenizer,RobertaForMaskedLM:()=>t.RobertaForMaskedLM,RobertaForQuestionAnswering:()=>t.RobertaForQuestionAnswering,RobertaForSequenceClassification:()=>t.RobertaForSequenceClassification,RobertaForTokenClassification:()=>t.RobertaForTokenClassification,RobertaModel:()=>t.RobertaModel,RobertaPreTrainedModel:()=>t.RobertaPreTrainedModel,RobertaTokenizer:()=>s.RobertaTokenizer,SamImageProcessor:()=>f.SamImageProcessor,SamImageSegmentationOutput:()=>t.SamImageSegmentationOutput,SamModel:()=>t.SamModel,SamPreTrainedModel:()=>t.SamPreTrainedModel,SamProcessor:()=>g.SamProcessor,SapiensForDepthEstimation:()=>t.SapiensForDepthEstimation,SapiensForNormalEstimation:()=>t.SapiensForNormalEstimation,SapiensForSemanticSegmentation:()=>t.SapiensForSemanticSegmentation,SapiensPreTrainedModel:()=>t.SapiensPreTrainedModel,SeamlessM4TFeatureExtractor:()=>c.SeamlessM4TFeatureExtractor,SegformerFeatureExtractor:()=>f.SegformerFeatureExtractor,SegformerForImageClassification:()=>t.SegformerForImageClassification,SegformerForSemanticSegmentation:()=>t.SegformerForSemanticSegmentation,SegformerImageProcessor:()=>f.SegformerImageProcessor,SegformerModel:()=>t.SegformerModel,SegformerPreTrainedModel:()=>t.SegformerPreTrainedModel,Seq2SeqLMOutput:()=>t.Seq2SeqLMOutput,SequenceClassifierOutput:()=>t.SequenceClassifierOutput,SiglipImageProcessor:()=>f.SiglipImageProcessor,SiglipModel:()=>t.SiglipModel,SiglipPreTrainedModel:()=>t.SiglipPreTrainedModel,SiglipTextModel:()=>t.SiglipTextModel,SiglipTokenizer:()=>s.SiglipTokenizer,SiglipVisionModel:()=>t.SiglipVisionModel,SmolVLMForConditionalGeneration:()=>t.SmolVLMForConditionalGeneration,SmolVLMImageProcessor:()=>f.SmolVLMImageProcessor,SmolVLMProcessor:()=>g.SmolVLMProcessor,SnacDecoderModel:()=>t.SnacDecoderModel,SnacEncoderModel:()=>t.SnacEncoderModel,SnacFeatureExtractor:()=>c.SnacFeatureExtractor,SnacModel:()=>t.SnacModel,SnacPreTrainedModel:()=>t.SnacPreTrainedModel,SpeechT5FeatureExtractor:()=>c.SpeechT5FeatureExtractor,SpeechT5ForSpeechToText:()=>t.SpeechT5ForSpeechToText,SpeechT5ForTextToSpeech:()=>t.SpeechT5ForTextToSpeech,SpeechT5HifiGan:()=>t.SpeechT5HifiGan,SpeechT5Model:()=>t.SpeechT5Model,SpeechT5PreTrainedModel:()=>t.SpeechT5PreTrainedModel,SpeechT5Processor:()=>g.SpeechT5Processor,SpeechT5Tokenizer:()=>s.SpeechT5Tokenizer,SqueezeBertForMaskedLM:()=>t.SqueezeBertForMaskedLM,SqueezeBertForQuestionAnswering:()=>t.SqueezeBertForQuestionAnswering,SqueezeBertForSequenceClassification:()=>t.SqueezeBertForSequenceClassification,SqueezeBertModel:()=>t.SqueezeBertModel,SqueezeBertPreTrainedModel:()=>t.SqueezeBertPreTrainedModel,SqueezeBertTokenizer:()=>s.SqueezeBertTokenizer,StableLmForCausalLM:()=>t.StableLmForCausalLM,StableLmModel:()=>t.StableLmModel,StableLmPreTrainedModel:()=>t.StableLmPreTrainedModel,Starcoder2ForCausalLM:()=>t.Starcoder2ForCausalLM,Starcoder2Model:()=>t.Starcoder2Model,Starcoder2PreTrainedModel:()=>t.Starcoder2PreTrainedModel,StoppingCriteria:()=>E.StoppingCriteria,StoppingCriteriaList:()=>E.StoppingCriteriaList,StyleTextToSpeech2Model:()=>t.StyleTextToSpeech2Model,StyleTextToSpeech2PreTrainedModel:()=>t.StyleTextToSpeech2PreTrainedModel,SummarizationPipeline:()=>r.SummarizationPipeline,SuppressTokensAtBeginLogitsProcessor:()=>v.SuppressTokensAtBeginLogitsProcessor,Swin2SRForImageSuperResolution:()=>t.Swin2SRForImageSuperResolution,Swin2SRImageProcessor:()=>f.Swin2SRImageProcessor,Swin2SRModel:()=>t.Swin2SRModel,Swin2SRPreTrainedModel:()=>t.Swin2SRPreTrainedModel,SwinForImageClassification:()=>t.SwinForImageClassification,SwinForSemanticSegmentation:()=>t.SwinForSemanticSegmentation,SwinModel:()=>t.SwinModel,SwinPreTrainedModel:()=>t.SwinPreTrainedModel,T5ForConditionalGeneration:()=>t.T5ForConditionalGeneration,T5Model:()=>t.T5Model,T5PreTrainedModel:()=>t.T5PreTrainedModel,T5Tokenizer:()=>s.T5Tokenizer,TableTransformerForObjectDetection:()=>t.TableTransformerForObjectDetection,TableTransformerModel:()=>t.TableTransformerModel,TableTransformerObjectDetectionOutput:()=>t.TableTransformerObjectDetectionOutput,TableTransformerPreTrainedModel:()=>t.TableTransformerPreTrainedModel,TemperatureLogitsWarper:()=>v.TemperatureLogitsWarper,Tensor:()=>l.Tensor,Text2TextGenerationPipeline:()=>r.Text2TextGenerationPipeline,TextClassificationPipeline:()=>r.TextClassificationPipeline,TextGenerationPipeline:()=>r.TextGenerationPipeline,TextStreamer:()=>S.TextStreamer,TextToAudioPipeline:()=>r.TextToAudioPipeline,TokenClassificationPipeline:()=>r.TokenClassificationPipeline,TokenClassifierOutput:()=>t.TokenClassifierOutput,TokenizerModel:()=>s.TokenizerModel,TopKLogitsWarper:()=>v.TopKLogitsWarper,TopPLogitsWarper:()=>v.TopPLogitsWarper,TrOCRForCausalLM:()=>t.TrOCRForCausalLM,TrOCRPreTrainedModel:()=>t.TrOCRPreTrainedModel,TranslationPipeline:()=>r.TranslationPipeline,UltravoxModel:()=>t.UltravoxModel,UltravoxPreTrainedModel:()=>t.UltravoxPreTrainedModel,UltravoxProcessor:()=>g.UltravoxProcessor,UniSpeechForCTC:()=>t.UniSpeechForCTC,UniSpeechForSequenceClassification:()=>t.UniSpeechForSequenceClassification,UniSpeechModel:()=>t.UniSpeechModel,UniSpeechPreTrainedModel:()=>t.UniSpeechPreTrainedModel,UniSpeechSatForAudioFrameClassification:()=>t.UniSpeechSatForAudioFrameClassification,UniSpeechSatForCTC:()=>t.UniSpeechSatForCTC,UniSpeechSatForSequenceClassification:()=>t.UniSpeechSatForSequenceClassification,UniSpeechSatModel:()=>t.UniSpeechSatModel,UniSpeechSatPreTrainedModel:()=>t.UniSpeechSatPreTrainedModel,VLChatProcessor:()=>g.VLChatProcessor,VLMImageProcessor:()=>f.VLMImageProcessor,ViTFeatureExtractor:()=>f.ViTFeatureExtractor,ViTForImageClassification:()=>t.ViTForImageClassification,ViTImageProcessor:()=>f.ViTImageProcessor,ViTMAEModel:()=>t.ViTMAEModel,ViTMAEPreTrainedModel:()=>t.ViTMAEPreTrainedModel,ViTMSNForImageClassification:()=>t.ViTMSNForImageClassification,ViTMSNModel:()=>t.ViTMSNModel,ViTMSNPreTrainedModel:()=>t.ViTMSNPreTrainedModel,ViTModel:()=>t.ViTModel,ViTPreTrainedModel:()=>t.ViTPreTrainedModel,VisionEncoderDecoderModel:()=>t.VisionEncoderDecoderModel,VitMatteForImageMatting:()=>t.VitMatteForImageMatting,VitMatteImageProcessor:()=>f.VitMatteImageProcessor,VitMattePreTrainedModel:()=>t.VitMattePreTrainedModel,VitPoseForPoseEstimation:()=>t.VitPoseForPoseEstimation,VitPoseImageProcessor:()=>f.VitPoseImageProcessor,VitPosePreTrainedModel:()=>t.VitPosePreTrainedModel,VitsModel:()=>t.VitsModel,VitsModelOutput:()=>t.VitsModelOutput,VitsPreTrainedModel:()=>t.VitsPreTrainedModel,VitsTokenizer:()=>s.VitsTokenizer,Wav2Vec2BertForCTC:()=>t.Wav2Vec2BertForCTC,Wav2Vec2BertForSequenceClassification:()=>t.Wav2Vec2BertForSequenceClassification,Wav2Vec2BertModel:()=>t.Wav2Vec2BertModel,Wav2Vec2BertPreTrainedModel:()=>t.Wav2Vec2BertPreTrainedModel,Wav2Vec2CTCTokenizer:()=>s.Wav2Vec2CTCTokenizer,Wav2Vec2FeatureExtractor:()=>c.Wav2Vec2FeatureExtractor,Wav2Vec2ForAudioFrameClassification:()=>t.Wav2Vec2ForAudioFrameClassification,Wav2Vec2ForCTC:()=>t.Wav2Vec2ForCTC,Wav2Vec2ForSequenceClassification:()=>t.Wav2Vec2ForSequenceClassification,Wav2Vec2Model:()=>t.Wav2Vec2Model,Wav2Vec2PreTrainedModel:()=>t.Wav2Vec2PreTrainedModel,Wav2Vec2Processor:()=>g.Wav2Vec2Processor,Wav2Vec2ProcessorWithLM:()=>g.Wav2Vec2ProcessorWithLM,WavLMForAudioFrameClassification:()=>t.WavLMForAudioFrameClassification,WavLMForCTC:()=>t.WavLMForCTC,WavLMForSequenceClassification:()=>t.WavLMForSequenceClassification,WavLMForXVector:()=>t.WavLMForXVector,WavLMModel:()=>t.WavLMModel,WavLMPreTrainedModel:()=>t.WavLMPreTrainedModel,WeSpeakerFeatureExtractor:()=>c.WeSpeakerFeatureExtractor,WeSpeakerResNetModel:()=>t.WeSpeakerResNetModel,WeSpeakerResNetPreTrainedModel:()=>t.WeSpeakerResNetPreTrainedModel,WhisperFeatureExtractor:()=>c.WhisperFeatureExtractor,WhisperForConditionalGeneration:()=>t.WhisperForConditionalGeneration,WhisperModel:()=>t.WhisperModel,WhisperPreTrainedModel:()=>t.WhisperPreTrainedModel,WhisperProcessor:()=>g.WhisperProcessor,WhisperTextStreamer:()=>S.WhisperTextStreamer,WhisperTimeStampLogitsProcessor:()=>v.WhisperTimeStampLogitsProcessor,WhisperTokenizer:()=>s.WhisperTokenizer,XLMForQuestionAnswering:()=>t.XLMForQuestionAnswering,XLMForSequenceClassification:()=>t.XLMForSequenceClassification,XLMForTokenClassification:()=>t.XLMForTokenClassification,XLMModel:()=>t.XLMModel,XLMPreTrainedModel:()=>t.XLMPreTrainedModel,XLMRobertaForMaskedLM:()=>t.XLMRobertaForMaskedLM,XLMRobertaForQuestionAnswering:()=>t.XLMRobertaForQuestionAnswering,XLMRobertaForSequenceClassification:()=>t.XLMRobertaForSequenceClassification,XLMRobertaForTokenClassification:()=>t.XLMRobertaForTokenClassification,XLMRobertaModel:()=>t.XLMRobertaModel,XLMRobertaPreTrainedModel:()=>t.XLMRobertaPreTrainedModel,XLMRobertaTokenizer:()=>s.XLMRobertaTokenizer,XLMTokenizer:()=>s.XLMTokenizer,XLMWithLMHeadModel:()=>t.XLMWithLMHeadModel,XVectorOutput:()=>t.XVectorOutput,YolosFeatureExtractor:()=>f.YolosFeatureExtractor,YolosForObjectDetection:()=>t.YolosForObjectDetection,YolosImageProcessor:()=>f.YolosImageProcessor,YolosModel:()=>t.YolosModel,YolosObjectDetectionOutput:()=>t.YolosObjectDetectionOutput,YolosPreTrainedModel:()=>t.YolosPreTrainedModel,ZeroShotAudioClassificationPipeline:()=>r.ZeroShotAudioClassificationPipeline,ZeroShotClassificationPipeline:()=>r.ZeroShotClassificationPipeline,ZeroShotImageClassificationPipeline:()=>r.ZeroShotImageClassificationPipeline,ZeroShotObjectDetectionPipeline:()=>r.ZeroShotObjectDetectionPipeline,bankers_round:()=>u.bankers_round,cat:()=>l.cat,cos_sim:()=>u.cos_sim,dot:()=>u.dot,dynamic_time_warping:()=>u.dynamic_time_warping,env:()=>e.env,full:()=>l.full,full_like:()=>l.full_like,getKeyValueShapes:()=>o.getKeyValueShapes,hamming:()=>n.hamming,hanning:()=>n.hanning,interpolate:()=>l.interpolate,interpolate_4d:()=>l.interpolate_4d,interpolate_data:()=>u.interpolate_data,is_chinese_char:()=>s.is_chinese_char,layer_norm:()=>l.layer_norm,load_image:()=>i.load_image,load_video:()=>a.load_video,log_softmax:()=>u.log_softmax,magnitude:()=>u.magnitude,matmul:()=>l.matmul,max:()=>u.max,mean:()=>l.mean,mean_pooling:()=>l.mean_pooling,medianFilter:()=>u.medianFilter,mel_filter_bank:()=>n.mel_filter_bank,min:()=>u.min,ones:()=>l.ones,ones_like:()=>l.ones_like,permute:()=>l.permute,permute_data:()=>u.permute_data,pipeline:()=>r.pipeline,quantize_embeddings:()=>l.quantize_embeddings,rand:()=>l.rand,read_audio:()=>n.read_audio,rfft:()=>l.rfft,round:()=>u.round,slice:()=>l.slice,softmax:()=>u.softmax,spectrogram:()=>n.spectrogram,stack:()=>l.stack,std_mean:()=>l.std_mean,topk:()=>l.topk,window_function:()=>n.window_function,zeros:()=>l.zeros,zeros_like:()=>l.zeros_like});var e=jt("./src/env.js"),r=jt("./src/pipelines.js"),t=jt("./src/models.js"),s=jt("./src/tokenizers.js"),o=jt("./src/configs.js"),n=jt("./src/utils/audio.js"),i=jt("./src/utils/image.js"),a=jt("./src/utils/video.js"),l=jt("./src/utils/tensor.js"),u=jt("./src/utils/maths.js"),p=jt("./src/base/feature_extraction_utils.js"),c=jt("./src/models/feature_extractors.js"),d=jt("./src/models/auto/feature_extraction_auto.js"),_=jt("./src/base/image_processors_utils.js"),f=jt("./src/models/image_processors.js"),T=jt("./src/models/auto/image_processing_auto.js"),I=jt("./src/base/processing_utils.js"),g=jt("./src/models/processors.js"),w=jt("./src/models/auto/processing_auto.js"),S=jt("./src/generation/streamers.js"),E=jt("./src/generation/stopping_criteria.js"),v=jt("./src/generation/logits_process.js")})();m.ASTFeatureExtractor;m.ASTForAudioClassification;m.ASTModel;m.ASTPreTrainedModel;m.AlbertForMaskedLM;m.AlbertForQuestionAnswering;m.AlbertForSequenceClassification;m.AlbertModel;m.AlbertPreTrainedModel;m.AlbertTokenizer;m.AudioClassificationPipeline;m.AutoConfig;m.AutoFeatureExtractor;m.AutoImageProcessor;var Jx=m.AutoModel;m.AutoModelForAudioClassification;m.AutoModelForAudioFrameClassification;m.AutoModelForAudioTextToText;m.AutoModelForCTC;m.AutoModelForCausalLM;m.AutoModelForDepthEstimation;m.AutoModelForDocumentQuestionAnswering;m.AutoModelForImageClassification;m.AutoModelForImageFeatureExtraction;m.AutoModelForImageMatting;m.AutoModelForImageSegmentation;m.AutoModelForImageTextToText;m.AutoModelForImageToImage;m.AutoModelForMaskGeneration;m.AutoModelForMaskedLM;m.AutoModelForNormalEstimation;m.AutoModelForObjectDetection;m.AutoModelForPoseEstimation;m.AutoModelForQuestionAnswering;m.AutoModelForSemanticSegmentation;m.AutoModelForSeq2SeqLM;m.AutoModelForSequenceClassification;m.AutoModelForSpeechSeq2Seq;m.AutoModelForTextToSpectrogram;m.AutoModelForTextToWaveform;m.AutoModelForTokenClassification;m.AutoModelForUniversalSegmentation;m.AutoModelForVision2Seq;m.AutoModelForXVector;m.AutoModelForZeroShotObjectDetection;var Yx=m.AutoProcessor;m.AutoTokenizer;m.AutomaticSpeechRecognitionPipeline;m.BackgroundRemovalPipeline;m.BartForConditionalGeneration;m.BartForSequenceClassification;m.BartModel;m.BartPretrainedModel;m.BartTokenizer;m.BaseModelOutput;m.BaseStreamer;m.BeitFeatureExtractor;m.BeitForImageClassification;m.BeitModel;m.BeitPreTrainedModel;m.BertForMaskedLM;m.BertForQuestionAnswering;m.BertForSequenceClassification;m.BertForTokenClassification;m.BertModel;m.BertPreTrainedModel;m.BertTokenizer;m.BitImageProcessor;m.BlenderbotForConditionalGeneration;m.BlenderbotModel;m.BlenderbotPreTrainedModel;m.BlenderbotSmallForConditionalGeneration;m.BlenderbotSmallModel;m.BlenderbotSmallPreTrainedModel;m.BlenderbotSmallTokenizer;m.BlenderbotTokenizer;m.BloomForCausalLM;m.BloomModel;m.BloomPreTrainedModel;m.BloomTokenizer;m.CLIPFeatureExtractor;m.CLIPImageProcessor;m.CLIPModel;m.CLIPPreTrainedModel;m.CLIPSegForImageSegmentation;m.CLIPSegModel;m.CLIPSegPreTrainedModel;m.CLIPTextModel;m.CLIPTextModelWithProjection;m.CLIPTokenizer;m.CLIPVisionModel;m.CLIPVisionModelWithProjection;m.CamembertForMaskedLM;m.CamembertForQuestionAnswering;m.CamembertForSequenceClassification;m.CamembertForTokenClassification;m.CamembertModel;m.CamembertPreTrainedModel;m.CamembertTokenizer;m.CausalLMOutput;m.CausalLMOutputWithPast;m.ChineseCLIPFeatureExtractor;m.ChineseCLIPModel;m.ChineseCLIPPreTrainedModel;m.ClapAudioModelWithProjection;m.ClapFeatureExtractor;m.ClapModel;m.ClapPreTrainedModel;m.ClapTextModelWithProjection;m.ClassifierFreeGuidanceLogitsProcessor;m.CodeGenForCausalLM;m.CodeGenModel;m.CodeGenPreTrainedModel;m.CodeGenTokenizer;m.CodeLlamaTokenizer;m.CohereForCausalLM;m.CohereModel;m.CoherePreTrainedModel;m.CohereTokenizer;m.ConvBertForMaskedLM;m.ConvBertForQuestionAnswering;m.ConvBertForSequenceClassification;m.ConvBertForTokenClassification;m.ConvBertModel;m.ConvBertPreTrainedModel;m.ConvBertTokenizer;m.ConvNextFeatureExtractor;m.ConvNextForImageClassification;m.ConvNextImageProcessor;m.ConvNextModel;m.ConvNextPreTrainedModel;m.ConvNextV2ForImageClassification;m.ConvNextV2Model;m.ConvNextV2PreTrainedModel;m.DFineForObjectDetection;m.DFineModel;m.DFinePreTrainedModel;m.DPTFeatureExtractor;m.DPTForDepthEstimation;m.DPTImageProcessor;m.DPTModel;m.DPTPreTrainedModel;m.DacDecoderModel;m.DacDecoderOutput;m.DacEncoderModel;m.DacEncoderOutput;m.DacFeatureExtractor;m.DacModel;m.DacPreTrainedModel;m.DataTypeMap;m.DebertaForMaskedLM;m.DebertaForQuestionAnswering;m.DebertaForSequenceClassification;m.DebertaForTokenClassification;m.DebertaModel;m.DebertaPreTrainedModel;m.DebertaTokenizer;m.DebertaV2ForMaskedLM;m.DebertaV2ForQuestionAnswering;m.DebertaV2ForSequenceClassification;m.DebertaV2ForTokenClassification;m.DebertaV2Model;m.DebertaV2PreTrainedModel;m.DebertaV2Tokenizer;m.DecisionTransformerModel;m.DecisionTransformerPreTrainedModel;m.DeiTFeatureExtractor;m.DeiTForImageClassification;m.DeiTImageProcessor;m.DeiTModel;m.DeiTPreTrainedModel;m.DepthAnythingForDepthEstimation;m.DepthAnythingPreTrainedModel;m.DepthEstimationPipeline;m.DepthProForDepthEstimation;m.DepthProPreTrainedModel;m.DetrFeatureExtractor;m.DetrForObjectDetection;m.DetrForSegmentation;m.DetrImageProcessor;m.DetrModel;m.DetrObjectDetectionOutput;m.DetrPreTrainedModel;m.DetrSegmentationOutput;m.Dinov2ForImageClassification;m.Dinov2Model;m.Dinov2PreTrainedModel;m.Dinov2WithRegistersForImageClassification;m.Dinov2WithRegistersModel;m.Dinov2WithRegistersPreTrainedModel;m.DistilBertForMaskedLM;m.DistilBertForQuestionAnswering;m.DistilBertForSequenceClassification;m.DistilBertForTokenClassification;m.DistilBertModel;m.DistilBertPreTrainedModel;m.DistilBertTokenizer;m.DocumentQuestionAnsweringPipeline;m.DonutFeatureExtractor;m.DonutImageProcessor;m.DonutSwinModel;m.DonutSwinPreTrainedModel;m.EfficientNetForImageClassification;m.EfficientNetImageProcessor;m.EfficientNetModel;m.EfficientNetPreTrainedModel;m.ElectraForMaskedLM;m.ElectraForQuestionAnswering;m.ElectraForSequenceClassification;m.ElectraForTokenClassification;m.ElectraModel;m.ElectraPreTrainedModel;m.ElectraTokenizer;m.EncodecFeatureExtractor;m.EosTokenCriteria;m.EsmForMaskedLM;m.EsmForSequenceClassification;m.EsmForTokenClassification;m.EsmModel;m.EsmPreTrainedModel;m.EsmTokenizer;m.ExaoneForCausalLM;m.ExaoneModel;m.ExaonePreTrainedModel;m.FFT;m.FalconForCausalLM;m.FalconModel;m.FalconPreTrainedModel;m.FalconTokenizer;m.FastViTForImageClassification;m.FastViTModel;m.FastViTPreTrainedModel;m.FeatureExtractionPipeline;m.FeatureExtractor;m.FillMaskPipeline;m.Florence2ForConditionalGeneration;m.Florence2PreTrainedModel;m.Florence2Processor;m.ForcedBOSTokenLogitsProcessor;m.ForcedEOSTokenLogitsProcessor;m.GLPNFeatureExtractor;m.GLPNForDepthEstimation;m.GLPNModel;m.GLPNPreTrainedModel;m.GPT2LMHeadModel;m.GPT2Model;m.GPT2PreTrainedModel;m.GPT2Tokenizer;m.GPTBigCodeForCausalLM;m.GPTBigCodeModel;m.GPTBigCodePreTrainedModel;m.GPTJForCausalLM;m.GPTJModel;m.GPTJPreTrainedModel;m.GPTNeoForCausalLM;m.GPTNeoModel;m.GPTNeoPreTrainedModel;m.GPTNeoXForCausalLM;m.GPTNeoXModel;m.GPTNeoXPreTrainedModel;m.GPTNeoXTokenizer;m.Gemma2ForCausalLM;m.Gemma2Model;m.Gemma2PreTrainedModel;m.Gemma3ForCausalLM;m.Gemma3Model;m.Gemma3PreTrainedModel;m.GemmaForCausalLM;m.GemmaModel;m.GemmaPreTrainedModel;m.GemmaTokenizer;m.GlmForCausalLM;m.GlmModel;m.GlmPreTrainedModel;m.GraniteForCausalLM;m.GraniteModel;m.GranitePreTrainedModel;m.Grok1Tokenizer;m.GroundingDinoForObjectDetection;m.GroundingDinoImageProcessor;m.GroundingDinoPreTrainedModel;m.GroundingDinoProcessor;m.GroupViTModel;m.GroupViTPreTrainedModel;m.HeliumForCausalLM;m.HeliumModel;m.HeliumPreTrainedModel;m.HerbertTokenizer;m.HieraForImageClassification;m.HieraModel;m.HieraPreTrainedModel;m.HubertForCTC;m.HubertForSequenceClassification;m.HubertModel;m.HubertPreTrainedModel;m.IJepaForImageClassification;m.IJepaModel;m.IJepaPreTrainedModel;m.Idefics3ForConditionalGeneration;m.Idefics3ImageProcessor;m.Idefics3PreTrainedModel;m.Idefics3Processor;m.ImageClassificationPipeline;m.ImageFeatureExtractionPipeline;m.ImageFeatureExtractor;m.ImageMattingOutput;m.ImageProcessor;m.ImageSegmentationPipeline;m.ImageToImagePipeline;m.ImageToTextPipeline;m.InterruptableStoppingCriteria;m.JAISLMHeadModel;m.JAISModel;m.JAISPreTrainedModel;m.JinaCLIPImageProcessor;m.JinaCLIPModel;m.JinaCLIPPreTrainedModel;m.JinaCLIPProcessor;m.JinaCLIPTextModel;m.JinaCLIPVisionModel;m.LiteWhisperForConditionalGeneration;m.LlamaForCausalLM;m.LlamaModel;m.LlamaPreTrainedModel;m.LlamaTokenizer;m.LlavaForConditionalGeneration;m.LlavaOnevisionForConditionalGeneration;m.LlavaOnevisionImageProcessor;m.LlavaPreTrainedModel;m.LogitsProcessor;m.LogitsProcessorList;m.LogitsWarper;m.LongT5ForConditionalGeneration;m.LongT5Model;m.LongT5PreTrainedModel;m.M2M100ForConditionalGeneration;m.M2M100Model;m.M2M100PreTrainedModel;m.M2M100Tokenizer;m.MBart50Tokenizer;m.MBartForCausalLM;m.MBartForConditionalGeneration;m.MBartForSequenceClassification;m.MBartModel;m.MBartPreTrainedModel;m.MBartTokenizer;m.MPNetForMaskedLM;m.MPNetForQuestionAnswering;m.MPNetForSequenceClassification;m.MPNetForTokenClassification;m.MPNetModel;m.MPNetPreTrainedModel;m.MPNetTokenizer;m.MT5ForConditionalGeneration;m.MT5Model;m.MT5PreTrainedModel;m.MarianMTModel;m.MarianModel;m.MarianPreTrainedModel;m.MarianTokenizer;m.Mask2FormerImageProcessor;m.MaskFormerFeatureExtractor;m.MaskFormerForInstanceSegmentation;m.MaskFormerImageProcessor;m.MaskFormerModel;m.MaskFormerPreTrainedModel;m.MaskedLMOutput;m.MaxLengthCriteria;m.Metric3DForDepthEstimation;m.Metric3DPreTrainedModel;m.Metric3Dv2ForDepthEstimation;m.Metric3Dv2PreTrainedModel;m.MgpstrForSceneTextRecognition;m.MgpstrModelOutput;m.MgpstrPreTrainedModel;m.MgpstrProcessor;m.MgpstrTokenizer;m.MimiDecoderModel;m.MimiDecoderOutput;m.MimiEncoderModel;m.MimiEncoderOutput;m.MimiModel;m.MimiPreTrainedModel;m.MinLengthLogitsProcessor;m.MinNewTokensLengthLogitsProcessor;m.MistralForCausalLM;m.MistralModel;m.MistralPreTrainedModel;m.MobileBertForMaskedLM;m.MobileBertForQuestionAnswering;m.MobileBertForSequenceClassification;m.MobileBertModel;m.MobileBertPreTrainedModel;m.MobileBertTokenizer;m.MobileLLMForCausalLM;m.MobileLLMModel;m.MobileLLMPreTrainedModel;m.MobileNetV1FeatureExtractor;m.MobileNetV1ForImageClassification;m.MobileNetV1ForSemanticSegmentation;m.MobileNetV1ImageProcessor;m.MobileNetV1Model;m.MobileNetV1PreTrainedModel;m.MobileNetV2FeatureExtractor;m.MobileNetV2ForImageClassification;m.MobileNetV2ForSemanticSegmentation;m.MobileNetV2ImageProcessor;m.MobileNetV2Model;m.MobileNetV2PreTrainedModel;m.MobileNetV3FeatureExtractor;m.MobileNetV3ForImageClassification;m.MobileNetV3ForSemanticSegmentation;m.MobileNetV3ImageProcessor;m.MobileNetV3Model;m.MobileNetV3PreTrainedModel;m.MobileNetV4FeatureExtractor;m.MobileNetV4ForImageClassification;m.MobileNetV4ForSemanticSegmentation;m.MobileNetV4ImageProcessor;m.MobileNetV4Model;m.MobileNetV4PreTrainedModel;m.MobileViTFeatureExtractor;m.MobileViTForImageClassification;m.MobileViTImageProcessor;m.MobileViTModel;m.MobileViTPreTrainedModel;m.MobileViTV2ForImageClassification;m.MobileViTV2Model;m.MobileViTV2PreTrainedModel;m.ModelOutput;m.ModernBertForMaskedLM;m.ModernBertForSequenceClassification;m.ModernBertForTokenClassification;m.ModernBertModel;m.ModernBertPreTrainedModel;m.Moondream1ForConditionalGeneration;m.MoonshineFeatureExtractor;m.MoonshineForConditionalGeneration;m.MoonshineModel;m.MoonshinePreTrainedModel;m.MoonshineProcessor;m.MptForCausalLM;m.MptModel;m.MptPreTrainedModel;m.MultiModalityCausalLM;m.MultiModalityPreTrainedModel;m.MusicgenForCausalLM;m.MusicgenForConditionalGeneration;m.MusicgenModel;m.MusicgenPreTrainedModel;m.NllbTokenizer;m.NoBadWordsLogitsProcessor;m.NoRepeatNGramLogitsProcessor;m.NomicBertModel;m.NomicBertPreTrainedModel;m.NougatImageProcessor;m.NougatTokenizer;m.OPTForCausalLM;m.OPTModel;m.OPTPreTrainedModel;m.ObjectDetectionPipeline;m.Olmo2ForCausalLM;m.Olmo2Model;m.Olmo2PreTrainedModel;m.OlmoForCausalLM;m.OlmoModel;m.OlmoPreTrainedModel;m.OpenELMForCausalLM;m.OpenELMModel;m.OpenELMPreTrainedModel;m.OwlViTFeatureExtractor;m.OwlViTForObjectDetection;m.OwlViTImageProcessor;m.OwlViTModel;m.OwlViTPreTrainedModel;m.OwlViTProcessor;m.Owlv2ForObjectDetection;m.Owlv2ImageProcessor;m.Owlv2Model;m.Owlv2PreTrainedModel;m.PaliGemmaForConditionalGeneration;m.PaliGemmaPreTrainedModel;m.PaliGemmaProcessor;m.PatchTSMixerForPrediction;m.PatchTSMixerModel;m.PatchTSMixerPreTrainedModel;m.PatchTSTForPrediction;m.PatchTSTModel;m.PatchTSTPreTrainedModel;m.Phi3ForCausalLM;m.Phi3Model;m.Phi3PreTrainedModel;m.Phi3VForCausalLM;m.Phi3VImageProcessor;m.Phi3VPreTrainedModel;m.Phi3VProcessor;m.PhiForCausalLM;m.PhiModel;m.PhiPreTrainedModel;m.Pipeline;m.PreTrainedModel;m.PreTrainedTokenizer;m.PretrainedConfig;m.PretrainedMixin;m.Processor;m.PvtForImageClassification;m.PvtImageProcessor;m.PvtModel;m.PvtPreTrainedModel;m.PyAnnoteFeatureExtractor;m.PyAnnoteForAudioFrameClassification;m.PyAnnoteModel;m.PyAnnotePreTrainedModel;m.PyAnnoteProcessor;m.QuestionAnsweringModelOutput;m.QuestionAnsweringPipeline;m.Qwen2ForCausalLM;m.Qwen2Model;m.Qwen2PreTrainedModel;m.Qwen2Tokenizer;m.Qwen2VLForConditionalGeneration;m.Qwen2VLImageProcessor;m.Qwen2VLPreTrainedModel;m.Qwen2VLProcessor;m.Qwen3ForCausalLM;m.Qwen3Model;m.Qwen3PreTrainedModel;m.RFDetrForObjectDetection;m.RFDetrModel;m.RFDetrObjectDetectionOutput;m.RFDetrPreTrainedModel;m.RTDetrForObjectDetection;m.RTDetrImageProcessor;m.RTDetrModel;m.RTDetrObjectDetectionOutput;m.RTDetrPreTrainedModel;m.RTDetrV2ForObjectDetection;m.RTDetrV2Model;m.RTDetrV2ObjectDetectionOutput;m.RTDetrV2PreTrainedModel;m.RawAudio;var Zx=m.RawImage;m.RawVideo;m.RawVideoFrame;m.RepetitionPenaltyLogitsProcessor;m.ResNetForImageClassification;m.ResNetModel;m.ResNetPreTrainedModel;m.RoFormerForMaskedLM;m.RoFormerForQuestionAnswering;m.RoFormerForSequenceClassification;m.RoFormerForTokenClassification;m.RoFormerModel;m.RoFormerPreTrainedModel;m.RoFormerTokenizer;m.RobertaForMaskedLM;m.RobertaForQuestionAnswering;m.RobertaForSequenceClassification;m.RobertaForTokenClassification;m.RobertaModel;m.RobertaPreTrainedModel;m.RobertaTokenizer;m.SamImageProcessor;m.SamImageSegmentationOutput;m.SamModel;m.SamPreTrainedModel;m.SamProcessor;m.SapiensForDepthEstimation;m.SapiensForNormalEstimation;m.SapiensForSemanticSegmentation;m.SapiensPreTrainedModel;m.SeamlessM4TFeatureExtractor;m.SegformerFeatureExtractor;m.SegformerForImageClassification;m.SegformerForSemanticSegmentation;m.SegformerImageProcessor;m.SegformerModel;m.SegformerPreTrainedModel;m.Seq2SeqLMOutput;m.SequenceClassifierOutput;m.SiglipImageProcessor;m.SiglipModel;m.SiglipPreTrainedModel;m.SiglipTextModel;m.SiglipTokenizer;m.SiglipVisionModel;m.SmolVLMForConditionalGeneration;m.SmolVLMImageProcessor;m.SmolVLMProcessor;m.SnacDecoderModel;m.SnacEncoderModel;m.SnacFeatureExtractor;m.SnacModel;m.SnacPreTrainedModel;m.SpeechT5FeatureExtractor;m.SpeechT5ForSpeechToText;m.SpeechT5ForTextToSpeech;m.SpeechT5HifiGan;m.SpeechT5Model;m.SpeechT5PreTrainedModel;m.SpeechT5Processor;m.SpeechT5Tokenizer;m.SqueezeBertForMaskedLM;m.SqueezeBertForQuestionAnswering;m.SqueezeBertForSequenceClassification;m.SqueezeBertModel;m.SqueezeBertPreTrainedModel;m.SqueezeBertTokenizer;m.StableLmForCausalLM;m.StableLmModel;m.StableLmPreTrainedModel;m.Starcoder2ForCausalLM;m.Starcoder2Model;m.Starcoder2PreTrainedModel;m.StoppingCriteria;m.StoppingCriteriaList;m.StyleTextToSpeech2Model;m.StyleTextToSpeech2PreTrainedModel;m.SummarizationPipeline;m.SuppressTokensAtBeginLogitsProcessor;m.Swin2SRForImageSuperResolution;m.Swin2SRImageProcessor;m.Swin2SRModel;m.Swin2SRPreTrainedModel;m.SwinForImageClassification;m.SwinForSemanticSegmentation;m.SwinModel;m.SwinPreTrainedModel;m.T5ForConditionalGeneration;m.T5Model;m.T5PreTrainedModel;m.T5Tokenizer;m.TableTransformerForObjectDetection;m.TableTransformerModel;m.TableTransformerObjectDetectionOutput;m.TableTransformerPreTrainedModel;m.TemperatureLogitsWarper;m.Tensor;m.Text2TextGenerationPipeline;m.TextClassificationPipeline;m.TextGenerationPipeline;m.TextStreamer;m.TextToAudioPipeline;m.TokenClassificationPipeline;m.TokenClassifierOutput;m.TokenizerModel;m.TopKLogitsWarper;m.TopPLogitsWarper;m.TrOCRForCausalLM;m.TrOCRPreTrainedModel;m.TranslationPipeline;m.UltravoxModel;m.UltravoxPreTrainedModel;m.UltravoxProcessor;m.UniSpeechForCTC;m.UniSpeechForSequenceClassification;m.UniSpeechModel;m.UniSpeechPreTrainedModel;m.UniSpeechSatForAudioFrameClassification;m.UniSpeechSatForCTC;m.UniSpeechSatForSequenceClassification;m.UniSpeechSatModel;m.UniSpeechSatPreTrainedModel;m.VLChatProcessor;m.VLMImageProcessor;m.ViTFeatureExtractor;m.ViTForImageClassification;m.ViTImageProcessor;m.ViTMAEModel;m.ViTMAEPreTrainedModel;m.ViTMSNForImageClassification;m.ViTMSNModel;m.ViTMSNPreTrainedModel;m.ViTModel;m.ViTPreTrainedModel;m.VisionEncoderDecoderModel;m.VitMatteForImageMatting;m.VitMatteImageProcessor;m.VitMattePreTrainedModel;m.VitPoseForPoseEstimation;m.VitPoseImageProcessor;m.VitPosePreTrainedModel;m.VitsModel;m.VitsModelOutput;m.VitsPreTrainedModel;m.VitsTokenizer;m.Wav2Vec2BertForCTC;m.Wav2Vec2BertForSequenceClassification;m.Wav2Vec2BertModel;m.Wav2Vec2BertPreTrainedModel;m.Wav2Vec2CTCTokenizer;m.Wav2Vec2FeatureExtractor;m.Wav2Vec2ForAudioFrameClassification;m.Wav2Vec2ForCTC;m.Wav2Vec2ForSequenceClassification;m.Wav2Vec2Model;m.Wav2Vec2PreTrainedModel;m.Wav2Vec2Processor;m.Wav2Vec2ProcessorWithLM;m.WavLMForAudioFrameClassification;m.WavLMForCTC;m.WavLMForSequenceClassification;m.WavLMForXVector;m.WavLMModel;m.WavLMPreTrainedModel;m.WeSpeakerFeatureExtractor;m.WeSpeakerResNetModel;m.WeSpeakerResNetPreTrainedModel;m.WhisperFeatureExtractor;m.WhisperForConditionalGeneration;m.WhisperModel;m.WhisperPreTrainedModel;m.WhisperProcessor;m.WhisperTextStreamer;m.WhisperTimeStampLogitsProcessor;m.WhisperTokenizer;m.XLMForQuestionAnswering;m.XLMForSequenceClassification;m.XLMForTokenClassification;m.XLMModel;m.XLMPreTrainedModel;m.XLMRobertaForMaskedLM;m.XLMRobertaForQuestionAnswering;m.XLMRobertaForSequenceClassification;m.XLMRobertaForTokenClassification;m.XLMRobertaModel;m.XLMRobertaPreTrainedModel;m.XLMRobertaTokenizer;m.XLMTokenizer;m.XLMWithLMHeadModel;m.XVectorOutput;m.YolosFeatureExtractor;m.YolosForObjectDetection;m.YolosImageProcessor;m.YolosModel;m.YolosObjectDetectionOutput;m.YolosPreTrainedModel;m.ZeroShotAudioClassificationPipeline;m.ZeroShotClassificationPipeline;m.ZeroShotImageClassificationPipeline;m.ZeroShotObjectDetectionPipeline;m.bankers_round;m.cat;m.cos_sim;m.dot;m.dynamic_time_warping;var eT=m.env;m.full;m.full_like;m.getKeyValueShapes;m.hamming;m.hanning;m.interpolate;m.interpolate_4d;m.interpolate_data;m.is_chinese_char;m.layer_norm;m.load_image;m.load_video;m.log_softmax;m.magnitude;m.matmul;m.max;m.mean;m.mean_pooling;m.medianFilter;m.mel_filter_bank;m.min;m.ones;m.ones_like;m.permute;m.permute_data;m.pipeline;m.quantize_embeddings;m.rand;m.read_audio;m.rfft;m.round;m.slice;m.softmax;m.spectrogram;m.stack;m.std_mean;m.topk;m.window_function;m.zeros;m.zeros_like;export{eT as _,Jx as a,Yx as b,Zx as c};
